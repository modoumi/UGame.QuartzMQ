/******************************************************
 * 此代码由代码生成器工具自动生成，请不要修改
 * TinyFx代码生成器核心库版本号：1.0.0.0
 * git: https://github.com/jh98net/TinyFx
 * 文档生成时间：2024-06-12 19: 17:34
 ******************************************************/
using System;
using System.Data;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using TinyFx;
using TinyFx.Data;
using MySql.Data.MySqlClient;
using System.Text;
using TinyFx.Data.MySql;

namespace UGame.Quartz.Repository
{
	#region EO
	/// <summary>
	/// 每日统计数据（每天统计）
	/// 【表 sr_oper_day 的实体类】
	/// </summary>
	[DataContract]
	[Obsolete]
	public class Sr_oper_dayEO : IRowMapper<Sr_oper_dayEO>
	{
		/// <summary>
		/// 构造函数 
		/// </summary>
		public Sr_oper_dayEO()
		{
			this.NewUsers = 0;
			this.LoginUsers = 0;
			this.RegUsers = 0;
			this.CashUsers = 0;
			this.PayUsers = 0;
			this.BetUsers = 0;
			this.TotalBalance = 0;
			this.BetAmount = 0;
			this.BetBonus = 0;
			this.WinBonus = 0;
			this.NewBetUsers = 0;
			this.NewUserBetAmount = 0;
			this.NewUserBetBonus = 0;
			this.NewUserWinBonus = 0;
			this.WinAmount = 0;
			this.PayNotBetUsers = 0;
			this.DOU_FirstPayUsers = 0;
			this.DNU_RepayUsers = 0;
			this.RepeatConsumersD1 = 0;
			this.RepeatConsumersD5 = 0;
			this.RepeatConsumersD10 = 0;
			this.RepeatConsumersD15 = 0;
			this.DNU_FirstPayAmount = 0;
			this.DOU_FirstPayAmount = 0;
			this.DOU_FirstPayTotalAmount = 0;
			this.NewCashUsers = 0;
			this.NewPayUsers = 0;
			this.PayOwnFee = 0.00m;
			this.PayUserFee = 0.00m;
			this.NewUserPayAmount = 0;
			this.PayAmount = 0;
			this.CashOwnFee = 0.00m;
			this.CashUserFee = 0.00m;
			this.NewUserCashAmount = 0;
			this.NewUserWinAmount = 0;
			this.CashAmount = 0;
			this.BonusRecUsers = 0;
			this.BonusAmount = 0;
			this.BonusUseAmount = 0;
			this.BonusRemainAmount = 0;
			this.BonusUnlockAmount = 0;
			this.CashAuditAmount = 0;
			this.CashRefuseAmount = 0;
			this.CashPassAmount = 0;
			this.CashFailAmount = 0;
			this.ProfitAmount = 0;
			this.PromotionFeeAmount = 0;
			this.NewARUP = 0f;
			this.ARUP = 0f;
			this.RetentionD1 = 0f;
			this.RetentionD3 = 0f;
			this.RetentionD7 = 0f;
			this.RetentionD14 = 0f;
			this.RetentionD15 = 0f;
			this.RetentionD20 = 0f;
			this.RetentionD30 = 0f;
			this.RegRetentionD1 = 0f;
			this.RegRetentionD3 = 0f;
			this.RegRetentionD7 = 0f;
			this.RegRetentionD15 = 0f;
			this.RegRetentionD30 = 0f;
			this.PayRetentionD1 = 0f;
			this.PayRetentionD2 = 0f;
			this.PayRetentionD3 = 0f;
			this.PayRetentionD4 = 0f;
			this.PayRetentionD5 = 0f;
			this.PayRetentionD6 = 0f;
			this.PayRetentionD7 = 0f;
			this.PayRetentionD14 = 0f;
			this.PayRetentionD20 = 0f;
			this.PayRetentionD30 = 0f;
			this.DNU_GGR1 = 0;
			this.DNU_GGR2 = 0;
			this.DNU_GGR3 = 0;
			this.DNU_GGR4 = 0;
			this.DNU_GGR5 = 0;
			this.DNU_GGR6 = 0;
			this.DNU_GGR7 = 0;
			this.DNU_GGR8 = 0;
			this.DNU_GGR9 = 0;
			this.DNU_GGR10 = 0;
			this.DNU_GGR11 = 0;
			this.DNU_GGR12 = 0;
			this.DNU_GGR13 = 0;
			this.DNU_GGR14 = 0;
			this.DNU_GGR15 = 0;
			this.DNU_GGR16 = 0;
			this.DNU_GGR17 = 0;
			this.DNU_GGR18 = 0;
			this.DNU_GGR19 = 0;
			this.DNU_GGR20 = 0;
			this.DNU_GGR21 = 0;
			this.DNU_GGR22 = 0;
			this.DNU_GGR23 = 0;
			this.DNU_GGR24 = 0;
			this.DNU_GGR25 = 0;
			this.DNU_GGR26 = 0;
			this.DNU_GGR27 = 0;
			this.DNU_GGR28 = 0;
			this.DNU_GGR29 = 0;
			this.DNU_GGR30 = 0;
			this.Lose10 = 0;
			this.Lose10_100 = 0;
			this.Lose100_500 = 0;
			this.Lose500_1000 = 0;
			this.Lose1000_3000 = 0;
			this.Lose3000_5000 = 0;
			this.Lose5000_10000 = 0;
			this.Lose10000_50000 = 0;
			this.Lose50000 = 0;
			this.Win10 = 0;
			this.Win10_100 = 0;
			this.Win100_500 = 0;
			this.Win500_1000 = 0;
			this.Win1000_3000 = 0;
			this.Win3000_5000 = 0;
			this.Win5000_10000 = 0;
			this.Win10000_50000 = 0;
			this.Win50000 = 0;
			this.TotalBalanceCalcTime = DateTime.Now;
			this.BetD1 = 0f;
			this.RMPBet = 0f;
			this.RSPBet = 0f;
			this.PSPBet = 0f;
			this.PMPBet = 0f;
			this.RecDate = DateTime.Now;
		}
		#region 主键原始值 & 主键集合
	    
		/// <summary>
		/// 当前对象是否保存原始主键值，当修改了主键值时为 true
		/// </summary>
		public bool HasOriginal { get; protected set; }
		
		private DateTime _originalDayID;
		/// <summary>
		/// 【数据库中的原始主键 DayID 值的副本，用于主键值更新】
		/// </summary>
		public DateTime OriginalDayID
		{
			get { return _originalDayID; }
			set { HasOriginal = true; _originalDayID = value; }
		}
		
		private string _originalOperatorID;
		/// <summary>
		/// 【数据库中的原始主键 OperatorID 值的副本，用于主键值更新】
		/// </summary>
		public string OriginalOperatorID
		{
			get { return _originalOperatorID; }
			set { HasOriginal = true; _originalOperatorID = value; }
		}
	    /// <summary>
	    /// 获取主键集合。key: 数据库字段名称, value: 主键值
	    /// </summary>
	    /// <returns></returns>
	    public Dictionary<string, object> GetPrimaryKeys()
	    {
	        return new Dictionary<string, object>() { { "DayID", DayID },  { "OperatorID", OperatorID }, };
	    }
	    /// <summary>
	    /// 获取主键集合JSON格式
	    /// </summary>
	    /// <returns></returns>
	    public string GetPrimaryKeysJson() => SerializerUtil.SerializeJson(GetPrimaryKeys());
		#endregion // 主键原始值
		#region 所有字段
		/// <summary>
		/// 统计日
		/// 【主键 date】
		/// </summary>
		[DataMember(Order = 1)]
		public DateTime DayID { get; set; }
		/// <summary>
		/// 运营商编码
		/// 【主键 varchar(50)】
		/// </summary>
		[DataMember(Order = 2)]
		public string OperatorID { get; set; }
		/// <summary>
		/// 国家编码ISO 3166-1三位字母
		/// 【字段 varchar(5)】
		/// </summary>
		[DataMember(Order = 3)]
		public string CountryID { get; set; }
		/// <summary>
		/// 货币类型（货币缩写USD）
		/// 【字段 varchar(5)】
		/// </summary>
		[DataMember(Order = 4)]
		public string CurrencyID { get; set; }
		/// <summary>
		/// 新增用户数DNU
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 5)]
		public int NewUsers { get; set; }
		/// <summary>
		/// 登录用户DAU
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 6)]
		public int LoginUsers { get; set; }
		/// <summary>
		/// 注册用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 7)]
		public int RegUsers { get; set; }
		/// <summary>
		/// 提现用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 8)]
		public int CashUsers { get; set; }
		/// <summary>
		/// 充值用户数PU
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 9)]
		public int PayUsers { get; set; }
		/// <summary>
		/// 下注用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 10)]
		public int BetUsers { get; set; }
		/// <summary>
		/// 当日所有账户总存量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 11)]
		public long TotalBalance { get; set; }
		/// <summary>
		/// 下注数量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 12)]
		public long BetAmount { get; set; }
		/// <summary>
		/// 下注时扣除的bonus
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 13)]
		public long BetBonus { get; set; }
		/// <summary>
		/// 返奖时增加的bonus
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 14)]
		public long WinBonus { get; set; }
		/// <summary>
		/// 新下注用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 15)]
		public int NewBetUsers { get; set; }
		/// <summary>
		/// 新用户下注额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 16)]
		public long NewUserBetAmount { get; set; }
		/// <summary>
		/// 新用户下注的bonus
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 17)]
		public long NewUserBetBonus { get; set; }
		/// <summary>
		/// 新用户返奖bonus
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 18)]
		public long NewUserWinBonus { get; set; }
		/// <summary>
		/// 返奖数量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 19)]
		public long WinAmount { get; set; }
		/// <summary>
		/// 充值未下注用户数量
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 20)]
		public int PayNotBetUsers { get; set; }
		/// <summary>
		/// 当日首充(历史未充值)的老用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 21)]
		public int DOU_FirstPayUsers { get; set; }
		/// <summary>
		/// DNU复充用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 22)]
		public int DNU_RepayUsers { get; set; }
		/// <summary>
		/// 回流用户
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 23)]
		public int RepeatConsumersD1 { get; set; }
		/// <summary>
		/// 回流用户(5日）
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 24)]
		public int RepeatConsumersD5 { get; set; }
		/// <summary>
		/// 回流用户(10日)
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 25)]
		public int RepeatConsumersD10 { get; set; }
		/// <summary>
		/// 回流用户(15日)
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 26)]
		public int RepeatConsumersD15 { get; set; }
		/// <summary>
		/// DNU首充金额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 27)]
		public long DNU_FirstPayAmount { get; set; }
		/// <summary>
		/// 老用户当日首充的累计金额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 28)]
		public long DOU_FirstPayAmount { get; set; }
		/// <summary>
		/// 首充老用户（历史未有充值）当日累计充值额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 29)]
		public long DOU_FirstPayTotalAmount { get; set; }
		/// <summary>
		/// 新提现用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 30)]
		public int NewCashUsers { get; set; }
		/// <summary>
		/// 新充值用户数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 31)]
		public int NewPayUsers { get; set; }
		/// <summary>
		/// 充值我方手续费
		/// 【字段 decimal(20,2)】
		/// </summary>
		[DataMember(Order = 32)]
		public decimal PayOwnFee { get; set; }
		/// <summary>
		/// 充值用户手续费
		/// 【字段 decimal(20,2)】
		/// </summary>
		[DataMember(Order = 33)]
		public decimal PayUserFee { get; set; }
		/// <summary>
		/// 新用户充值额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 34)]
		public long NewUserPayAmount { get; set; }
		/// <summary>
		/// 充值数量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 35)]
		public long PayAmount { get; set; }
		/// <summary>
		/// 提现我方手续费
		/// 【字段 decimal(20,2)】
		/// </summary>
		[DataMember(Order = 36)]
		public decimal CashOwnFee { get; set; }
		/// <summary>
		/// 提现用户手续费
		/// 【字段 decimal(20,2)】
		/// </summary>
		[DataMember(Order = 37)]
		public decimal CashUserFee { get; set; }
		/// <summary>
		/// 新用户提现额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 38)]
		public long NewUserCashAmount { get; set; }
		/// <summary>
		/// 新用户返奖额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 39)]
		public long NewUserWinAmount { get; set; }
		/// <summary>
		/// 提现数量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 40)]
		public long CashAmount { get; set; }
		/// <summary>
		/// bonus领取人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 41)]
		public int BonusRecUsers { get; set; }
		/// <summary>
		/// bonus发放总量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 42)]
		public long BonusAmount { get; set; }
		/// <summary>
		/// bonus消耗总量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 43)]
		public long BonusUseAmount { get; set; }
		/// <summary>
		/// bonus存量
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 44)]
		public long BonusRemainAmount { get; set; }
		/// <summary>
		/// bonus解锁金额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 45)]
		public long BonusUnlockAmount { get; set; }
		/// <summary>
		/// 提审现金额度
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 46)]
		public long CashAuditAmount { get; set; }
		/// <summary>
		/// 拒审现金额度
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 47)]
		public long CashRefuseAmount { get; set; }
		/// <summary>
		/// 通过成功额度
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 48)]
		public long CashPassAmount { get; set; }
		/// <summary>
		/// 失败金额
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 49)]
		public long CashFailAmount { get; set; }
		/// <summary>
		/// 盈利数量GGR（下注-返奖-活动）
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 50)]
		public long ProfitAmount { get; set; }
		/// <summary>
		/// 活动成本sum（s_currency_change.Amount）
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 51)]
		public long PromotionFeeAmount { get; set; }
		/// <summary>
		/// 新用户ARUP（新下注用户数/新用户下注-返奖总额）
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 52)]
		public float NewARUP { get; set; }
		/// <summary>
		/// ARUP
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 53)]
		public float ARUP { get; set; }
		/// <summary>
		/// 1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 54)]
		public float RetentionD1 { get; set; }
		/// <summary>
		/// 3日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 55)]
		public float RetentionD3 { get; set; }
		/// <summary>
		/// 7日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 56)]
		public float RetentionD7 { get; set; }
		/// <summary>
		/// 14日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 57)]
		public float RetentionD14 { get; set; }
		/// <summary>
		/// 15日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 58)]
		public float RetentionD15 { get; set; }
		/// <summary>
		/// 20日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 59)]
		public float RetentionD20 { get; set; }
		/// <summary>
		/// 30日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 60)]
		public float RetentionD30 { get; set; }
		/// <summary>
		/// 注册1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 61)]
		public float RegRetentionD1 { get; set; }
		/// <summary>
		/// 1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 62)]
		public float RegRetentionD3 { get; set; }
		/// <summary>
		/// 1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 63)]
		public float RegRetentionD7 { get; set; }
		/// <summary>
		/// 1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 64)]
		public float RegRetentionD15 { get; set; }
		/// <summary>
		/// 1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 65)]
		public float RegRetentionD30 { get; set; }
		/// <summary>
		/// 充值1日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 66)]
		public float PayRetentionD1 { get; set; }
		/// <summary>
		/// 充值2日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 67)]
		public float PayRetentionD2 { get; set; }
		/// <summary>
		/// 充值3日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 68)]
		public float PayRetentionD3 { get; set; }
		/// <summary>
		/// 充值4日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 69)]
		public float PayRetentionD4 { get; set; }
		/// <summary>
		/// 充值5日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 70)]
		public float PayRetentionD5 { get; set; }
		/// <summary>
		/// 充值6日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 71)]
		public float PayRetentionD6 { get; set; }
		/// <summary>
		/// 充值7日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 72)]
		public float PayRetentionD7 { get; set; }
		/// <summary>
		/// 充值14日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 73)]
		public float PayRetentionD14 { get; set; }
		/// <summary>
		/// 充值20日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 74)]
		public float PayRetentionD20 { get; set; }
		/// <summary>
		/// 充值30日留存率
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 75)]
		public float PayRetentionD30 { get; set; }
		/// <summary>
		/// DNU_GGR1
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 76)]
		public long DNU_GGR1 { get; set; }
		/// <summary>
		/// DNU_GGR2
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 77)]
		public long DNU_GGR2 { get; set; }
		/// <summary>
		/// DNU_GGR3
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 78)]
		public long DNU_GGR3 { get; set; }
		/// <summary>
		/// DNU_GGR4
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 79)]
		public long DNU_GGR4 { get; set; }
		/// <summary>
		/// DNU_GGR5
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 80)]
		public long DNU_GGR5 { get; set; }
		/// <summary>
		/// DNU_GGR6
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 81)]
		public long DNU_GGR6 { get; set; }
		/// <summary>
		/// DNU_GGR7
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 82)]
		public long DNU_GGR7 { get; set; }
		/// <summary>
		/// DNU_GGR8
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 83)]
		public long DNU_GGR8 { get; set; }
		/// <summary>
		/// DNU_GGR9
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 84)]
		public long DNU_GGR9 { get; set; }
		/// <summary>
		/// DNU_GGR10
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 85)]
		public long DNU_GGR10 { get; set; }
		/// <summary>
		/// DNU_GGR11
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 86)]
		public long DNU_GGR11 { get; set; }
		/// <summary>
		/// DNU_GGR12
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 87)]
		public long DNU_GGR12 { get; set; }
		/// <summary>
		/// DNU_GGR13
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 88)]
		public long DNU_GGR13 { get; set; }
		/// <summary>
		/// DNU_GGR14
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 89)]
		public long DNU_GGR14 { get; set; }
		/// <summary>
		/// DNU_GGR15
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 90)]
		public long DNU_GGR15 { get; set; }
		/// <summary>
		/// DNU_GGR16
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 91)]
		public long DNU_GGR16 { get; set; }
		/// <summary>
		/// DNU_GGR17
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 92)]
		public long DNU_GGR17 { get; set; }
		/// <summary>
		/// DNU_GGR18
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 93)]
		public long DNU_GGR18 { get; set; }
		/// <summary>
		/// DNU_GGR19
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 94)]
		public long DNU_GGR19 { get; set; }
		/// <summary>
		/// DNU_GGR20
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 95)]
		public long DNU_GGR20 { get; set; }
		/// <summary>
		/// DNU_GGR21
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 96)]
		public long DNU_GGR21 { get; set; }
		/// <summary>
		/// DNU_GGR22
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 97)]
		public long DNU_GGR22 { get; set; }
		/// <summary>
		/// DNU_GGR23
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 98)]
		public long DNU_GGR23 { get; set; }
		/// <summary>
		/// DNU_GGR24
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 99)]
		public long DNU_GGR24 { get; set; }
		/// <summary>
		/// DNU_GGR25
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 100)]
		public long DNU_GGR25 { get; set; }
		/// <summary>
		/// DNU_GGR26
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 101)]
		public long DNU_GGR26 { get; set; }
		/// <summary>
		/// DNU_GGR27
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 102)]
		public long DNU_GGR27 { get; set; }
		/// <summary>
		/// DNU_GGR28
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 103)]
		public long DNU_GGR28 { get; set; }
		/// <summary>
		/// DNU_GGR29
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 104)]
		public long DNU_GGR29 { get; set; }
		/// <summary>
		/// DNU_GGR30
		/// 【字段 bigint】
		/// </summary>
		[DataMember(Order = 105)]
		public long DNU_GGR30 { get; set; }
		/// <summary>
		/// 输10
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 106)]
		public int Lose10 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 107)]
		public int Lose10_100 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 108)]
		public int Lose100_500 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 109)]
		public int Lose500_1000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 110)]
		public int Lose1000_3000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 111)]
		public int Lose3000_5000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 112)]
		public int Lose5000_10000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 113)]
		public int Lose10000_50000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 114)]
		public int Lose50000 { get; set; }
		/// <summary>
		/// 输10
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 115)]
		public int Win10 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 116)]
		public int Win10_100 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 117)]
		public int Win100_500 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 118)]
		public int Win500_1000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 119)]
		public int Win1000_3000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 120)]
		public int Win3000_5000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 121)]
		public int Win5000_10000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 122)]
		public int Win10000_50000 { get; set; }
		/// <summary>
		/// 输10-100人数
		/// 【字段 int】
		/// </summary>
		[DataMember(Order = 123)]
		public int Win50000 { get; set; }
		/// <summary>
		/// 账户存量查询时间
		/// 【字段 datetime】
		/// </summary>
		[DataMember(Order = 124)]
		public DateTime TotalBalanceCalcTime { get; set; }
		/// <summary>
		/// 下注一日留存
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 125)]
		public float BetD1 { get; set; }
		/// <summary>
		/// 注册用户复充人均下注
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 126)]
		public float RMPBet { get; set; }
		/// <summary>
		/// 注册用户单充人均下注
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 127)]
		public float RSPBet { get; set; }
		/// <summary>
		/// 充值用户单充人均下注
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 128)]
		public float PSPBet { get; set; }
		/// <summary>
		/// 充值用户复充人均下注
		/// 【字段 float】
		/// </summary>
		[DataMember(Order = 129)]
		public float PMPBet { get; set; }
		/// <summary>
		/// 记录时间
		/// 【字段 datetime】
		/// </summary>
		[DataMember(Order = 130)]
		public DateTime RecDate { get; set; }
		#endregion // 所有列
		#region 实体映射
		
		/// <summary>
		/// 将IDataReader映射成实体对象
		/// </summary>
		/// <param name = "reader">只进结果集流</param>
		/// <return>实体对象</return>
		public Sr_oper_dayEO MapRow(IDataReader reader)
		{
			return MapDataReader(reader);
		}
		
		/// <summary>
		/// 将IDataReader映射成实体对象
		/// </summary>
		/// <param name = "reader">只进结果集流</param>
		/// <return>实体对象</return>
		public static Sr_oper_dayEO MapDataReader(IDataReader reader)
		{
		    Sr_oper_dayEO ret = new Sr_oper_dayEO();
			ret.DayID = reader.ToDateTime("DayID");
			ret.OriginalDayID = ret.DayID;
			ret.OperatorID = reader.ToString("OperatorID");
			ret.OriginalOperatorID = ret.OperatorID;
			ret.CountryID = reader.ToString("CountryID");
			ret.CurrencyID = reader.ToString("CurrencyID");
			ret.NewUsers = reader.ToInt32("NewUsers");
			ret.LoginUsers = reader.ToInt32("LoginUsers");
			ret.RegUsers = reader.ToInt32("RegUsers");
			ret.CashUsers = reader.ToInt32("CashUsers");
			ret.PayUsers = reader.ToInt32("PayUsers");
			ret.BetUsers = reader.ToInt32("BetUsers");
			ret.TotalBalance = reader.ToInt64("TotalBalance");
			ret.BetAmount = reader.ToInt64("BetAmount");
			ret.BetBonus = reader.ToInt64("BetBonus");
			ret.WinBonus = reader.ToInt64("WinBonus");
			ret.NewBetUsers = reader.ToInt32("NewBetUsers");
			ret.NewUserBetAmount = reader.ToInt64("NewUserBetAmount");
			ret.NewUserBetBonus = reader.ToInt64("NewUserBetBonus");
			ret.NewUserWinBonus = reader.ToInt64("NewUserWinBonus");
			ret.WinAmount = reader.ToInt64("WinAmount");
			ret.PayNotBetUsers = reader.ToInt32("PayNotBetUsers");
			ret.DOU_FirstPayUsers = reader.ToInt32("DOU_FirstPayUsers");
			ret.DNU_RepayUsers = reader.ToInt32("DNU_RepayUsers");
			ret.RepeatConsumersD1 = reader.ToInt32("RepeatConsumersD1");
			ret.RepeatConsumersD5 = reader.ToInt32("RepeatConsumersD5");
			ret.RepeatConsumersD10 = reader.ToInt32("RepeatConsumersD10");
			ret.RepeatConsumersD15 = reader.ToInt32("RepeatConsumersD15");
			ret.DNU_FirstPayAmount = reader.ToInt64("DNU_FirstPayAmount");
			ret.DOU_FirstPayAmount = reader.ToInt64("DOU_FirstPayAmount");
			ret.DOU_FirstPayTotalAmount = reader.ToInt64("DOU_FirstPayTotalAmount");
			ret.NewCashUsers = reader.ToInt32("NewCashUsers");
			ret.NewPayUsers = reader.ToInt32("NewPayUsers");
			ret.PayOwnFee = reader.ToDecimal("PayOwnFee");
			ret.PayUserFee = reader.ToDecimal("PayUserFee");
			ret.NewUserPayAmount = reader.ToInt64("NewUserPayAmount");
			ret.PayAmount = reader.ToInt64("PayAmount");
			ret.CashOwnFee = reader.ToDecimal("CashOwnFee");
			ret.CashUserFee = reader.ToDecimal("CashUserFee");
			ret.NewUserCashAmount = reader.ToInt64("NewUserCashAmount");
			ret.NewUserWinAmount = reader.ToInt64("NewUserWinAmount");
			ret.CashAmount = reader.ToInt64("CashAmount");
			ret.BonusRecUsers = reader.ToInt32("BonusRecUsers");
			ret.BonusAmount = reader.ToInt64("BonusAmount");
			ret.BonusUseAmount = reader.ToInt64("BonusUseAmount");
			ret.BonusRemainAmount = reader.ToInt64("BonusRemainAmount");
			ret.BonusUnlockAmount = reader.ToInt64("BonusUnlockAmount");
			ret.CashAuditAmount = reader.ToInt64("CashAuditAmount");
			ret.CashRefuseAmount = reader.ToInt64("CashRefuseAmount");
			ret.CashPassAmount = reader.ToInt64("CashPassAmount");
			ret.CashFailAmount = reader.ToInt64("CashFailAmount");
			ret.ProfitAmount = reader.ToInt64("ProfitAmount");
			ret.PromotionFeeAmount = reader.ToInt64("PromotionFeeAmount");
			ret.NewARUP = reader.ToSingle("NewARUP");
			ret.ARUP = reader.ToSingle("ARUP");
			ret.RetentionD1 = reader.ToSingle("RetentionD1");
			ret.RetentionD3 = reader.ToSingle("RetentionD3");
			ret.RetentionD7 = reader.ToSingle("RetentionD7");
			ret.RetentionD14 = reader.ToSingle("RetentionD14");
			ret.RetentionD15 = reader.ToSingle("RetentionD15");
			ret.RetentionD20 = reader.ToSingle("RetentionD20");
			ret.RetentionD30 = reader.ToSingle("RetentionD30");
			ret.RegRetentionD1 = reader.ToSingle("RegRetentionD1");
			ret.RegRetentionD3 = reader.ToSingle("RegRetentionD3");
			ret.RegRetentionD7 = reader.ToSingle("RegRetentionD7");
			ret.RegRetentionD15 = reader.ToSingle("RegRetentionD15");
			ret.RegRetentionD30 = reader.ToSingle("RegRetentionD30");
			ret.PayRetentionD1 = reader.ToSingle("PayRetentionD1");
			ret.PayRetentionD2 = reader.ToSingle("PayRetentionD2");
			ret.PayRetentionD3 = reader.ToSingle("PayRetentionD3");
			ret.PayRetentionD4 = reader.ToSingle("PayRetentionD4");
			ret.PayRetentionD5 = reader.ToSingle("PayRetentionD5");
			ret.PayRetentionD6 = reader.ToSingle("PayRetentionD6");
			ret.PayRetentionD7 = reader.ToSingle("PayRetentionD7");
			ret.PayRetentionD14 = reader.ToSingle("PayRetentionD14");
			ret.PayRetentionD20 = reader.ToSingle("PayRetentionD20");
			ret.PayRetentionD30 = reader.ToSingle("PayRetentionD30");
			ret.DNU_GGR1 = reader.ToInt64("DNU_GGR1");
			ret.DNU_GGR2 = reader.ToInt64("DNU_GGR2");
			ret.DNU_GGR3 = reader.ToInt64("DNU_GGR3");
			ret.DNU_GGR4 = reader.ToInt64("DNU_GGR4");
			ret.DNU_GGR5 = reader.ToInt64("DNU_GGR5");
			ret.DNU_GGR6 = reader.ToInt64("DNU_GGR6");
			ret.DNU_GGR7 = reader.ToInt64("DNU_GGR7");
			ret.DNU_GGR8 = reader.ToInt64("DNU_GGR8");
			ret.DNU_GGR9 = reader.ToInt64("DNU_GGR9");
			ret.DNU_GGR10 = reader.ToInt64("DNU_GGR10");
			ret.DNU_GGR11 = reader.ToInt64("DNU_GGR11");
			ret.DNU_GGR12 = reader.ToInt64("DNU_GGR12");
			ret.DNU_GGR13 = reader.ToInt64("DNU_GGR13");
			ret.DNU_GGR14 = reader.ToInt64("DNU_GGR14");
			ret.DNU_GGR15 = reader.ToInt64("DNU_GGR15");
			ret.DNU_GGR16 = reader.ToInt64("DNU_GGR16");
			ret.DNU_GGR17 = reader.ToInt64("DNU_GGR17");
			ret.DNU_GGR18 = reader.ToInt64("DNU_GGR18");
			ret.DNU_GGR19 = reader.ToInt64("DNU_GGR19");
			ret.DNU_GGR20 = reader.ToInt64("DNU_GGR20");
			ret.DNU_GGR21 = reader.ToInt64("DNU_GGR21");
			ret.DNU_GGR22 = reader.ToInt64("DNU_GGR22");
			ret.DNU_GGR23 = reader.ToInt64("DNU_GGR23");
			ret.DNU_GGR24 = reader.ToInt64("DNU_GGR24");
			ret.DNU_GGR25 = reader.ToInt64("DNU_GGR25");
			ret.DNU_GGR26 = reader.ToInt64("DNU_GGR26");
			ret.DNU_GGR27 = reader.ToInt64("DNU_GGR27");
			ret.DNU_GGR28 = reader.ToInt64("DNU_GGR28");
			ret.DNU_GGR29 = reader.ToInt64("DNU_GGR29");
			ret.DNU_GGR30 = reader.ToInt64("DNU_GGR30");
			ret.Lose10 = reader.ToInt32("Lose10");
			ret.Lose10_100 = reader.ToInt32("Lose10_100");
			ret.Lose100_500 = reader.ToInt32("Lose100_500");
			ret.Lose500_1000 = reader.ToInt32("Lose500_1000");
			ret.Lose1000_3000 = reader.ToInt32("Lose1000_3000");
			ret.Lose3000_5000 = reader.ToInt32("Lose3000_5000");
			ret.Lose5000_10000 = reader.ToInt32("Lose5000_10000");
			ret.Lose10000_50000 = reader.ToInt32("Lose10000_50000");
			ret.Lose50000 = reader.ToInt32("Lose50000");
			ret.Win10 = reader.ToInt32("Win10");
			ret.Win10_100 = reader.ToInt32("Win10_100");
			ret.Win100_500 = reader.ToInt32("Win100_500");
			ret.Win500_1000 = reader.ToInt32("Win500_1000");
			ret.Win1000_3000 = reader.ToInt32("Win1000_3000");
			ret.Win3000_5000 = reader.ToInt32("Win3000_5000");
			ret.Win5000_10000 = reader.ToInt32("Win5000_10000");
			ret.Win10000_50000 = reader.ToInt32("Win10000_50000");
			ret.Win50000 = reader.ToInt32("Win50000");
			ret.TotalBalanceCalcTime = reader.ToDateTime("TotalBalanceCalcTime");
			ret.BetD1 = reader.ToSingle("BetD1");
			ret.RMPBet = reader.ToSingle("RMPBet");
			ret.RSPBet = reader.ToSingle("RSPBet");
			ret.PSPBet = reader.ToSingle("PSPBet");
			ret.PMPBet = reader.ToSingle("PMPBet");
			ret.RecDate = reader.ToDateTime("RecDate");
		    return ret;
		}
		
		#endregion
	}
	#endregion // EO

	#region MO
	/// <summary>
	/// 每日统计数据（每天统计）
	/// 【表 sr_oper_day 的操作类】
	/// </summary>
	[Obsolete]
	public class Sr_oper_dayMO : MySqlTableMO<Sr_oper_dayEO>
	{
		/// <summary>
		/// 表名
		/// </summary>
	    public override string TableName { get; set; } = "`sr_oper_day`";
	    
		#region Constructors
		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name = "database">数据来源</param>
		public Sr_oper_dayMO(MySqlDatabase database) : base(database) { }
		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name = "connectionStringName">配置文件.config中定义的连接字符串名称</param>
		public Sr_oper_dayMO(string connectionStringName = null) : base(connectionStringName) { }
	    /// <summary>
	    /// 构造函数
	    /// </summary>
	    /// <param name="connectionString">数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
	    /// <param name="commandTimeout">CommandTimeout时间</param>
	    public Sr_oper_dayMO(string connectionString, int commandTimeout) : base(connectionString, commandTimeout) { }
		#endregion // Constructors
	    
	    #region  Add
		/// <summary>
		/// 插入数据
		/// </summary>
		/// <param name = "item">要插入的实体对象</param>
		/// <param name="tm_">事务管理对象</param>
		/// <param name="useIgnore_">是否使用INSERT IGNORE</param>
		/// <return>受影响的行数</return>
		public override int Add(Sr_oper_dayEO item, TransactionManager tm_ = null, bool useIgnore_ = false)
		{
			RepairAddData(item, useIgnore_, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_); 
		}
		public override async Task<int> AddAsync(Sr_oper_dayEO item, TransactionManager tm_ = null, bool useIgnore_ = false)
		{
			RepairAddData(item, useIgnore_, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_); 
		}
	    private void RepairAddData(Sr_oper_dayEO item, bool useIgnore_, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = useIgnore_ ? "INSERT IGNORE" : "INSERT";
			sql_ += $" INTO {TableName} (`DayID`, `OperatorID`, `CountryID`, `CurrencyID`, `NewUsers`, `LoginUsers`, `RegUsers`, `CashUsers`, `PayUsers`, `BetUsers`, `TotalBalance`, `BetAmount`, `BetBonus`, `WinBonus`, `NewBetUsers`, `NewUserBetAmount`, `NewUserBetBonus`, `NewUserWinBonus`, `WinAmount`, `PayNotBetUsers`, `DOU_FirstPayUsers`, `DNU_RepayUsers`, `RepeatConsumersD1`, `RepeatConsumersD5`, `RepeatConsumersD10`, `RepeatConsumersD15`, `DNU_FirstPayAmount`, `DOU_FirstPayAmount`, `DOU_FirstPayTotalAmount`, `NewCashUsers`, `NewPayUsers`, `PayOwnFee`, `PayUserFee`, `NewUserPayAmount`, `PayAmount`, `CashOwnFee`, `CashUserFee`, `NewUserCashAmount`, `NewUserWinAmount`, `CashAmount`, `BonusRecUsers`, `BonusAmount`, `BonusUseAmount`, `BonusRemainAmount`, `BonusUnlockAmount`, `CashAuditAmount`, `CashRefuseAmount`, `CashPassAmount`, `CashFailAmount`, `ProfitAmount`, `PromotionFeeAmount`, `NewARUP`, `ARUP`, `RetentionD1`, `RetentionD3`, `RetentionD7`, `RetentionD14`, `RetentionD15`, `RetentionD20`, `RetentionD30`, `RegRetentionD1`, `RegRetentionD3`, `RegRetentionD7`, `RegRetentionD15`, `RegRetentionD30`, `PayRetentionD1`, `PayRetentionD2`, `PayRetentionD3`, `PayRetentionD4`, `PayRetentionD5`, `PayRetentionD6`, `PayRetentionD7`, `PayRetentionD14`, `PayRetentionD20`, `PayRetentionD30`, `DNU_GGR1`, `DNU_GGR2`, `DNU_GGR3`, `DNU_GGR4`, `DNU_GGR5`, `DNU_GGR6`, `DNU_GGR7`, `DNU_GGR8`, `DNU_GGR9`, `DNU_GGR10`, `DNU_GGR11`, `DNU_GGR12`, `DNU_GGR13`, `DNU_GGR14`, `DNU_GGR15`, `DNU_GGR16`, `DNU_GGR17`, `DNU_GGR18`, `DNU_GGR19`, `DNU_GGR20`, `DNU_GGR21`, `DNU_GGR22`, `DNU_GGR23`, `DNU_GGR24`, `DNU_GGR25`, `DNU_GGR26`, `DNU_GGR27`, `DNU_GGR28`, `DNU_GGR29`, `DNU_GGR30`, `Lose10`, `Lose10_100`, `Lose100_500`, `Lose500_1000`, `Lose1000_3000`, `Lose3000_5000`, `Lose5000_10000`, `Lose10000_50000`, `Lose50000`, `Win10`, `Win10_100`, `Win100_500`, `Win500_1000`, `Win1000_3000`, `Win3000_5000`, `Win5000_10000`, `Win10000_50000`, `Win50000`, `TotalBalanceCalcTime`, `BetD1`, `RMPBet`, `RSPBet`, `PSPBet`, `PMPBet`, `RecDate`) VALUE (@DayID, @OperatorID, @CountryID, @CurrencyID, @NewUsers, @LoginUsers, @RegUsers, @CashUsers, @PayUsers, @BetUsers, @TotalBalance, @BetAmount, @BetBonus, @WinBonus, @NewBetUsers, @NewUserBetAmount, @NewUserBetBonus, @NewUserWinBonus, @WinAmount, @PayNotBetUsers, @DOU_FirstPayUsers, @DNU_RepayUsers, @RepeatConsumersD1, @RepeatConsumersD5, @RepeatConsumersD10, @RepeatConsumersD15, @DNU_FirstPayAmount, @DOU_FirstPayAmount, @DOU_FirstPayTotalAmount, @NewCashUsers, @NewPayUsers, @PayOwnFee, @PayUserFee, @NewUserPayAmount, @PayAmount, @CashOwnFee, @CashUserFee, @NewUserCashAmount, @NewUserWinAmount, @CashAmount, @BonusRecUsers, @BonusAmount, @BonusUseAmount, @BonusRemainAmount, @BonusUnlockAmount, @CashAuditAmount, @CashRefuseAmount, @CashPassAmount, @CashFailAmount, @ProfitAmount, @PromotionFeeAmount, @NewARUP, @ARUP, @RetentionD1, @RetentionD3, @RetentionD7, @RetentionD14, @RetentionD15, @RetentionD20, @RetentionD30, @RegRetentionD1, @RegRetentionD3, @RegRetentionD7, @RegRetentionD15, @RegRetentionD30, @PayRetentionD1, @PayRetentionD2, @PayRetentionD3, @PayRetentionD4, @PayRetentionD5, @PayRetentionD6, @PayRetentionD7, @PayRetentionD14, @PayRetentionD20, @PayRetentionD30, @DNU_GGR1, @DNU_GGR2, @DNU_GGR3, @DNU_GGR4, @DNU_GGR5, @DNU_GGR6, @DNU_GGR7, @DNU_GGR8, @DNU_GGR9, @DNU_GGR10, @DNU_GGR11, @DNU_GGR12, @DNU_GGR13, @DNU_GGR14, @DNU_GGR15, @DNU_GGR16, @DNU_GGR17, @DNU_GGR18, @DNU_GGR19, @DNU_GGR20, @DNU_GGR21, @DNU_GGR22, @DNU_GGR23, @DNU_GGR24, @DNU_GGR25, @DNU_GGR26, @DNU_GGR27, @DNU_GGR28, @DNU_GGR29, @DNU_GGR30, @Lose10, @Lose10_100, @Lose100_500, @Lose500_1000, @Lose1000_3000, @Lose3000_5000, @Lose5000_10000, @Lose10000_50000, @Lose50000, @Win10, @Win10_100, @Win100_500, @Win500_1000, @Win1000_3000, @Win3000_5000, @Win5000_10000, @Win10000_50000, @Win50000, @TotalBalanceCalcTime, @BetD1, @RMPBet, @RSPBet, @PSPBet, @PMPBet, @RecDate);";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", item.DayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", item.OperatorID, MySqlDbType.VarChar),
				Database.CreateInParameter("@CountryID", item.CountryID != null ? item.CountryID : (object)DBNull.Value, MySqlDbType.VarChar),
				Database.CreateInParameter("@CurrencyID", item.CurrencyID, MySqlDbType.VarChar),
				Database.CreateInParameter("@NewUsers", item.NewUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@LoginUsers", item.LoginUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@RegUsers", item.RegUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@CashUsers", item.CashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@PayUsers", item.PayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@BetUsers", item.BetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@TotalBalance", item.TotalBalance, MySqlDbType.Int64),
				Database.CreateInParameter("@BetAmount", item.BetAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BetBonus", item.BetBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@WinBonus", item.WinBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@NewBetUsers", item.NewBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@NewUserBetAmount", item.NewUserBetAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserBetBonus", item.NewUserBetBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserWinBonus", item.NewUserWinBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@WinAmount", item.WinAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PayNotBetUsers", item.PayNotBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DOU_FirstPayUsers", item.DOU_FirstPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DNU_RepayUsers", item.DNU_RepayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD1", item.RepeatConsumersD1, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD5", item.RepeatConsumersD5, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD10", item.RepeatConsumersD10, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD15", item.RepeatConsumersD15, MySqlDbType.Int32),
				Database.CreateInParameter("@DNU_FirstPayAmount", item.DNU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DOU_FirstPayAmount", item.DOU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DOU_FirstPayTotalAmount", item.DOU_FirstPayTotalAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewCashUsers", item.NewCashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@NewPayUsers", item.NewPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@PayOwnFee", item.PayOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@PayUserFee", item.PayUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@NewUserPayAmount", item.NewUserPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PayAmount", item.PayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashOwnFee", item.CashOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@CashUserFee", item.CashUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@NewUserCashAmount", item.NewUserCashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserWinAmount", item.NewUserWinAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashAmount", item.CashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusRecUsers", item.BonusRecUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@BonusAmount", item.BonusAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusUseAmount", item.BonusUseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusRemainAmount", item.BonusRemainAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusUnlockAmount", item.BonusUnlockAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashAuditAmount", item.CashAuditAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashRefuseAmount", item.CashRefuseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashPassAmount", item.CashPassAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashFailAmount", item.CashFailAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@ProfitAmount", item.ProfitAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PromotionFeeAmount", item.PromotionFeeAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewARUP", item.NewARUP, MySqlDbType.Float),
				Database.CreateInParameter("@ARUP", item.ARUP, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD1", item.RetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD3", item.RetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD7", item.RetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD14", item.RetentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD15", item.RetentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD20", item.RetentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD30", item.RetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD1", item.RegRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD3", item.RegRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD7", item.RegRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD15", item.RegRetentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD30", item.RegRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD1", item.PayRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD2", item.PayRetentionD2, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD3", item.PayRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD4", item.PayRetentionD4, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD5", item.PayRetentionD5, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD6", item.PayRetentionD6, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD7", item.PayRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD14", item.PayRetentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD20", item.PayRetentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD30", item.PayRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@DNU_GGR1", item.DNU_GGR1, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR2", item.DNU_GGR2, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR3", item.DNU_GGR3, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR4", item.DNU_GGR4, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR5", item.DNU_GGR5, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR6", item.DNU_GGR6, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR7", item.DNU_GGR7, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR8", item.DNU_GGR8, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR9", item.DNU_GGR9, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR10", item.DNU_GGR10, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR11", item.DNU_GGR11, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR12", item.DNU_GGR12, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR13", item.DNU_GGR13, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR14", item.DNU_GGR14, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR15", item.DNU_GGR15, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR16", item.DNU_GGR16, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR17", item.DNU_GGR17, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR18", item.DNU_GGR18, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR19", item.DNU_GGR19, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR20", item.DNU_GGR20, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR21", item.DNU_GGR21, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR22", item.DNU_GGR22, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR23", item.DNU_GGR23, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR24", item.DNU_GGR24, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR25", item.DNU_GGR25, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR26", item.DNU_GGR26, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR27", item.DNU_GGR27, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR28", item.DNU_GGR28, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR29", item.DNU_GGR29, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR30", item.DNU_GGR30, MySqlDbType.Int64),
				Database.CreateInParameter("@Lose10", item.Lose10, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose10_100", item.Lose10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose100_500", item.Lose100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose500_1000", item.Lose500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose1000_3000", item.Lose1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose3000_5000", item.Lose3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose5000_10000", item.Lose5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose10000_50000", item.Lose10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose50000", item.Lose50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10", item.Win10, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10_100", item.Win10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@Win100_500", item.Win100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@Win500_1000", item.Win500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win1000_3000", item.Win1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win3000_5000", item.Win3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win5000_10000", item.Win5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10000_50000", item.Win10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win50000", item.Win50000, MySqlDbType.Int32),
				Database.CreateInParameter("@TotalBalanceCalcTime", item.TotalBalanceCalcTime, MySqlDbType.DateTime),
				Database.CreateInParameter("@BetD1", item.BetD1, MySqlDbType.Float),
				Database.CreateInParameter("@RMPBet", item.RMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@RSPBet", item.RSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@PSPBet", item.PSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@PMPBet", item.PMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@RecDate", item.RecDate, MySqlDbType.DateTime),
			};
		}
		public int AddByBatch(IEnumerable<Sr_oper_dayEO> items, int batchCount, TransactionManager tm_ = null)
		{
			var ret = 0;
			foreach (var sql in BuildAddBatchSql(items, batchCount))
			{
				ret += Database.ExecSqlNonQuery(sql, tm_);
	        }
			return ret;
		}
	    public async Task<int> AddByBatchAsync(IEnumerable<Sr_oper_dayEO> items, int batchCount, TransactionManager tm_ = null)
	    {
	        var ret = 0;
	        foreach (var sql in BuildAddBatchSql(items, batchCount))
	        {
	            ret += await Database.ExecSqlNonQueryAsync(sql, tm_);
	        }
	        return ret;
	    }
	    private IEnumerable<string> BuildAddBatchSql(IEnumerable<Sr_oper_dayEO> items, int batchCount)
		{
			var count = 0;
	        var insertSql = $"INSERT INTO {TableName} (`DayID`, `OperatorID`, `CountryID`, `CurrencyID`, `NewUsers`, `LoginUsers`, `RegUsers`, `CashUsers`, `PayUsers`, `BetUsers`, `TotalBalance`, `BetAmount`, `BetBonus`, `WinBonus`, `NewBetUsers`, `NewUserBetAmount`, `NewUserBetBonus`, `NewUserWinBonus`, `WinAmount`, `PayNotBetUsers`, `DOU_FirstPayUsers`, `DNU_RepayUsers`, `RepeatConsumersD1`, `RepeatConsumersD5`, `RepeatConsumersD10`, `RepeatConsumersD15`, `DNU_FirstPayAmount`, `DOU_FirstPayAmount`, `DOU_FirstPayTotalAmount`, `NewCashUsers`, `NewPayUsers`, `PayOwnFee`, `PayUserFee`, `NewUserPayAmount`, `PayAmount`, `CashOwnFee`, `CashUserFee`, `NewUserCashAmount`, `NewUserWinAmount`, `CashAmount`, `BonusRecUsers`, `BonusAmount`, `BonusUseAmount`, `BonusRemainAmount`, `BonusUnlockAmount`, `CashAuditAmount`, `CashRefuseAmount`, `CashPassAmount`, `CashFailAmount`, `ProfitAmount`, `PromotionFeeAmount`, `NewARUP`, `ARUP`, `RetentionD1`, `RetentionD3`, `RetentionD7`, `RetentionD14`, `RetentionD15`, `RetentionD20`, `RetentionD30`, `RegRetentionD1`, `RegRetentionD3`, `RegRetentionD7`, `RegRetentionD15`, `RegRetentionD30`, `PayRetentionD1`, `PayRetentionD2`, `PayRetentionD3`, `PayRetentionD4`, `PayRetentionD5`, `PayRetentionD6`, `PayRetentionD7`, `PayRetentionD14`, `PayRetentionD20`, `PayRetentionD30`, `DNU_GGR1`, `DNU_GGR2`, `DNU_GGR3`, `DNU_GGR4`, `DNU_GGR5`, `DNU_GGR6`, `DNU_GGR7`, `DNU_GGR8`, `DNU_GGR9`, `DNU_GGR10`, `DNU_GGR11`, `DNU_GGR12`, `DNU_GGR13`, `DNU_GGR14`, `DNU_GGR15`, `DNU_GGR16`, `DNU_GGR17`, `DNU_GGR18`, `DNU_GGR19`, `DNU_GGR20`, `DNU_GGR21`, `DNU_GGR22`, `DNU_GGR23`, `DNU_GGR24`, `DNU_GGR25`, `DNU_GGR26`, `DNU_GGR27`, `DNU_GGR28`, `DNU_GGR29`, `DNU_GGR30`, `Lose10`, `Lose10_100`, `Lose100_500`, `Lose500_1000`, `Lose1000_3000`, `Lose3000_5000`, `Lose5000_10000`, `Lose10000_50000`, `Lose50000`, `Win10`, `Win10_100`, `Win100_500`, `Win500_1000`, `Win1000_3000`, `Win3000_5000`, `Win5000_10000`, `Win10000_50000`, `Win50000`, `TotalBalanceCalcTime`, `BetD1`, `RMPBet`, `RSPBet`, `PSPBet`, `PMPBet`, `RecDate`) VALUES ";
			var sql = new StringBuilder();
	        foreach (var item in items)
			{
				count++;
				sql.Append($"('{item.DayID.ToString("yyyy-MM-dd HH:mm:ss")}','{item.OperatorID}','{item.CountryID}','{item.CurrencyID}',{item.NewUsers},{item.LoginUsers},{item.RegUsers},{item.CashUsers},{item.PayUsers},{item.BetUsers},{item.TotalBalance},{item.BetAmount},{item.BetBonus},{item.WinBonus},{item.NewBetUsers},{item.NewUserBetAmount},{item.NewUserBetBonus},{item.NewUserWinBonus},{item.WinAmount},{item.PayNotBetUsers},{item.DOU_FirstPayUsers},{item.DNU_RepayUsers},{item.RepeatConsumersD1},{item.RepeatConsumersD5},{item.RepeatConsumersD10},{item.RepeatConsumersD15},{item.DNU_FirstPayAmount},{item.DOU_FirstPayAmount},{item.DOU_FirstPayTotalAmount},{item.NewCashUsers},{item.NewPayUsers},{item.PayOwnFee},{item.PayUserFee},{item.NewUserPayAmount},{item.PayAmount},{item.CashOwnFee},{item.CashUserFee},{item.NewUserCashAmount},{item.NewUserWinAmount},{item.CashAmount},{item.BonusRecUsers},{item.BonusAmount},{item.BonusUseAmount},{item.BonusRemainAmount},{item.BonusUnlockAmount},{item.CashAuditAmount},{item.CashRefuseAmount},{item.CashPassAmount},{item.CashFailAmount},{item.ProfitAmount},{item.PromotionFeeAmount},{item.NewARUP},{item.ARUP},{item.RetentionD1},{item.RetentionD3},{item.RetentionD7},{item.RetentionD14},{item.RetentionD15},{item.RetentionD20},{item.RetentionD30},{item.RegRetentionD1},{item.RegRetentionD3},{item.RegRetentionD7},{item.RegRetentionD15},{item.RegRetentionD30},{item.PayRetentionD1},{item.PayRetentionD2},{item.PayRetentionD3},{item.PayRetentionD4},{item.PayRetentionD5},{item.PayRetentionD6},{item.PayRetentionD7},{item.PayRetentionD14},{item.PayRetentionD20},{item.PayRetentionD30},{item.DNU_GGR1},{item.DNU_GGR2},{item.DNU_GGR3},{item.DNU_GGR4},{item.DNU_GGR5},{item.DNU_GGR6},{item.DNU_GGR7},{item.DNU_GGR8},{item.DNU_GGR9},{item.DNU_GGR10},{item.DNU_GGR11},{item.DNU_GGR12},{item.DNU_GGR13},{item.DNU_GGR14},{item.DNU_GGR15},{item.DNU_GGR16},{item.DNU_GGR17},{item.DNU_GGR18},{item.DNU_GGR19},{item.DNU_GGR20},{item.DNU_GGR21},{item.DNU_GGR22},{item.DNU_GGR23},{item.DNU_GGR24},{item.DNU_GGR25},{item.DNU_GGR26},{item.DNU_GGR27},{item.DNU_GGR28},{item.DNU_GGR29},{item.DNU_GGR30},{item.Lose10},{item.Lose10_100},{item.Lose100_500},{item.Lose500_1000},{item.Lose1000_3000},{item.Lose3000_5000},{item.Lose5000_10000},{item.Lose10000_50000},{item.Lose50000},{item.Win10},{item.Win10_100},{item.Win100_500},{item.Win500_1000},{item.Win1000_3000},{item.Win3000_5000},{item.Win5000_10000},{item.Win10000_50000},{item.Win50000},'{item.TotalBalanceCalcTime.ToString("yyyy-MM-dd HH:mm:ss")}',{item.BetD1},{item.RMPBet},{item.RSPBet},{item.PSPBet},{item.PMPBet},'{item.RecDate.ToString("yyyy-MM-dd HH:mm:ss")}'),");
				if (count == batchCount)
				{
					count = 0;
					sql.Insert(0, insertSql);
					var ret = sql.ToString().TrimEnd(',');
					sql.Clear();
	                yield return ret;
				}
			}
			if (sql.Length > 0)
			{
	            sql.Insert(0, insertSql);
	            yield return sql.ToString().TrimEnd(',');
	        }
	    }
	    #endregion // Add
	    
		#region Remove
		#region RemoveByPK
		/// <summary>
		/// 按主键删除
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			RepiarRemoveByPKData(dayID, operatorID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			RepiarRemoveByPKData(dayID, operatorID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepiarRemoveByPKData(DateTime dayID, string operatorID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
		/// <summary>
		/// 删除指定实体对应的记录
		/// </summary>
		/// <param name = "item">要删除的实体</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int Remove(Sr_oper_dayEO item, TransactionManager tm_ = null)
		{
			return RemoveByPK(item.DayID, item.OperatorID, tm_);
		}
		public async Task<int> RemoveAsync(Sr_oper_dayEO item, TransactionManager tm_ = null)
		{
			return await RemoveByPKAsync(item.DayID, item.OperatorID, tm_);
		}
		#endregion // RemoveByPK
		
		#region RemoveByXXX
		#region RemoveByDayID
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDayID(DateTime dayID, TransactionManager tm_ = null)
		{
			RepairRemoveByDayIDData(dayID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDayIDAsync(DateTime dayID, TransactionManager tm_ = null)
		{
			RepairRemoveByDayIDData(dayID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDayIDData(DateTime dayID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DayID` = @DayID";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date));
		}
		#endregion // RemoveByDayID
		#region RemoveByOperatorID
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByOperatorID(string operatorID, TransactionManager tm_ = null)
		{
			RepairRemoveByOperatorIDData(operatorID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByOperatorIDAsync(string operatorID, TransactionManager tm_ = null)
		{
			RepairRemoveByOperatorIDData(operatorID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByOperatorIDData(string operatorID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar));
		}
		#endregion // RemoveByOperatorID
		#region RemoveByCountryID
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCountryID(string countryID, TransactionManager tm_ = null)
		{
			RepairRemoveByCountryIDData(countryID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCountryIDAsync(string countryID, TransactionManager tm_ = null)
		{
			RepairRemoveByCountryIDData(countryID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCountryIDData(string countryID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE " + (countryID != null ? "`CountryID` = @CountryID" : "`CountryID` IS NULL");
			paras_ = new List<MySqlParameter>();
			if (countryID != null)
				paras_.Add(Database.CreateInParameter("@CountryID", countryID, MySqlDbType.VarChar));
		}
		#endregion // RemoveByCountryID
		#region RemoveByCurrencyID
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCurrencyID(string currencyID, TransactionManager tm_ = null)
		{
			RepairRemoveByCurrencyIDData(currencyID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCurrencyIDAsync(string currencyID, TransactionManager tm_ = null)
		{
			RepairRemoveByCurrencyIDData(currencyID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCurrencyIDData(string currencyID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CurrencyID` = @CurrencyID";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar));
		}
		#endregion // RemoveByCurrencyID
		#region RemoveByNewUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUsers(int newUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUsersData(newUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUsersAsync(int newUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUsersData(newUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUsersData(int newUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUsers` = @NewUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByNewUsers
		#region RemoveByLoginUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLoginUsers(int loginUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByLoginUsersData(loginUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLoginUsersAsync(int loginUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByLoginUsersData(loginUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLoginUsersData(int loginUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `LoginUsers` = @LoginUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByLoginUsers
		#region RemoveByRegUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegUsers(int regUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByRegUsersData(regUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegUsersAsync(int regUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByRegUsersData(regUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegUsersData(int regUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegUsers` = @RegUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByRegUsers
		#region RemoveByCashUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashUsers(int cashUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByCashUsersData(cashUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashUsersAsync(int cashUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByCashUsersData(cashUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashUsersData(int cashUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashUsers` = @CashUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByCashUsers
		#region RemoveByPayUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayUsers(int payUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByPayUsersData(payUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayUsersAsync(int payUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByPayUsersData(payUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayUsersData(int payUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayUsers` = @PayUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByPayUsers
		#region RemoveByBetUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBetUsers(int betUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByBetUsersData(betUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBetUsersAsync(int betUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByBetUsersData(betUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBetUsersData(int betUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BetUsers` = @BetUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByBetUsers
		#region RemoveByTotalBalance
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByTotalBalance(long totalBalance, TransactionManager tm_ = null)
		{
			RepairRemoveByTotalBalanceData(totalBalance, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByTotalBalanceAsync(long totalBalance, TransactionManager tm_ = null)
		{
			RepairRemoveByTotalBalanceData(totalBalance, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByTotalBalanceData(long totalBalance, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `TotalBalance` = @TotalBalance";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64));
		}
		#endregion // RemoveByTotalBalance
		#region RemoveByBetAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBetAmount(long betAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBetAmountData(betAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBetAmountAsync(long betAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBetAmountData(betAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBetAmountData(long betAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BetAmount` = @BetAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByBetAmount
		#region RemoveByBetBonus
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBetBonus(long betBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByBetBonusData(betBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBetBonusAsync(long betBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByBetBonusData(betBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBetBonusData(long betBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BetBonus` = @BetBonus";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64));
		}
		#endregion // RemoveByBetBonus
		#region RemoveByWinBonus
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWinBonus(long winBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByWinBonusData(winBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWinBonusAsync(long winBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByWinBonusData(winBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWinBonusData(long winBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `WinBonus` = @WinBonus";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64));
		}
		#endregion // RemoveByWinBonus
		#region RemoveByNewBetUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewBetUsers(int newBetUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewBetUsersData(newBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewBetUsersAsync(int newBetUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewBetUsersData(newBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewBetUsersData(int newBetUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewBetUsers` = @NewBetUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByNewBetUsers
		#region RemoveByNewUserBetAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserBetAmount(long newUserBetAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserBetAmountData(newUserBetAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserBetAmountAsync(long newUserBetAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserBetAmountData(newUserBetAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserBetAmountData(long newUserBetAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserBetAmount` = @NewUserBetAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserBetAmount
		#region RemoveByNewUserBetBonus
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserBetBonus(long newUserBetBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserBetBonusData(newUserBetBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserBetBonusAsync(long newUserBetBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserBetBonusData(newUserBetBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserBetBonusData(long newUserBetBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserBetBonus` = @NewUserBetBonus";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserBetBonus
		#region RemoveByNewUserWinBonus
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserWinBonus(long newUserWinBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserWinBonusData(newUserWinBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserWinBonusAsync(long newUserWinBonus, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserWinBonusData(newUserWinBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserWinBonusData(long newUserWinBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserWinBonus` = @NewUserWinBonus";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserWinBonus
		#region RemoveByWinAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWinAmount(long winAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByWinAmountData(winAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWinAmountAsync(long winAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByWinAmountData(winAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWinAmountData(long winAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `WinAmount` = @WinAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByWinAmount
		#region RemoveByPayNotBetUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayNotBetUsers(int payNotBetUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByPayNotBetUsersData(payNotBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayNotBetUsersAsync(int payNotBetUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByPayNotBetUsersData(payNotBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayNotBetUsersData(int payNotBetUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayNotBetUsers` = @PayNotBetUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByPayNotBetUsers
		#region RemoveByDOU_FirstPayUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDOU_FirstPayUsers(int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayUsersData(dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayUsersData(dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDOU_FirstPayUsersData(int dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DOU_FirstPayUsers` = @DOU_FirstPayUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByDOU_FirstPayUsers
		#region RemoveByDNU_RepayUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_RepayUsers(int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_RepayUsersData(dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_RepayUsersAsync(int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_RepayUsersData(dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_RepayUsersData(int dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_RepayUsers` = @DNU_RepayUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByDNU_RepayUsers
		#region RemoveByRepeatConsumersD1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRepeatConsumersD1(int repeatConsumersD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD1Data(repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRepeatConsumersD1Async(int repeatConsumersD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD1Data(repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRepeatConsumersD1Data(int repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RepeatConsumersD1` = @RepeatConsumersD1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32));
		}
		#endregion // RemoveByRepeatConsumersD1
		#region RemoveByRepeatConsumersD5
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRepeatConsumersD5(int repeatConsumersD5, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD5Data(repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRepeatConsumersD5Async(int repeatConsumersD5, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD5Data(repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRepeatConsumersD5Data(int repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RepeatConsumersD5` = @RepeatConsumersD5";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32));
		}
		#endregion // RemoveByRepeatConsumersD5
		#region RemoveByRepeatConsumersD10
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRepeatConsumersD10(int repeatConsumersD10, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD10Data(repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRepeatConsumersD10Async(int repeatConsumersD10, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD10Data(repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRepeatConsumersD10Data(int repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RepeatConsumersD10` = @RepeatConsumersD10";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32));
		}
		#endregion // RemoveByRepeatConsumersD10
		#region RemoveByRepeatConsumersD15
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRepeatConsumersD15(int repeatConsumersD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD15Data(repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRepeatConsumersD15Async(int repeatConsumersD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRepeatConsumersD15Data(repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRepeatConsumersD15Data(int repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RepeatConsumersD15` = @RepeatConsumersD15";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32));
		}
		#endregion // RemoveByRepeatConsumersD15
		#region RemoveByDNU_FirstPayAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_FirstPayAmount(long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_FirstPayAmountData(dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_FirstPayAmountData(dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_FirstPayAmountData(long dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_FirstPayAmount` = @DNU_FirstPayAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_FirstPayAmount
		#region RemoveByDOU_FirstPayAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDOU_FirstPayAmount(long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayAmountData(dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayAmountData(dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDOU_FirstPayAmountData(long dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DOU_FirstPayAmount` = @DOU_FirstPayAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByDOU_FirstPayAmount
		#region RemoveByDOU_FirstPayTotalAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayTotalAmountData(dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByDOU_FirstPayTotalAmountData(dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDOU_FirstPayTotalAmountData(long dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByDOU_FirstPayTotalAmount
		#region RemoveByNewCashUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewCashUsers(int newCashUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewCashUsersData(newCashUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewCashUsersAsync(int newCashUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewCashUsersData(newCashUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewCashUsersData(int newCashUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewCashUsers` = @NewCashUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByNewCashUsers
		#region RemoveByNewPayUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewPayUsers(int newPayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewPayUsersData(newPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewPayUsersAsync(int newPayUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByNewPayUsersData(newPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewPayUsersData(int newPayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewPayUsers` = @NewPayUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByNewPayUsers
		#region RemoveByPayOwnFee
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayOwnFee(decimal payOwnFee, TransactionManager tm_ = null)
		{
			RepairRemoveByPayOwnFeeData(payOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayOwnFeeAsync(decimal payOwnFee, TransactionManager tm_ = null)
		{
			RepairRemoveByPayOwnFeeData(payOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayOwnFeeData(decimal payOwnFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayOwnFee` = @PayOwnFee";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal));
		}
		#endregion // RemoveByPayOwnFee
		#region RemoveByPayUserFee
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayUserFee(decimal payUserFee, TransactionManager tm_ = null)
		{
			RepairRemoveByPayUserFeeData(payUserFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayUserFeeAsync(decimal payUserFee, TransactionManager tm_ = null)
		{
			RepairRemoveByPayUserFeeData(payUserFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayUserFeeData(decimal payUserFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayUserFee` = @PayUserFee";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal));
		}
		#endregion // RemoveByPayUserFee
		#region RemoveByNewUserPayAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserPayAmount(long newUserPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserPayAmountData(newUserPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserPayAmountAsync(long newUserPayAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserPayAmountData(newUserPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserPayAmountData(long newUserPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserPayAmount` = @NewUserPayAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserPayAmount
		#region RemoveByPayAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayAmount(long payAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByPayAmountData(payAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayAmountAsync(long payAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByPayAmountData(payAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayAmountData(long payAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayAmount` = @PayAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByPayAmount
		#region RemoveByCashOwnFee
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashOwnFee(decimal cashOwnFee, TransactionManager tm_ = null)
		{
			RepairRemoveByCashOwnFeeData(cashOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashOwnFeeAsync(decimal cashOwnFee, TransactionManager tm_ = null)
		{
			RepairRemoveByCashOwnFeeData(cashOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashOwnFeeData(decimal cashOwnFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashOwnFee` = @CashOwnFee";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal));
		}
		#endregion // RemoveByCashOwnFee
		#region RemoveByCashUserFee
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashUserFee(decimal cashUserFee, TransactionManager tm_ = null)
		{
			RepairRemoveByCashUserFeeData(cashUserFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashUserFeeAsync(decimal cashUserFee, TransactionManager tm_ = null)
		{
			RepairRemoveByCashUserFeeData(cashUserFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashUserFeeData(decimal cashUserFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashUserFee` = @CashUserFee";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal));
		}
		#endregion // RemoveByCashUserFee
		#region RemoveByNewUserCashAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserCashAmount(long newUserCashAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserCashAmountData(newUserCashAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserCashAmountAsync(long newUserCashAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserCashAmountData(newUserCashAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserCashAmountData(long newUserCashAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserCashAmount` = @NewUserCashAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserCashAmount
		#region RemoveByNewUserWinAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewUserWinAmount(long newUserWinAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserWinAmountData(newUserWinAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewUserWinAmountAsync(long newUserWinAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByNewUserWinAmountData(newUserWinAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewUserWinAmountData(long newUserWinAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewUserWinAmount` = @NewUserWinAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByNewUserWinAmount
		#region RemoveByCashAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashAmount(long cashAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashAmountData(cashAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashAmountAsync(long cashAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashAmountData(cashAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashAmountData(long cashAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashAmount` = @CashAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByCashAmount
		#region RemoveByBonusRecUsers
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBonusRecUsers(int bonusRecUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusRecUsersData(bonusRecUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBonusRecUsersAsync(int bonusRecUsers, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusRecUsersData(bonusRecUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBonusRecUsersData(int bonusRecUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BonusRecUsers` = @BonusRecUsers";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32));
		}
		#endregion // RemoveByBonusRecUsers
		#region RemoveByBonusAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBonusAmount(long bonusAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusAmountData(bonusAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBonusAmountAsync(long bonusAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusAmountData(bonusAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBonusAmountData(long bonusAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BonusAmount` = @BonusAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByBonusAmount
		#region RemoveByBonusUseAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBonusUseAmount(long bonusUseAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusUseAmountData(bonusUseAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBonusUseAmountAsync(long bonusUseAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusUseAmountData(bonusUseAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBonusUseAmountData(long bonusUseAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BonusUseAmount` = @BonusUseAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByBonusUseAmount
		#region RemoveByBonusRemainAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBonusRemainAmount(long bonusRemainAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusRemainAmountData(bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBonusRemainAmountAsync(long bonusRemainAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusRemainAmountData(bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBonusRemainAmountData(long bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BonusRemainAmount` = @BonusRemainAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByBonusRemainAmount
		#region RemoveByBonusUnlockAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBonusUnlockAmount(long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusUnlockAmountData(bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBonusUnlockAmountAsync(long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByBonusUnlockAmountData(bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBonusUnlockAmountData(long bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BonusUnlockAmount` = @BonusUnlockAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByBonusUnlockAmount
		#region RemoveByCashAuditAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashAuditAmount(long cashAuditAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashAuditAmountData(cashAuditAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashAuditAmountAsync(long cashAuditAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashAuditAmountData(cashAuditAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashAuditAmountData(long cashAuditAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashAuditAmount` = @CashAuditAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByCashAuditAmount
		#region RemoveByCashRefuseAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashRefuseAmount(long cashRefuseAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashRefuseAmountData(cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashRefuseAmountAsync(long cashRefuseAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashRefuseAmountData(cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashRefuseAmountData(long cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashRefuseAmount` = @CashRefuseAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByCashRefuseAmount
		#region RemoveByCashPassAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashPassAmount(long cashPassAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashPassAmountData(cashPassAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashPassAmountAsync(long cashPassAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashPassAmountData(cashPassAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashPassAmountData(long cashPassAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashPassAmount` = @CashPassAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByCashPassAmount
		#region RemoveByCashFailAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByCashFailAmount(long cashFailAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashFailAmountData(cashFailAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByCashFailAmountAsync(long cashFailAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByCashFailAmountData(cashFailAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByCashFailAmountData(long cashFailAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `CashFailAmount` = @CashFailAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByCashFailAmount
		#region RemoveByProfitAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByProfitAmount(long profitAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByProfitAmountData(profitAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByProfitAmountAsync(long profitAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByProfitAmountData(profitAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByProfitAmountData(long profitAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `ProfitAmount` = @ProfitAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByProfitAmount
		#region RemoveByPromotionFeeAmount
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPromotionFeeAmount(long promotionFeeAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByPromotionFeeAmountData(promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPromotionFeeAmountAsync(long promotionFeeAmount, TransactionManager tm_ = null)
		{
			RepairRemoveByPromotionFeeAmountData(promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPromotionFeeAmountData(long promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PromotionFeeAmount` = @PromotionFeeAmount";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64));
		}
		#endregion // RemoveByPromotionFeeAmount
		#region RemoveByNewARUP
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByNewARUP(float newARUP, TransactionManager tm_ = null)
		{
			RepairRemoveByNewARUPData(newARUP, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByNewARUPAsync(float newARUP, TransactionManager tm_ = null)
		{
			RepairRemoveByNewARUPData(newARUP, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByNewARUPData(float newARUP, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `NewARUP` = @NewARUP";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float));
		}
		#endregion // RemoveByNewARUP
		#region RemoveByARUP
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByARUP(float aRUP, TransactionManager tm_ = null)
		{
			RepairRemoveByARUPData(aRUP, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByARUPAsync(float aRUP, TransactionManager tm_ = null)
		{
			RepairRemoveByARUPData(aRUP, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByARUPData(float aRUP, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `ARUP` = @ARUP";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float));
		}
		#endregion // RemoveByARUP
		#region RemoveByRetentionD1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD1(float retentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD1Data(retentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD1Async(float retentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD1Data(retentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD1Data(float retentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD1` = @RetentionD1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD1
		#region RemoveByRetentionD3
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD3(float retentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD3Data(retentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD3Async(float retentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD3Data(retentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD3Data(float retentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD3` = @RetentionD3";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD3
		#region RemoveByRetentionD7
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD7(float retentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD7Data(retentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD7Async(float retentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD7Data(retentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD7Data(float retentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD7` = @RetentionD7";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD7
		#region RemoveByRetentionD14
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD14(float retentionD14, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD14Data(retentionD14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD14Async(float retentionD14, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD14Data(retentionD14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD14Data(float retentionD14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD14` = @RetentionD14";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD14
		#region RemoveByRetentionD15
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD15(float retentionD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD15Data(retentionD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD15Async(float retentionD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD15Data(retentionD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD15Data(float retentionD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD15` = @RetentionD15";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD15
		#region RemoveByRetentionD20
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD20(float retentionD20, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD20Data(retentionD20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD20Async(float retentionD20, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD20Data(retentionD20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD20Data(float retentionD20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD20` = @RetentionD20";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD20
		#region RemoveByRetentionD30
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRetentionD30(float retentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD30Data(retentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRetentionD30Async(float retentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByRetentionD30Data(retentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRetentionD30Data(float retentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RetentionD30` = @RetentionD30";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float));
		}
		#endregion // RemoveByRetentionD30
		#region RemoveByRegRetentionD1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegRetentionD1(float regRetentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD1Data(regRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegRetentionD1Async(float regRetentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD1Data(regRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegRetentionD1Data(float regRetentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegRetentionD1` = @RegRetentionD1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float));
		}
		#endregion // RemoveByRegRetentionD1
		#region RemoveByRegRetentionD3
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegRetentionD3(float regRetentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD3Data(regRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegRetentionD3Async(float regRetentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD3Data(regRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegRetentionD3Data(float regRetentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegRetentionD3` = @RegRetentionD3";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float));
		}
		#endregion // RemoveByRegRetentionD3
		#region RemoveByRegRetentionD7
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegRetentionD7(float regRetentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD7Data(regRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegRetentionD7Async(float regRetentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD7Data(regRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegRetentionD7Data(float regRetentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegRetentionD7` = @RegRetentionD7";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float));
		}
		#endregion // RemoveByRegRetentionD7
		#region RemoveByRegRetentionD15
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegRetentionD15(float regRetentionD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD15Data(regRetentionD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegRetentionD15Async(float regRetentionD15, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD15Data(regRetentionD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegRetentionD15Data(float regRetentionD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegRetentionD15` = @RegRetentionD15";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float));
		}
		#endregion // RemoveByRegRetentionD15
		#region RemoveByRegRetentionD30
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRegRetentionD30(float regRetentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD30Data(regRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRegRetentionD30Async(float regRetentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByRegRetentionD30Data(regRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRegRetentionD30Data(float regRetentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RegRetentionD30` = @RegRetentionD30";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float));
		}
		#endregion // RemoveByRegRetentionD30
		#region RemoveByPayRetentionD1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD1(float payRetentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD1Data(payRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD1Async(float payRetentionD1, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD1Data(payRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD1Data(float payRetentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD1` = @PayRetentionD1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD1
		#region RemoveByPayRetentionD2
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD2(float payRetentionD2, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD2Data(payRetentionD2, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD2Async(float payRetentionD2, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD2Data(payRetentionD2, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD2Data(float payRetentionD2, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD2` = @PayRetentionD2";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD2
		#region RemoveByPayRetentionD3
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD3(float payRetentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD3Data(payRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD3Async(float payRetentionD3, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD3Data(payRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD3Data(float payRetentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD3` = @PayRetentionD3";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD3
		#region RemoveByPayRetentionD4
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD4(float payRetentionD4, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD4Data(payRetentionD4, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD4Async(float payRetentionD4, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD4Data(payRetentionD4, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD4Data(float payRetentionD4, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD4` = @PayRetentionD4";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD4
		#region RemoveByPayRetentionD5
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD5(float payRetentionD5, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD5Data(payRetentionD5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD5Async(float payRetentionD5, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD5Data(payRetentionD5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD5Data(float payRetentionD5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD5` = @PayRetentionD5";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD5
		#region RemoveByPayRetentionD6
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD6(float payRetentionD6, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD6Data(payRetentionD6, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD6Async(float payRetentionD6, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD6Data(payRetentionD6, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD6Data(float payRetentionD6, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD6` = @PayRetentionD6";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD6
		#region RemoveByPayRetentionD7
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD7(float payRetentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD7Data(payRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD7Async(float payRetentionD7, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD7Data(payRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD7Data(float payRetentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD7` = @PayRetentionD7";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD7
		#region RemoveByPayRetentionD14
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD14(float payRetentionD14, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD14Data(payRetentionD14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD14Async(float payRetentionD14, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD14Data(payRetentionD14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD14Data(float payRetentionD14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD14` = @PayRetentionD14";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD14
		#region RemoveByPayRetentionD20
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD20(float payRetentionD20, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD20Data(payRetentionD20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD20Async(float payRetentionD20, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD20Data(payRetentionD20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD20Data(float payRetentionD20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD20` = @PayRetentionD20";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD20
		#region RemoveByPayRetentionD30
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPayRetentionD30(float payRetentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD30Data(payRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPayRetentionD30Async(float payRetentionD30, TransactionManager tm_ = null)
		{
			RepairRemoveByPayRetentionD30Data(payRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPayRetentionD30Data(float payRetentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PayRetentionD30` = @PayRetentionD30";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float));
		}
		#endregion // RemoveByPayRetentionD30
		#region RemoveByDNU_GGR1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR1(long dNU_GGR1, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR1Data(dNU_GGR1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR1Async(long dNU_GGR1, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR1Data(dNU_GGR1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR1Data(long dNU_GGR1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR1` = @DNU_GGR1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR1
		#region RemoveByDNU_GGR2
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR2(long dNU_GGR2, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR2Data(dNU_GGR2, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR2Async(long dNU_GGR2, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR2Data(dNU_GGR2, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR2Data(long dNU_GGR2, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR2` = @DNU_GGR2";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR2
		#region RemoveByDNU_GGR3
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR3(long dNU_GGR3, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR3Data(dNU_GGR3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR3Async(long dNU_GGR3, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR3Data(dNU_GGR3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR3Data(long dNU_GGR3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR3` = @DNU_GGR3";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR3
		#region RemoveByDNU_GGR4
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR4(long dNU_GGR4, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR4Data(dNU_GGR4, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR4Async(long dNU_GGR4, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR4Data(dNU_GGR4, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR4Data(long dNU_GGR4, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR4` = @DNU_GGR4";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR4
		#region RemoveByDNU_GGR5
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR5(long dNU_GGR5, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR5Data(dNU_GGR5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR5Async(long dNU_GGR5, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR5Data(dNU_GGR5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR5Data(long dNU_GGR5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR5` = @DNU_GGR5";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR5
		#region RemoveByDNU_GGR6
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR6(long dNU_GGR6, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR6Data(dNU_GGR6, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR6Async(long dNU_GGR6, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR6Data(dNU_GGR6, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR6Data(long dNU_GGR6, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR6` = @DNU_GGR6";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR6
		#region RemoveByDNU_GGR7
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR7(long dNU_GGR7, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR7Data(dNU_GGR7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR7Async(long dNU_GGR7, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR7Data(dNU_GGR7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR7Data(long dNU_GGR7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR7` = @DNU_GGR7";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR7
		#region RemoveByDNU_GGR8
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR8(long dNU_GGR8, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR8Data(dNU_GGR8, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR8Async(long dNU_GGR8, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR8Data(dNU_GGR8, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR8Data(long dNU_GGR8, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR8` = @DNU_GGR8";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR8
		#region RemoveByDNU_GGR9
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR9(long dNU_GGR9, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR9Data(dNU_GGR9, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR9Async(long dNU_GGR9, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR9Data(dNU_GGR9, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR9Data(long dNU_GGR9, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR9` = @DNU_GGR9";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR9
		#region RemoveByDNU_GGR10
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR10(long dNU_GGR10, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR10Data(dNU_GGR10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR10Async(long dNU_GGR10, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR10Data(dNU_GGR10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR10Data(long dNU_GGR10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR10` = @DNU_GGR10";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR10
		#region RemoveByDNU_GGR11
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR11(long dNU_GGR11, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR11Data(dNU_GGR11, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR11Async(long dNU_GGR11, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR11Data(dNU_GGR11, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR11Data(long dNU_GGR11, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR11` = @DNU_GGR11";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR11
		#region RemoveByDNU_GGR12
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR12(long dNU_GGR12, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR12Data(dNU_GGR12, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR12Async(long dNU_GGR12, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR12Data(dNU_GGR12, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR12Data(long dNU_GGR12, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR12` = @DNU_GGR12";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR12
		#region RemoveByDNU_GGR13
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR13(long dNU_GGR13, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR13Data(dNU_GGR13, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR13Async(long dNU_GGR13, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR13Data(dNU_GGR13, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR13Data(long dNU_GGR13, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR13` = @DNU_GGR13";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR13
		#region RemoveByDNU_GGR14
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR14(long dNU_GGR14, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR14Data(dNU_GGR14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR14Async(long dNU_GGR14, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR14Data(dNU_GGR14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR14Data(long dNU_GGR14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR14` = @DNU_GGR14";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR14
		#region RemoveByDNU_GGR15
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR15(long dNU_GGR15, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR15Data(dNU_GGR15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR15Async(long dNU_GGR15, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR15Data(dNU_GGR15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR15Data(long dNU_GGR15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR15` = @DNU_GGR15";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR15
		#region RemoveByDNU_GGR16
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR16(long dNU_GGR16, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR16Data(dNU_GGR16, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR16Async(long dNU_GGR16, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR16Data(dNU_GGR16, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR16Data(long dNU_GGR16, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR16` = @DNU_GGR16";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR16
		#region RemoveByDNU_GGR17
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR17(long dNU_GGR17, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR17Data(dNU_GGR17, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR17Async(long dNU_GGR17, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR17Data(dNU_GGR17, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR17Data(long dNU_GGR17, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR17` = @DNU_GGR17";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR17
		#region RemoveByDNU_GGR18
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR18(long dNU_GGR18, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR18Data(dNU_GGR18, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR18Async(long dNU_GGR18, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR18Data(dNU_GGR18, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR18Data(long dNU_GGR18, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR18` = @DNU_GGR18";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR18
		#region RemoveByDNU_GGR19
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR19(long dNU_GGR19, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR19Data(dNU_GGR19, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR19Async(long dNU_GGR19, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR19Data(dNU_GGR19, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR19Data(long dNU_GGR19, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR19` = @DNU_GGR19";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR19
		#region RemoveByDNU_GGR20
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR20(long dNU_GGR20, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR20Data(dNU_GGR20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR20Async(long dNU_GGR20, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR20Data(dNU_GGR20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR20Data(long dNU_GGR20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR20` = @DNU_GGR20";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR20
		#region RemoveByDNU_GGR21
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR21(long dNU_GGR21, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR21Data(dNU_GGR21, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR21Async(long dNU_GGR21, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR21Data(dNU_GGR21, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR21Data(long dNU_GGR21, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR21` = @DNU_GGR21";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR21
		#region RemoveByDNU_GGR22
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR22(long dNU_GGR22, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR22Data(dNU_GGR22, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR22Async(long dNU_GGR22, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR22Data(dNU_GGR22, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR22Data(long dNU_GGR22, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR22` = @DNU_GGR22";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR22
		#region RemoveByDNU_GGR23
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR23(long dNU_GGR23, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR23Data(dNU_GGR23, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR23Async(long dNU_GGR23, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR23Data(dNU_GGR23, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR23Data(long dNU_GGR23, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR23` = @DNU_GGR23";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR23
		#region RemoveByDNU_GGR24
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR24(long dNU_GGR24, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR24Data(dNU_GGR24, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR24Async(long dNU_GGR24, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR24Data(dNU_GGR24, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR24Data(long dNU_GGR24, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR24` = @DNU_GGR24";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR24
		#region RemoveByDNU_GGR25
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR25(long dNU_GGR25, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR25Data(dNU_GGR25, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR25Async(long dNU_GGR25, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR25Data(dNU_GGR25, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR25Data(long dNU_GGR25, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR25` = @DNU_GGR25";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR25
		#region RemoveByDNU_GGR26
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR26(long dNU_GGR26, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR26Data(dNU_GGR26, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR26Async(long dNU_GGR26, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR26Data(dNU_GGR26, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR26Data(long dNU_GGR26, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR26` = @DNU_GGR26";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR26
		#region RemoveByDNU_GGR27
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR27(long dNU_GGR27, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR27Data(dNU_GGR27, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR27Async(long dNU_GGR27, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR27Data(dNU_GGR27, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR27Data(long dNU_GGR27, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR27` = @DNU_GGR27";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR27
		#region RemoveByDNU_GGR28
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR28(long dNU_GGR28, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR28Data(dNU_GGR28, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR28Async(long dNU_GGR28, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR28Data(dNU_GGR28, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR28Data(long dNU_GGR28, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR28` = @DNU_GGR28";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR28
		#region RemoveByDNU_GGR29
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR29(long dNU_GGR29, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR29Data(dNU_GGR29, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR29Async(long dNU_GGR29, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR29Data(dNU_GGR29, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR29Data(long dNU_GGR29, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR29` = @DNU_GGR29";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR29
		#region RemoveByDNU_GGR30
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByDNU_GGR30(long dNU_GGR30, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR30Data(dNU_GGR30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByDNU_GGR30Async(long dNU_GGR30, TransactionManager tm_ = null)
		{
			RepairRemoveByDNU_GGR30Data(dNU_GGR30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByDNU_GGR30Data(long dNU_GGR30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `DNU_GGR30` = @DNU_GGR30";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64));
		}
		#endregion // RemoveByDNU_GGR30
		#region RemoveByLose10
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose10(int lose10, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10Data(lose10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose10Async(int lose10, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10Data(lose10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose10Data(int lose10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose10` = @Lose10";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose10
		#region RemoveByLose10_100
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose10_100(int lose10_100, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10_100Data(lose10_100, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose10_100Async(int lose10_100, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10_100Data(lose10_100, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose10_100Data(int lose10_100, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose10_100` = @Lose10_100";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose10_100
		#region RemoveByLose100_500
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose100_500(int lose100_500, TransactionManager tm_ = null)
		{
			RepairRemoveByLose100_500Data(lose100_500, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose100_500Async(int lose100_500, TransactionManager tm_ = null)
		{
			RepairRemoveByLose100_500Data(lose100_500, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose100_500Data(int lose100_500, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose100_500` = @Lose100_500";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose100_500
		#region RemoveByLose500_1000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose500_1000(int lose500_1000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose500_1000Data(lose500_1000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose500_1000Async(int lose500_1000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose500_1000Data(lose500_1000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose500_1000Data(int lose500_1000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose500_1000` = @Lose500_1000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose500_1000
		#region RemoveByLose1000_3000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose1000_3000(int lose1000_3000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose1000_3000Data(lose1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose1000_3000Async(int lose1000_3000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose1000_3000Data(lose1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose1000_3000Data(int lose1000_3000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose1000_3000` = @Lose1000_3000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose1000_3000
		#region RemoveByLose3000_5000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose3000_5000(int lose3000_5000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose3000_5000Data(lose3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose3000_5000Async(int lose3000_5000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose3000_5000Data(lose3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose3000_5000Data(int lose3000_5000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose3000_5000` = @Lose3000_5000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose3000_5000
		#region RemoveByLose5000_10000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose5000_10000(int lose5000_10000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose5000_10000Data(lose5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose5000_10000Async(int lose5000_10000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose5000_10000Data(lose5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose5000_10000Data(int lose5000_10000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose5000_10000` = @Lose5000_10000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose5000_10000
		#region RemoveByLose10000_50000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose10000_50000(int lose10000_50000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10000_50000Data(lose10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose10000_50000Async(int lose10000_50000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose10000_50000Data(lose10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose10000_50000Data(int lose10000_50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose10000_50000` = @Lose10000_50000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose10000_50000
		#region RemoveByLose50000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByLose50000(int lose50000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose50000Data(lose50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByLose50000Async(int lose50000, TransactionManager tm_ = null)
		{
			RepairRemoveByLose50000Data(lose50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByLose50000Data(int lose50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Lose50000` = @Lose50000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32));
		}
		#endregion // RemoveByLose50000
		#region RemoveByWin10
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin10(int win10, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10Data(win10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin10Async(int win10, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10Data(win10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin10Data(int win10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win10` = @Win10";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin10
		#region RemoveByWin10_100
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin10_100(int win10_100, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10_100Data(win10_100, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin10_100Async(int win10_100, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10_100Data(win10_100, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin10_100Data(int win10_100, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win10_100` = @Win10_100";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin10_100
		#region RemoveByWin100_500
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin100_500(int win100_500, TransactionManager tm_ = null)
		{
			RepairRemoveByWin100_500Data(win100_500, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin100_500Async(int win100_500, TransactionManager tm_ = null)
		{
			RepairRemoveByWin100_500Data(win100_500, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin100_500Data(int win100_500, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win100_500` = @Win100_500";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin100_500
		#region RemoveByWin500_1000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin500_1000(int win500_1000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin500_1000Data(win500_1000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin500_1000Async(int win500_1000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin500_1000Data(win500_1000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin500_1000Data(int win500_1000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win500_1000` = @Win500_1000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin500_1000
		#region RemoveByWin1000_3000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin1000_3000(int win1000_3000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin1000_3000Data(win1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin1000_3000Async(int win1000_3000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin1000_3000Data(win1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin1000_3000Data(int win1000_3000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win1000_3000` = @Win1000_3000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin1000_3000
		#region RemoveByWin3000_5000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin3000_5000(int win3000_5000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin3000_5000Data(win3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin3000_5000Async(int win3000_5000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin3000_5000Data(win3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin3000_5000Data(int win3000_5000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win3000_5000` = @Win3000_5000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin3000_5000
		#region RemoveByWin5000_10000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin5000_10000(int win5000_10000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin5000_10000Data(win5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin5000_10000Async(int win5000_10000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin5000_10000Data(win5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin5000_10000Data(int win5000_10000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win5000_10000` = @Win5000_10000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin5000_10000
		#region RemoveByWin10000_50000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin10000_50000(int win10000_50000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10000_50000Data(win10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin10000_50000Async(int win10000_50000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin10000_50000Data(win10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin10000_50000Data(int win10000_50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win10000_50000` = @Win10000_50000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin10000_50000
		#region RemoveByWin50000
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByWin50000(int win50000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin50000Data(win50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByWin50000Async(int win50000, TransactionManager tm_ = null)
		{
			RepairRemoveByWin50000Data(win50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByWin50000Data(int win50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `Win50000` = @Win50000";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32));
		}
		#endregion // RemoveByWin50000
		#region RemoveByTotalBalanceCalcTime
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			RepairRemoveByTotalBalanceCalcTimeData(totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			RepairRemoveByTotalBalanceCalcTimeData(totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByTotalBalanceCalcTimeData(DateTime totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `TotalBalanceCalcTime` = @TotalBalanceCalcTime";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime));
		}
		#endregion // RemoveByTotalBalanceCalcTime
		#region RemoveByBetD1
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByBetD1(float betD1, TransactionManager tm_ = null)
		{
			RepairRemoveByBetD1Data(betD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByBetD1Async(float betD1, TransactionManager tm_ = null)
		{
			RepairRemoveByBetD1Data(betD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByBetD1Data(float betD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `BetD1` = @BetD1";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float));
		}
		#endregion // RemoveByBetD1
		#region RemoveByRMPBet
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRMPBet(float rMPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByRMPBetData(rMPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRMPBetAsync(float rMPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByRMPBetData(rMPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRMPBetData(float rMPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RMPBet` = @RMPBet";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float));
		}
		#endregion // RemoveByRMPBet
		#region RemoveByRSPBet
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRSPBet(float rSPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByRSPBetData(rSPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRSPBetAsync(float rSPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByRSPBetData(rSPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRSPBetData(float rSPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RSPBet` = @RSPBet";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float));
		}
		#endregion // RemoveByRSPBet
		#region RemoveByPSPBet
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPSPBet(float pSPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByPSPBetData(pSPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPSPBetAsync(float pSPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByPSPBetData(pSPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPSPBetData(float pSPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PSPBet` = @PSPBet";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float));
		}
		#endregion // RemoveByPSPBet
		#region RemoveByPMPBet
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByPMPBet(float pMPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByPMPBetData(pMPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByPMPBetAsync(float pMPBet, TransactionManager tm_ = null)
		{
			RepairRemoveByPMPBetData(pMPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByPMPBetData(float pMPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `PMPBet` = @PMPBet";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float));
		}
		#endregion // RemoveByPMPBet
		#region RemoveByRecDate
		/// <summary>
		/// 按字段删除
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name="tm_">事务管理对象</param>
		public int RemoveByRecDate(DateTime recDate, TransactionManager tm_ = null)
		{
			RepairRemoveByRecDateData(recDate, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> RemoveByRecDateAsync(DateTime recDate, TransactionManager tm_ = null)
		{
			RepairRemoveByRecDateData(recDate, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairRemoveByRecDateData(DateTime recDate, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"DELETE FROM {TableName} WHERE `RecDate` = @RecDate";
			paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime));
		}
		#endregion // RemoveByRecDate
		#endregion // RemoveByXXX
	    
		#region RemoveByFKOrUnique
		#endregion // RemoveByFKOrUnique
		#endregion //Remove
	    
		#region Put
		#region PutItem
		/// <summary>
		/// 更新实体到数据库
		/// </summary>
		/// <param name = "item">要更新的实体对象</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int Put(Sr_oper_dayEO item, TransactionManager tm_ = null)
		{
			RepairPutData(item, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutAsync(Sr_oper_dayEO item, TransactionManager tm_ = null)
		{
			RepairPutData(item, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutData(Sr_oper_dayEO item, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DayID` = @DayID, `OperatorID` = @OperatorID, `CountryID` = @CountryID, `CurrencyID` = @CurrencyID, `NewUsers` = @NewUsers, `LoginUsers` = @LoginUsers, `RegUsers` = @RegUsers, `CashUsers` = @CashUsers, `PayUsers` = @PayUsers, `BetUsers` = @BetUsers, `TotalBalance` = @TotalBalance, `BetAmount` = @BetAmount, `BetBonus` = @BetBonus, `WinBonus` = @WinBonus, `NewBetUsers` = @NewBetUsers, `NewUserBetAmount` = @NewUserBetAmount, `NewUserBetBonus` = @NewUserBetBonus, `NewUserWinBonus` = @NewUserWinBonus, `WinAmount` = @WinAmount, `PayNotBetUsers` = @PayNotBetUsers, `DOU_FirstPayUsers` = @DOU_FirstPayUsers, `DNU_RepayUsers` = @DNU_RepayUsers, `RepeatConsumersD1` = @RepeatConsumersD1, `RepeatConsumersD5` = @RepeatConsumersD5, `RepeatConsumersD10` = @RepeatConsumersD10, `RepeatConsumersD15` = @RepeatConsumersD15, `DNU_FirstPayAmount` = @DNU_FirstPayAmount, `DOU_FirstPayAmount` = @DOU_FirstPayAmount, `DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount, `NewCashUsers` = @NewCashUsers, `NewPayUsers` = @NewPayUsers, `PayOwnFee` = @PayOwnFee, `PayUserFee` = @PayUserFee, `NewUserPayAmount` = @NewUserPayAmount, `PayAmount` = @PayAmount, `CashOwnFee` = @CashOwnFee, `CashUserFee` = @CashUserFee, `NewUserCashAmount` = @NewUserCashAmount, `NewUserWinAmount` = @NewUserWinAmount, `CashAmount` = @CashAmount, `BonusRecUsers` = @BonusRecUsers, `BonusAmount` = @BonusAmount, `BonusUseAmount` = @BonusUseAmount, `BonusRemainAmount` = @BonusRemainAmount, `BonusUnlockAmount` = @BonusUnlockAmount, `CashAuditAmount` = @CashAuditAmount, `CashRefuseAmount` = @CashRefuseAmount, `CashPassAmount` = @CashPassAmount, `CashFailAmount` = @CashFailAmount, `ProfitAmount` = @ProfitAmount, `PromotionFeeAmount` = @PromotionFeeAmount, `NewARUP` = @NewARUP, `ARUP` = @ARUP, `RetentionD1` = @RetentionD1, `RetentionD3` = @RetentionD3, `RetentionD7` = @RetentionD7, `RetentionD14` = @RetentionD14, `RetentionD15` = @RetentionD15, `RetentionD20` = @RetentionD20, `RetentionD30` = @RetentionD30, `RegRetentionD1` = @RegRetentionD1, `RegRetentionD3` = @RegRetentionD3, `RegRetentionD7` = @RegRetentionD7, `RegRetentionD15` = @RegRetentionD15, `RegRetentionD30` = @RegRetentionD30, `PayRetentionD1` = @PayRetentionD1, `PayRetentionD2` = @PayRetentionD2, `PayRetentionD3` = @PayRetentionD3, `PayRetentionD4` = @PayRetentionD4, `PayRetentionD5` = @PayRetentionD5, `PayRetentionD6` = @PayRetentionD6, `PayRetentionD7` = @PayRetentionD7, `PayRetentionD14` = @PayRetentionD14, `PayRetentionD20` = @PayRetentionD20, `PayRetentionD30` = @PayRetentionD30, `DNU_GGR1` = @DNU_GGR1, `DNU_GGR2` = @DNU_GGR2, `DNU_GGR3` = @DNU_GGR3, `DNU_GGR4` = @DNU_GGR4, `DNU_GGR5` = @DNU_GGR5, `DNU_GGR6` = @DNU_GGR6, `DNU_GGR7` = @DNU_GGR7, `DNU_GGR8` = @DNU_GGR8, `DNU_GGR9` = @DNU_GGR9, `DNU_GGR10` = @DNU_GGR10, `DNU_GGR11` = @DNU_GGR11, `DNU_GGR12` = @DNU_GGR12, `DNU_GGR13` = @DNU_GGR13, `DNU_GGR14` = @DNU_GGR14, `DNU_GGR15` = @DNU_GGR15, `DNU_GGR16` = @DNU_GGR16, `DNU_GGR17` = @DNU_GGR17, `DNU_GGR18` = @DNU_GGR18, `DNU_GGR19` = @DNU_GGR19, `DNU_GGR20` = @DNU_GGR20, `DNU_GGR21` = @DNU_GGR21, `DNU_GGR22` = @DNU_GGR22, `DNU_GGR23` = @DNU_GGR23, `DNU_GGR24` = @DNU_GGR24, `DNU_GGR25` = @DNU_GGR25, `DNU_GGR26` = @DNU_GGR26, `DNU_GGR27` = @DNU_GGR27, `DNU_GGR28` = @DNU_GGR28, `DNU_GGR29` = @DNU_GGR29, `DNU_GGR30` = @DNU_GGR30, `Lose10` = @Lose10, `Lose10_100` = @Lose10_100, `Lose100_500` = @Lose100_500, `Lose500_1000` = @Lose500_1000, `Lose1000_3000` = @Lose1000_3000, `Lose3000_5000` = @Lose3000_5000, `Lose5000_10000` = @Lose5000_10000, `Lose10000_50000` = @Lose10000_50000, `Lose50000` = @Lose50000, `Win10` = @Win10, `Win10_100` = @Win10_100, `Win100_500` = @Win100_500, `Win500_1000` = @Win500_1000, `Win1000_3000` = @Win1000_3000, `Win3000_5000` = @Win3000_5000, `Win5000_10000` = @Win5000_10000, `Win10000_50000` = @Win10000_50000, `Win50000` = @Win50000, `BetD1` = @BetD1, `RMPBet` = @RMPBet, `RSPBet` = @RSPBet, `PSPBet` = @PSPBet, `PMPBet` = @PMPBet WHERE `DayID` = @DayID_Original AND `OperatorID` = @OperatorID_Original";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", item.DayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", item.OperatorID, MySqlDbType.VarChar),
				Database.CreateInParameter("@CountryID", item.CountryID != null ? item.CountryID : (object)DBNull.Value, MySqlDbType.VarChar),
				Database.CreateInParameter("@CurrencyID", item.CurrencyID, MySqlDbType.VarChar),
				Database.CreateInParameter("@NewUsers", item.NewUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@LoginUsers", item.LoginUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@RegUsers", item.RegUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@CashUsers", item.CashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@PayUsers", item.PayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@BetUsers", item.BetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@TotalBalance", item.TotalBalance, MySqlDbType.Int64),
				Database.CreateInParameter("@BetAmount", item.BetAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BetBonus", item.BetBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@WinBonus", item.WinBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@NewBetUsers", item.NewBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@NewUserBetAmount", item.NewUserBetAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserBetBonus", item.NewUserBetBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserWinBonus", item.NewUserWinBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@WinAmount", item.WinAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PayNotBetUsers", item.PayNotBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DOU_FirstPayUsers", item.DOU_FirstPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DNU_RepayUsers", item.DNU_RepayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD1", item.RepeatConsumersD1, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD5", item.RepeatConsumersD5, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD10", item.RepeatConsumersD10, MySqlDbType.Int32),
				Database.CreateInParameter("@RepeatConsumersD15", item.RepeatConsumersD15, MySqlDbType.Int32),
				Database.CreateInParameter("@DNU_FirstPayAmount", item.DNU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DOU_FirstPayAmount", item.DOU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DOU_FirstPayTotalAmount", item.DOU_FirstPayTotalAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewCashUsers", item.NewCashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@NewPayUsers", item.NewPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@PayOwnFee", item.PayOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@PayUserFee", item.PayUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@NewUserPayAmount", item.NewUserPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PayAmount", item.PayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashOwnFee", item.CashOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@CashUserFee", item.CashUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@NewUserCashAmount", item.NewUserCashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewUserWinAmount", item.NewUserWinAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashAmount", item.CashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusRecUsers", item.BonusRecUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@BonusAmount", item.BonusAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusUseAmount", item.BonusUseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusRemainAmount", item.BonusRemainAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@BonusUnlockAmount", item.BonusUnlockAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashAuditAmount", item.CashAuditAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashRefuseAmount", item.CashRefuseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashPassAmount", item.CashPassAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@CashFailAmount", item.CashFailAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@ProfitAmount", item.ProfitAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@PromotionFeeAmount", item.PromotionFeeAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@NewARUP", item.NewARUP, MySqlDbType.Float),
				Database.CreateInParameter("@ARUP", item.ARUP, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD1", item.RetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD3", item.RetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD7", item.RetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD14", item.RetentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD15", item.RetentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD20", item.RetentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@RetentionD30", item.RetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD1", item.RegRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD3", item.RegRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD7", item.RegRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD15", item.RegRetentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@RegRetentionD30", item.RegRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD1", item.PayRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD2", item.PayRetentionD2, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD3", item.PayRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD4", item.PayRetentionD4, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD5", item.PayRetentionD5, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD6", item.PayRetentionD6, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD7", item.PayRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD14", item.PayRetentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD20", item.PayRetentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@PayRetentionD30", item.PayRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@DNU_GGR1", item.DNU_GGR1, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR2", item.DNU_GGR2, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR3", item.DNU_GGR3, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR4", item.DNU_GGR4, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR5", item.DNU_GGR5, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR6", item.DNU_GGR6, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR7", item.DNU_GGR7, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR8", item.DNU_GGR8, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR9", item.DNU_GGR9, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR10", item.DNU_GGR10, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR11", item.DNU_GGR11, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR12", item.DNU_GGR12, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR13", item.DNU_GGR13, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR14", item.DNU_GGR14, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR15", item.DNU_GGR15, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR16", item.DNU_GGR16, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR17", item.DNU_GGR17, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR18", item.DNU_GGR18, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR19", item.DNU_GGR19, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR20", item.DNU_GGR20, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR21", item.DNU_GGR21, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR22", item.DNU_GGR22, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR23", item.DNU_GGR23, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR24", item.DNU_GGR24, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR25", item.DNU_GGR25, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR26", item.DNU_GGR26, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR27", item.DNU_GGR27, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR28", item.DNU_GGR28, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR29", item.DNU_GGR29, MySqlDbType.Int64),
				Database.CreateInParameter("@DNU_GGR30", item.DNU_GGR30, MySqlDbType.Int64),
				Database.CreateInParameter("@Lose10", item.Lose10, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose10_100", item.Lose10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose100_500", item.Lose100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose500_1000", item.Lose500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose1000_3000", item.Lose1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose3000_5000", item.Lose3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose5000_10000", item.Lose5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose10000_50000", item.Lose10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Lose50000", item.Lose50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10", item.Win10, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10_100", item.Win10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@Win100_500", item.Win100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@Win500_1000", item.Win500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win1000_3000", item.Win1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win3000_5000", item.Win3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win5000_10000", item.Win5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win10000_50000", item.Win10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@Win50000", item.Win50000, MySqlDbType.Int32),
				Database.CreateInParameter("@BetD1", item.BetD1, MySqlDbType.Float),
				Database.CreateInParameter("@RMPBet", item.RMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@RSPBet", item.RSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@PSPBet", item.PSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@PMPBet", item.PMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@DayID_Original", item.HasOriginal ? item.OriginalDayID : item.DayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID_Original", item.HasOriginal ? item.OriginalOperatorID : item.OperatorID, MySqlDbType.VarChar),
			};
		}
		
		/// <summary>
		/// 更新实体集合到数据库
		/// </summary>
		/// <param name = "items">要更新的实体对象集合</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int Put(IEnumerable<Sr_oper_dayEO> items, TransactionManager tm_ = null)
		{
			int ret = 0;
			foreach (var item in items)
			{
		        ret += Put(item, tm_);
			}
			return ret;
		}
		public async Task<int> PutAsync(IEnumerable<Sr_oper_dayEO> items, TransactionManager tm_ = null)
		{
			int ret = 0;
			foreach (var item in items)
			{
		        ret += await PutAsync(item, tm_);
			}
			return ret;
		}
		#endregion // PutItem
		
		#region PutByPK
		/// <summary>
		/// 按主键更新指定列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "set_">更新的列数据</param>
		/// <param name="values_">参数值</param>
		/// <return>受影响的行数</return>
		public int PutByPK(DateTime dayID, string operatorID, string set_, params object[] values_)
		{
			return Put(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", ConcatValues(values_, dayID, operatorID));
		}
		public async Task<int> PutByPKAsync(DateTime dayID, string operatorID, string set_, params object[] values_)
		{
			return await PutAsync(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", ConcatValues(values_, dayID, operatorID));
		}
		/// <summary>
		/// 按主键更新指定列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "set_">更新的列数据</param>
		/// <param name="tm_">事务管理对象</param>
		/// <param name="values_">参数值</param>
		/// <return>受影响的行数</return>
		public int PutByPK(DateTime dayID, string operatorID, string set_, TransactionManager tm_, params object[] values_)
		{
			return Put(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", tm_, ConcatValues(values_, dayID, operatorID));
		}
		public async Task<int> PutByPKAsync(DateTime dayID, string operatorID, string set_, TransactionManager tm_, params object[] values_)
		{
			return await PutAsync(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", tm_, ConcatValues(values_, dayID, operatorID));
		}
		/// <summary>
		/// 按主键更新指定列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "set_">更新的列数据</param>
		/// <param name="paras_">参数值</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutByPK(DateTime dayID, string operatorID, string set_, IEnumerable<MySqlParameter> paras_, TransactionManager tm_ = null)
		{
			var newParas_ = new List<MySqlParameter>() {
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
	        };
			return Put(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", ConcatParameters(paras_, newParas_), tm_);
		}
		public async Task<int> PutByPKAsync(DateTime dayID, string operatorID, string set_, IEnumerable<MySqlParameter> paras_, TransactionManager tm_ = null)
		{
			var newParas_ = new List<MySqlParameter>() {
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
	        };
			return await PutAsync(set_, "`DayID` = @DayID AND `OperatorID` = @OperatorID", ConcatParameters(paras_, newParas_), tm_);
		}
		#endregion // PutByPK
		
		#region PutXXX
		#region PutDayID
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDayID(DateTime dayID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DayID` = @DayID";
			var parameter_ = Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDayIDAsync(DateTime dayID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DayID` = @DayID";
			var parameter_ = Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDayID
		#region PutOperatorID
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutOperatorID(string operatorID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `OperatorID` = @OperatorID";
			var parameter_ = Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutOperatorIDAsync(string operatorID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `OperatorID` = @OperatorID";
			var parameter_ = Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutOperatorID
		#region PutCountryID
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCountryIDByPK(DateTime dayID, string operatorID, string countryID, TransactionManager tm_ = null)
		{
			RepairPutCountryIDByPKData(dayID, operatorID, countryID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCountryIDByPKAsync(DateTime dayID, string operatorID, string countryID, TransactionManager tm_ = null)
		{
			RepairPutCountryIDByPKData(dayID, operatorID, countryID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCountryIDByPKData(DateTime dayID, string operatorID, string countryID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CountryID` = @CountryID  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CountryID", countryID != null ? countryID : (object)DBNull.Value, MySqlDbType.VarChar),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCountryID(string countryID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CountryID` = @CountryID";
			var parameter_ = Database.CreateInParameter("@CountryID", countryID != null ? countryID : (object)DBNull.Value, MySqlDbType.VarChar);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCountryIDAsync(string countryID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CountryID` = @CountryID";
			var parameter_ = Database.CreateInParameter("@CountryID", countryID != null ? countryID : (object)DBNull.Value, MySqlDbType.VarChar);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCountryID
		#region PutCurrencyID
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCurrencyIDByPK(DateTime dayID, string operatorID, string currencyID, TransactionManager tm_ = null)
		{
			RepairPutCurrencyIDByPKData(dayID, operatorID, currencyID, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCurrencyIDByPKAsync(DateTime dayID, string operatorID, string currencyID, TransactionManager tm_ = null)
		{
			RepairPutCurrencyIDByPKData(dayID, operatorID, currencyID, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCurrencyIDByPKData(DateTime dayID, string operatorID, string currencyID, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CurrencyID` = @CurrencyID  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCurrencyID(string currencyID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CurrencyID` = @CurrencyID";
			var parameter_ = Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCurrencyIDAsync(string currencyID, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CurrencyID` = @CurrencyID";
			var parameter_ = Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCurrencyID
		#region PutNewUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUsersByPK(DateTime dayID, string operatorID, int newUsers, TransactionManager tm_ = null)
		{
			RepairPutNewUsersByPKData(dayID, operatorID, newUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUsersByPKAsync(DateTime dayID, string operatorID, int newUsers, TransactionManager tm_ = null)
		{
			RepairPutNewUsersByPKData(dayID, operatorID, newUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUsersByPKData(DateTime dayID, string operatorID, int newUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUsers` = @NewUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUsers(int newUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUsers` = @NewUsers";
			var parameter_ = Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUsersAsync(int newUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUsers` = @NewUsers";
			var parameter_ = Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUsers
		#region PutLoginUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLoginUsersByPK(DateTime dayID, string operatorID, int loginUsers, TransactionManager tm_ = null)
		{
			RepairPutLoginUsersByPKData(dayID, operatorID, loginUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLoginUsersByPKAsync(DateTime dayID, string operatorID, int loginUsers, TransactionManager tm_ = null)
		{
			RepairPutLoginUsersByPKData(dayID, operatorID, loginUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLoginUsersByPKData(DateTime dayID, string operatorID, int loginUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `LoginUsers` = @LoginUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLoginUsers(int loginUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `LoginUsers` = @LoginUsers";
			var parameter_ = Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLoginUsersAsync(int loginUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `LoginUsers` = @LoginUsers";
			var parameter_ = Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLoginUsers
		#region PutRegUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegUsersByPK(DateTime dayID, string operatorID, int regUsers, TransactionManager tm_ = null)
		{
			RepairPutRegUsersByPKData(dayID, operatorID, regUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegUsersByPKAsync(DateTime dayID, string operatorID, int regUsers, TransactionManager tm_ = null)
		{
			RepairPutRegUsersByPKData(dayID, operatorID, regUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegUsersByPKData(DateTime dayID, string operatorID, int regUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegUsers` = @RegUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegUsers(int regUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegUsers` = @RegUsers";
			var parameter_ = Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegUsersAsync(int regUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegUsers` = @RegUsers";
			var parameter_ = Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegUsers
		#region PutCashUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashUsersByPK(DateTime dayID, string operatorID, int cashUsers, TransactionManager tm_ = null)
		{
			RepairPutCashUsersByPKData(dayID, operatorID, cashUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashUsersByPKAsync(DateTime dayID, string operatorID, int cashUsers, TransactionManager tm_ = null)
		{
			RepairPutCashUsersByPKData(dayID, operatorID, cashUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashUsersByPKData(DateTime dayID, string operatorID, int cashUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashUsers` = @CashUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashUsers(int cashUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashUsers` = @CashUsers";
			var parameter_ = Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashUsersAsync(int cashUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashUsers` = @CashUsers";
			var parameter_ = Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashUsers
		#region PutPayUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayUsersByPK(DateTime dayID, string operatorID, int payUsers, TransactionManager tm_ = null)
		{
			RepairPutPayUsersByPKData(dayID, operatorID, payUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayUsersByPKAsync(DateTime dayID, string operatorID, int payUsers, TransactionManager tm_ = null)
		{
			RepairPutPayUsersByPKData(dayID, operatorID, payUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayUsersByPKData(DateTime dayID, string operatorID, int payUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayUsers` = @PayUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayUsers(int payUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayUsers` = @PayUsers";
			var parameter_ = Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayUsersAsync(int payUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayUsers` = @PayUsers";
			var parameter_ = Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayUsers
		#region PutBetUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetUsersByPK(DateTime dayID, string operatorID, int betUsers, TransactionManager tm_ = null)
		{
			RepairPutBetUsersByPKData(dayID, operatorID, betUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBetUsersByPKAsync(DateTime dayID, string operatorID, int betUsers, TransactionManager tm_ = null)
		{
			RepairPutBetUsersByPKData(dayID, operatorID, betUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBetUsersByPKData(DateTime dayID, string operatorID, int betUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BetUsers` = @BetUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetUsers(int betUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetUsers` = @BetUsers";
			var parameter_ = Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBetUsersAsync(int betUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetUsers` = @BetUsers";
			var parameter_ = Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBetUsers
		#region PutTotalBalance
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutTotalBalanceByPK(DateTime dayID, string operatorID, long totalBalance, TransactionManager tm_ = null)
		{
			RepairPutTotalBalanceByPKData(dayID, operatorID, totalBalance, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutTotalBalanceByPKAsync(DateTime dayID, string operatorID, long totalBalance, TransactionManager tm_ = null)
		{
			RepairPutTotalBalanceByPKData(dayID, operatorID, totalBalance, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutTotalBalanceByPKData(DateTime dayID, string operatorID, long totalBalance, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `TotalBalance` = @TotalBalance  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutTotalBalance(long totalBalance, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `TotalBalance` = @TotalBalance";
			var parameter_ = Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutTotalBalanceAsync(long totalBalance, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `TotalBalance` = @TotalBalance";
			var parameter_ = Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutTotalBalance
		#region PutBetAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetAmountByPK(DateTime dayID, string operatorID, long betAmount, TransactionManager tm_ = null)
		{
			RepairPutBetAmountByPKData(dayID, operatorID, betAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBetAmountByPKAsync(DateTime dayID, string operatorID, long betAmount, TransactionManager tm_ = null)
		{
			RepairPutBetAmountByPKData(dayID, operatorID, betAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBetAmountByPKData(DateTime dayID, string operatorID, long betAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BetAmount` = @BetAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetAmount(long betAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetAmount` = @BetAmount";
			var parameter_ = Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBetAmountAsync(long betAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetAmount` = @BetAmount";
			var parameter_ = Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBetAmount
		#region PutBetBonus
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetBonusByPK(DateTime dayID, string operatorID, long betBonus, TransactionManager tm_ = null)
		{
			RepairPutBetBonusByPKData(dayID, operatorID, betBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBetBonusByPKAsync(DateTime dayID, string operatorID, long betBonus, TransactionManager tm_ = null)
		{
			RepairPutBetBonusByPKData(dayID, operatorID, betBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBetBonusByPKData(DateTime dayID, string operatorID, long betBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BetBonus` = @BetBonus  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetBonus(long betBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetBonus` = @BetBonus";
			var parameter_ = Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBetBonusAsync(long betBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetBonus` = @BetBonus";
			var parameter_ = Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBetBonus
		#region PutWinBonus
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWinBonusByPK(DateTime dayID, string operatorID, long winBonus, TransactionManager tm_ = null)
		{
			RepairPutWinBonusByPKData(dayID, operatorID, winBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWinBonusByPKAsync(DateTime dayID, string operatorID, long winBonus, TransactionManager tm_ = null)
		{
			RepairPutWinBonusByPKData(dayID, operatorID, winBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWinBonusByPKData(DateTime dayID, string operatorID, long winBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `WinBonus` = @WinBonus  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWinBonus(long winBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `WinBonus` = @WinBonus";
			var parameter_ = Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWinBonusAsync(long winBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `WinBonus` = @WinBonus";
			var parameter_ = Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWinBonus
		#region PutNewBetUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewBetUsersByPK(DateTime dayID, string operatorID, int newBetUsers, TransactionManager tm_ = null)
		{
			RepairPutNewBetUsersByPKData(dayID, operatorID, newBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewBetUsersByPKAsync(DateTime dayID, string operatorID, int newBetUsers, TransactionManager tm_ = null)
		{
			RepairPutNewBetUsersByPKData(dayID, operatorID, newBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewBetUsersByPKData(DateTime dayID, string operatorID, int newBetUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewBetUsers` = @NewBetUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewBetUsers(int newBetUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewBetUsers` = @NewBetUsers";
			var parameter_ = Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewBetUsersAsync(int newBetUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewBetUsers` = @NewBetUsers";
			var parameter_ = Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewBetUsers
		#region PutNewUserBetAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserBetAmountByPK(DateTime dayID, string operatorID, long newUserBetAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserBetAmountByPKData(dayID, operatorID, newUserBetAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserBetAmountByPKAsync(DateTime dayID, string operatorID, long newUserBetAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserBetAmountByPKData(dayID, operatorID, newUserBetAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserBetAmountByPKData(DateTime dayID, string operatorID, long newUserBetAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserBetAmount` = @NewUserBetAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserBetAmount(long newUserBetAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserBetAmount` = @NewUserBetAmount";
			var parameter_ = Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserBetAmountAsync(long newUserBetAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserBetAmount` = @NewUserBetAmount";
			var parameter_ = Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserBetAmount
		#region PutNewUserBetBonus
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserBetBonusByPK(DateTime dayID, string operatorID, long newUserBetBonus, TransactionManager tm_ = null)
		{
			RepairPutNewUserBetBonusByPKData(dayID, operatorID, newUserBetBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserBetBonusByPKAsync(DateTime dayID, string operatorID, long newUserBetBonus, TransactionManager tm_ = null)
		{
			RepairPutNewUserBetBonusByPKData(dayID, operatorID, newUserBetBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserBetBonusByPKData(DateTime dayID, string operatorID, long newUserBetBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserBetBonus` = @NewUserBetBonus  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserBetBonus(long newUserBetBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserBetBonus` = @NewUserBetBonus";
			var parameter_ = Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserBetBonusAsync(long newUserBetBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserBetBonus` = @NewUserBetBonus";
			var parameter_ = Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserBetBonus
		#region PutNewUserWinBonus
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserWinBonusByPK(DateTime dayID, string operatorID, long newUserWinBonus, TransactionManager tm_ = null)
		{
			RepairPutNewUserWinBonusByPKData(dayID, operatorID, newUserWinBonus, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserWinBonusByPKAsync(DateTime dayID, string operatorID, long newUserWinBonus, TransactionManager tm_ = null)
		{
			RepairPutNewUserWinBonusByPKData(dayID, operatorID, newUserWinBonus, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserWinBonusByPKData(DateTime dayID, string operatorID, long newUserWinBonus, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserWinBonus` = @NewUserWinBonus  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserWinBonus(long newUserWinBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserWinBonus` = @NewUserWinBonus";
			var parameter_ = Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserWinBonusAsync(long newUserWinBonus, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserWinBonus` = @NewUserWinBonus";
			var parameter_ = Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserWinBonus
		#region PutWinAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWinAmountByPK(DateTime dayID, string operatorID, long winAmount, TransactionManager tm_ = null)
		{
			RepairPutWinAmountByPKData(dayID, operatorID, winAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWinAmountByPKAsync(DateTime dayID, string operatorID, long winAmount, TransactionManager tm_ = null)
		{
			RepairPutWinAmountByPKData(dayID, operatorID, winAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWinAmountByPKData(DateTime dayID, string operatorID, long winAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `WinAmount` = @WinAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWinAmount(long winAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `WinAmount` = @WinAmount";
			var parameter_ = Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWinAmountAsync(long winAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `WinAmount` = @WinAmount";
			var parameter_ = Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWinAmount
		#region PutPayNotBetUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayNotBetUsersByPK(DateTime dayID, string operatorID, int payNotBetUsers, TransactionManager tm_ = null)
		{
			RepairPutPayNotBetUsersByPKData(dayID, operatorID, payNotBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayNotBetUsersByPKAsync(DateTime dayID, string operatorID, int payNotBetUsers, TransactionManager tm_ = null)
		{
			RepairPutPayNotBetUsersByPKData(dayID, operatorID, payNotBetUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayNotBetUsersByPKData(DateTime dayID, string operatorID, int payNotBetUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayNotBetUsers` = @PayNotBetUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayNotBetUsers(int payNotBetUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayNotBetUsers` = @PayNotBetUsers";
			var parameter_ = Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayNotBetUsersAsync(int payNotBetUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayNotBetUsers` = @PayNotBetUsers";
			var parameter_ = Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayNotBetUsers
		#region PutDOU_FirstPayUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayUsersByPK(DateTime dayID, string operatorID, int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayUsersByPKData(dayID, operatorID, dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDOU_FirstPayUsersByPKAsync(DateTime dayID, string operatorID, int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayUsersByPKData(dayID, operatorID, dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDOU_FirstPayUsersByPKData(DateTime dayID, string operatorID, int dOU_FirstPayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DOU_FirstPayUsers` = @DOU_FirstPayUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayUsers(int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayUsers` = @DOU_FirstPayUsers";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayUsers` = @DOU_FirstPayUsers";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDOU_FirstPayUsers
		#region PutDNU_RepayUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_RepayUsersByPK(DateTime dayID, string operatorID, int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			RepairPutDNU_RepayUsersByPKData(dayID, operatorID, dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_RepayUsersByPKAsync(DateTime dayID, string operatorID, int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			RepairPutDNU_RepayUsersByPKData(dayID, operatorID, dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_RepayUsersByPKData(DateTime dayID, string operatorID, int dNU_RepayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_RepayUsers` = @DNU_RepayUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_RepayUsers(int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_RepayUsers` = @DNU_RepayUsers";
			var parameter_ = Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_RepayUsersAsync(int dNU_RepayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_RepayUsers` = @DNU_RepayUsers";
			var parameter_ = Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_RepayUsers
		#region PutRepeatConsumersD1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD1ByPK(DateTime dayID, string operatorID, int repeatConsumersD1, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD1ByPKData(dayID, operatorID, repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRepeatConsumersD1ByPKAsync(DateTime dayID, string operatorID, int repeatConsumersD1, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD1ByPKData(dayID, operatorID, repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRepeatConsumersD1ByPKData(DateTime dayID, string operatorID, int repeatConsumersD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RepeatConsumersD1` = @RepeatConsumersD1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD1(int repeatConsumersD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD1` = @RepeatConsumersD1";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRepeatConsumersD1Async(int repeatConsumersD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD1` = @RepeatConsumersD1";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRepeatConsumersD1
		#region PutRepeatConsumersD5
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD5ByPK(DateTime dayID, string operatorID, int repeatConsumersD5, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD5ByPKData(dayID, operatorID, repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRepeatConsumersD5ByPKAsync(DateTime dayID, string operatorID, int repeatConsumersD5, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD5ByPKData(dayID, operatorID, repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRepeatConsumersD5ByPKData(DateTime dayID, string operatorID, int repeatConsumersD5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RepeatConsumersD5` = @RepeatConsumersD5  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD5(int repeatConsumersD5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD5` = @RepeatConsumersD5";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRepeatConsumersD5Async(int repeatConsumersD5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD5` = @RepeatConsumersD5";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRepeatConsumersD5
		#region PutRepeatConsumersD10
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD10ByPK(DateTime dayID, string operatorID, int repeatConsumersD10, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD10ByPKData(dayID, operatorID, repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRepeatConsumersD10ByPKAsync(DateTime dayID, string operatorID, int repeatConsumersD10, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD10ByPKData(dayID, operatorID, repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRepeatConsumersD10ByPKData(DateTime dayID, string operatorID, int repeatConsumersD10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RepeatConsumersD10` = @RepeatConsumersD10  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD10(int repeatConsumersD10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD10` = @RepeatConsumersD10";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRepeatConsumersD10Async(int repeatConsumersD10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD10` = @RepeatConsumersD10";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRepeatConsumersD10
		#region PutRepeatConsumersD15
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD15ByPK(DateTime dayID, string operatorID, int repeatConsumersD15, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD15ByPKData(dayID, operatorID, repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRepeatConsumersD15ByPKAsync(DateTime dayID, string operatorID, int repeatConsumersD15, TransactionManager tm_ = null)
		{
			RepairPutRepeatConsumersD15ByPKData(dayID, operatorID, repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRepeatConsumersD15ByPKData(DateTime dayID, string operatorID, int repeatConsumersD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RepeatConsumersD15` = @RepeatConsumersD15  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRepeatConsumersD15(int repeatConsumersD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD15` = @RepeatConsumersD15";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRepeatConsumersD15Async(int repeatConsumersD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RepeatConsumersD15` = @RepeatConsumersD15";
			var parameter_ = Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRepeatConsumersD15
		#region PutDNU_FirstPayAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_FirstPayAmountByPK(DateTime dayID, string operatorID, long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairPutDNU_FirstPayAmountByPKData(dayID, operatorID, dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_FirstPayAmountByPKAsync(DateTime dayID, string operatorID, long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairPutDNU_FirstPayAmountByPKData(dayID, operatorID, dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_FirstPayAmountByPKData(DateTime dayID, string operatorID, long dNU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_FirstPayAmount` = @DNU_FirstPayAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_FirstPayAmount(long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_FirstPayAmount` = @DNU_FirstPayAmount";
			var parameter_ = Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_FirstPayAmount` = @DNU_FirstPayAmount";
			var parameter_ = Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_FirstPayAmount
		#region PutDOU_FirstPayAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayAmountByPK(DateTime dayID, string operatorID, long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayAmountByPKData(dayID, operatorID, dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDOU_FirstPayAmountByPKAsync(DateTime dayID, string operatorID, long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayAmountByPKData(dayID, operatorID, dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDOU_FirstPayAmountByPKData(DateTime dayID, string operatorID, long dOU_FirstPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DOU_FirstPayAmount` = @DOU_FirstPayAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayAmount(long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayAmount` = @DOU_FirstPayAmount";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayAmount` = @DOU_FirstPayAmount";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDOU_FirstPayAmount
		#region PutDOU_FirstPayTotalAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayTotalAmountByPK(DateTime dayID, string operatorID, long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayTotalAmountByPKData(dayID, operatorID, dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDOU_FirstPayTotalAmountByPKAsync(DateTime dayID, string operatorID, long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			RepairPutDOU_FirstPayTotalAmountByPKData(dayID, operatorID, dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDOU_FirstPayTotalAmountByPKData(DateTime dayID, string operatorID, long dOU_FirstPayTotalAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount";
			var parameter_ = Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDOU_FirstPayTotalAmount
		#region PutNewCashUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewCashUsersByPK(DateTime dayID, string operatorID, int newCashUsers, TransactionManager tm_ = null)
		{
			RepairPutNewCashUsersByPKData(dayID, operatorID, newCashUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewCashUsersByPKAsync(DateTime dayID, string operatorID, int newCashUsers, TransactionManager tm_ = null)
		{
			RepairPutNewCashUsersByPKData(dayID, operatorID, newCashUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewCashUsersByPKData(DateTime dayID, string operatorID, int newCashUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewCashUsers` = @NewCashUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewCashUsers(int newCashUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewCashUsers` = @NewCashUsers";
			var parameter_ = Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewCashUsersAsync(int newCashUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewCashUsers` = @NewCashUsers";
			var parameter_ = Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewCashUsers
		#region PutNewPayUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewPayUsersByPK(DateTime dayID, string operatorID, int newPayUsers, TransactionManager tm_ = null)
		{
			RepairPutNewPayUsersByPKData(dayID, operatorID, newPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewPayUsersByPKAsync(DateTime dayID, string operatorID, int newPayUsers, TransactionManager tm_ = null)
		{
			RepairPutNewPayUsersByPKData(dayID, operatorID, newPayUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewPayUsersByPKData(DateTime dayID, string operatorID, int newPayUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewPayUsers` = @NewPayUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewPayUsers(int newPayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewPayUsers` = @NewPayUsers";
			var parameter_ = Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewPayUsersAsync(int newPayUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewPayUsers` = @NewPayUsers";
			var parameter_ = Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewPayUsers
		#region PutPayOwnFee
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayOwnFeeByPK(DateTime dayID, string operatorID, decimal payOwnFee, TransactionManager tm_ = null)
		{
			RepairPutPayOwnFeeByPKData(dayID, operatorID, payOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayOwnFeeByPKAsync(DateTime dayID, string operatorID, decimal payOwnFee, TransactionManager tm_ = null)
		{
			RepairPutPayOwnFeeByPKData(dayID, operatorID, payOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayOwnFeeByPKData(DateTime dayID, string operatorID, decimal payOwnFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayOwnFee` = @PayOwnFee  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayOwnFee(decimal payOwnFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayOwnFee` = @PayOwnFee";
			var parameter_ = Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayOwnFeeAsync(decimal payOwnFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayOwnFee` = @PayOwnFee";
			var parameter_ = Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayOwnFee
		#region PutPayUserFee
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayUserFeeByPK(DateTime dayID, string operatorID, decimal payUserFee, TransactionManager tm_ = null)
		{
			RepairPutPayUserFeeByPKData(dayID, operatorID, payUserFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayUserFeeByPKAsync(DateTime dayID, string operatorID, decimal payUserFee, TransactionManager tm_ = null)
		{
			RepairPutPayUserFeeByPKData(dayID, operatorID, payUserFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayUserFeeByPKData(DateTime dayID, string operatorID, decimal payUserFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayUserFee` = @PayUserFee  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayUserFee(decimal payUserFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayUserFee` = @PayUserFee";
			var parameter_ = Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayUserFeeAsync(decimal payUserFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayUserFee` = @PayUserFee";
			var parameter_ = Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayUserFee
		#region PutNewUserPayAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserPayAmountByPK(DateTime dayID, string operatorID, long newUserPayAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserPayAmountByPKData(dayID, operatorID, newUserPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserPayAmountByPKAsync(DateTime dayID, string operatorID, long newUserPayAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserPayAmountByPKData(dayID, operatorID, newUserPayAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserPayAmountByPKData(DateTime dayID, string operatorID, long newUserPayAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserPayAmount` = @NewUserPayAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserPayAmount(long newUserPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserPayAmount` = @NewUserPayAmount";
			var parameter_ = Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserPayAmountAsync(long newUserPayAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserPayAmount` = @NewUserPayAmount";
			var parameter_ = Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserPayAmount
		#region PutPayAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayAmountByPK(DateTime dayID, string operatorID, long payAmount, TransactionManager tm_ = null)
		{
			RepairPutPayAmountByPKData(dayID, operatorID, payAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayAmountByPKAsync(DateTime dayID, string operatorID, long payAmount, TransactionManager tm_ = null)
		{
			RepairPutPayAmountByPKData(dayID, operatorID, payAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayAmountByPKData(DateTime dayID, string operatorID, long payAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayAmount` = @PayAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayAmount(long payAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayAmount` = @PayAmount";
			var parameter_ = Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayAmountAsync(long payAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayAmount` = @PayAmount";
			var parameter_ = Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayAmount
		#region PutCashOwnFee
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashOwnFeeByPK(DateTime dayID, string operatorID, decimal cashOwnFee, TransactionManager tm_ = null)
		{
			RepairPutCashOwnFeeByPKData(dayID, operatorID, cashOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashOwnFeeByPKAsync(DateTime dayID, string operatorID, decimal cashOwnFee, TransactionManager tm_ = null)
		{
			RepairPutCashOwnFeeByPKData(dayID, operatorID, cashOwnFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashOwnFeeByPKData(DateTime dayID, string operatorID, decimal cashOwnFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashOwnFee` = @CashOwnFee  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashOwnFee(decimal cashOwnFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashOwnFee` = @CashOwnFee";
			var parameter_ = Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashOwnFeeAsync(decimal cashOwnFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashOwnFee` = @CashOwnFee";
			var parameter_ = Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashOwnFee
		#region PutCashUserFee
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashUserFeeByPK(DateTime dayID, string operatorID, decimal cashUserFee, TransactionManager tm_ = null)
		{
			RepairPutCashUserFeeByPKData(dayID, operatorID, cashUserFee, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashUserFeeByPKAsync(DateTime dayID, string operatorID, decimal cashUserFee, TransactionManager tm_ = null)
		{
			RepairPutCashUserFeeByPKData(dayID, operatorID, cashUserFee, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashUserFeeByPKData(DateTime dayID, string operatorID, decimal cashUserFee, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashUserFee` = @CashUserFee  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashUserFee(decimal cashUserFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashUserFee` = @CashUserFee";
			var parameter_ = Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashUserFeeAsync(decimal cashUserFee, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashUserFee` = @CashUserFee";
			var parameter_ = Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashUserFee
		#region PutNewUserCashAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserCashAmountByPK(DateTime dayID, string operatorID, long newUserCashAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserCashAmountByPKData(dayID, operatorID, newUserCashAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserCashAmountByPKAsync(DateTime dayID, string operatorID, long newUserCashAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserCashAmountByPKData(dayID, operatorID, newUserCashAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserCashAmountByPKData(DateTime dayID, string operatorID, long newUserCashAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserCashAmount` = @NewUserCashAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserCashAmount(long newUserCashAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserCashAmount` = @NewUserCashAmount";
			var parameter_ = Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserCashAmountAsync(long newUserCashAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserCashAmount` = @NewUserCashAmount";
			var parameter_ = Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserCashAmount
		#region PutNewUserWinAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserWinAmountByPK(DateTime dayID, string operatorID, long newUserWinAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserWinAmountByPKData(dayID, operatorID, newUserWinAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewUserWinAmountByPKAsync(DateTime dayID, string operatorID, long newUserWinAmount, TransactionManager tm_ = null)
		{
			RepairPutNewUserWinAmountByPKData(dayID, operatorID, newUserWinAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewUserWinAmountByPKData(DateTime dayID, string operatorID, long newUserWinAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewUserWinAmount` = @NewUserWinAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewUserWinAmount(long newUserWinAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserWinAmount` = @NewUserWinAmount";
			var parameter_ = Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewUserWinAmountAsync(long newUserWinAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewUserWinAmount` = @NewUserWinAmount";
			var parameter_ = Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewUserWinAmount
		#region PutCashAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashAmountByPK(DateTime dayID, string operatorID, long cashAmount, TransactionManager tm_ = null)
		{
			RepairPutCashAmountByPKData(dayID, operatorID, cashAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashAmountByPKAsync(DateTime dayID, string operatorID, long cashAmount, TransactionManager tm_ = null)
		{
			RepairPutCashAmountByPKData(dayID, operatorID, cashAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashAmountByPKData(DateTime dayID, string operatorID, long cashAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashAmount` = @CashAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashAmount(long cashAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashAmount` = @CashAmount";
			var parameter_ = Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashAmountAsync(long cashAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashAmount` = @CashAmount";
			var parameter_ = Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashAmount
		#region PutBonusRecUsers
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusRecUsersByPK(DateTime dayID, string operatorID, int bonusRecUsers, TransactionManager tm_ = null)
		{
			RepairPutBonusRecUsersByPKData(dayID, operatorID, bonusRecUsers, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBonusRecUsersByPKAsync(DateTime dayID, string operatorID, int bonusRecUsers, TransactionManager tm_ = null)
		{
			RepairPutBonusRecUsersByPKData(dayID, operatorID, bonusRecUsers, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBonusRecUsersByPKData(DateTime dayID, string operatorID, int bonusRecUsers, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BonusRecUsers` = @BonusRecUsers  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusRecUsers(int bonusRecUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusRecUsers` = @BonusRecUsers";
			var parameter_ = Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBonusRecUsersAsync(int bonusRecUsers, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusRecUsers` = @BonusRecUsers";
			var parameter_ = Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBonusRecUsers
		#region PutBonusAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusAmountByPK(DateTime dayID, string operatorID, long bonusAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusAmountByPKData(dayID, operatorID, bonusAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBonusAmountByPKAsync(DateTime dayID, string operatorID, long bonusAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusAmountByPKData(dayID, operatorID, bonusAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBonusAmountByPKData(DateTime dayID, string operatorID, long bonusAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BonusAmount` = @BonusAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusAmount(long bonusAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusAmount` = @BonusAmount";
			var parameter_ = Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBonusAmountAsync(long bonusAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusAmount` = @BonusAmount";
			var parameter_ = Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBonusAmount
		#region PutBonusUseAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusUseAmountByPK(DateTime dayID, string operatorID, long bonusUseAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusUseAmountByPKData(dayID, operatorID, bonusUseAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBonusUseAmountByPKAsync(DateTime dayID, string operatorID, long bonusUseAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusUseAmountByPKData(dayID, operatorID, bonusUseAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBonusUseAmountByPKData(DateTime dayID, string operatorID, long bonusUseAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BonusUseAmount` = @BonusUseAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusUseAmount(long bonusUseAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusUseAmount` = @BonusUseAmount";
			var parameter_ = Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBonusUseAmountAsync(long bonusUseAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusUseAmount` = @BonusUseAmount";
			var parameter_ = Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBonusUseAmount
		#region PutBonusRemainAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusRemainAmountByPK(DateTime dayID, string operatorID, long bonusRemainAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusRemainAmountByPKData(dayID, operatorID, bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBonusRemainAmountByPKAsync(DateTime dayID, string operatorID, long bonusRemainAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusRemainAmountByPKData(dayID, operatorID, bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBonusRemainAmountByPKData(DateTime dayID, string operatorID, long bonusRemainAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BonusRemainAmount` = @BonusRemainAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusRemainAmount(long bonusRemainAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusRemainAmount` = @BonusRemainAmount";
			var parameter_ = Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBonusRemainAmountAsync(long bonusRemainAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusRemainAmount` = @BonusRemainAmount";
			var parameter_ = Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBonusRemainAmount
		#region PutBonusUnlockAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusUnlockAmountByPK(DateTime dayID, string operatorID, long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusUnlockAmountByPKData(dayID, operatorID, bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBonusUnlockAmountByPKAsync(DateTime dayID, string operatorID, long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			RepairPutBonusUnlockAmountByPKData(dayID, operatorID, bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBonusUnlockAmountByPKData(DateTime dayID, string operatorID, long bonusUnlockAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BonusUnlockAmount` = @BonusUnlockAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBonusUnlockAmount(long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusUnlockAmount` = @BonusUnlockAmount";
			var parameter_ = Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBonusUnlockAmountAsync(long bonusUnlockAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BonusUnlockAmount` = @BonusUnlockAmount";
			var parameter_ = Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBonusUnlockAmount
		#region PutCashAuditAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashAuditAmountByPK(DateTime dayID, string operatorID, long cashAuditAmount, TransactionManager tm_ = null)
		{
			RepairPutCashAuditAmountByPKData(dayID, operatorID, cashAuditAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashAuditAmountByPKAsync(DateTime dayID, string operatorID, long cashAuditAmount, TransactionManager tm_ = null)
		{
			RepairPutCashAuditAmountByPKData(dayID, operatorID, cashAuditAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashAuditAmountByPKData(DateTime dayID, string operatorID, long cashAuditAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashAuditAmount` = @CashAuditAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashAuditAmount(long cashAuditAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashAuditAmount` = @CashAuditAmount";
			var parameter_ = Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashAuditAmountAsync(long cashAuditAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashAuditAmount` = @CashAuditAmount";
			var parameter_ = Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashAuditAmount
		#region PutCashRefuseAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashRefuseAmountByPK(DateTime dayID, string operatorID, long cashRefuseAmount, TransactionManager tm_ = null)
		{
			RepairPutCashRefuseAmountByPKData(dayID, operatorID, cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashRefuseAmountByPKAsync(DateTime dayID, string operatorID, long cashRefuseAmount, TransactionManager tm_ = null)
		{
			RepairPutCashRefuseAmountByPKData(dayID, operatorID, cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashRefuseAmountByPKData(DateTime dayID, string operatorID, long cashRefuseAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashRefuseAmount` = @CashRefuseAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashRefuseAmount(long cashRefuseAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashRefuseAmount` = @CashRefuseAmount";
			var parameter_ = Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashRefuseAmountAsync(long cashRefuseAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashRefuseAmount` = @CashRefuseAmount";
			var parameter_ = Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashRefuseAmount
		#region PutCashPassAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashPassAmountByPK(DateTime dayID, string operatorID, long cashPassAmount, TransactionManager tm_ = null)
		{
			RepairPutCashPassAmountByPKData(dayID, operatorID, cashPassAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashPassAmountByPKAsync(DateTime dayID, string operatorID, long cashPassAmount, TransactionManager tm_ = null)
		{
			RepairPutCashPassAmountByPKData(dayID, operatorID, cashPassAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashPassAmountByPKData(DateTime dayID, string operatorID, long cashPassAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashPassAmount` = @CashPassAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashPassAmount(long cashPassAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashPassAmount` = @CashPassAmount";
			var parameter_ = Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashPassAmountAsync(long cashPassAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashPassAmount` = @CashPassAmount";
			var parameter_ = Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashPassAmount
		#region PutCashFailAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashFailAmountByPK(DateTime dayID, string operatorID, long cashFailAmount, TransactionManager tm_ = null)
		{
			RepairPutCashFailAmountByPKData(dayID, operatorID, cashFailAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutCashFailAmountByPKAsync(DateTime dayID, string operatorID, long cashFailAmount, TransactionManager tm_ = null)
		{
			RepairPutCashFailAmountByPKData(dayID, operatorID, cashFailAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutCashFailAmountByPKData(DateTime dayID, string operatorID, long cashFailAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `CashFailAmount` = @CashFailAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutCashFailAmount(long cashFailAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashFailAmount` = @CashFailAmount";
			var parameter_ = Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutCashFailAmountAsync(long cashFailAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `CashFailAmount` = @CashFailAmount";
			var parameter_ = Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutCashFailAmount
		#region PutProfitAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutProfitAmountByPK(DateTime dayID, string operatorID, long profitAmount, TransactionManager tm_ = null)
		{
			RepairPutProfitAmountByPKData(dayID, operatorID, profitAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutProfitAmountByPKAsync(DateTime dayID, string operatorID, long profitAmount, TransactionManager tm_ = null)
		{
			RepairPutProfitAmountByPKData(dayID, operatorID, profitAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutProfitAmountByPKData(DateTime dayID, string operatorID, long profitAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `ProfitAmount` = @ProfitAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutProfitAmount(long profitAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `ProfitAmount` = @ProfitAmount";
			var parameter_ = Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutProfitAmountAsync(long profitAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `ProfitAmount` = @ProfitAmount";
			var parameter_ = Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutProfitAmount
		#region PutPromotionFeeAmount
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPromotionFeeAmountByPK(DateTime dayID, string operatorID, long promotionFeeAmount, TransactionManager tm_ = null)
		{
			RepairPutPromotionFeeAmountByPKData(dayID, operatorID, promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPromotionFeeAmountByPKAsync(DateTime dayID, string operatorID, long promotionFeeAmount, TransactionManager tm_ = null)
		{
			RepairPutPromotionFeeAmountByPKData(dayID, operatorID, promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPromotionFeeAmountByPKData(DateTime dayID, string operatorID, long promotionFeeAmount, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PromotionFeeAmount` = @PromotionFeeAmount  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPromotionFeeAmount(long promotionFeeAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PromotionFeeAmount` = @PromotionFeeAmount";
			var parameter_ = Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPromotionFeeAmountAsync(long promotionFeeAmount, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PromotionFeeAmount` = @PromotionFeeAmount";
			var parameter_ = Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPromotionFeeAmount
		#region PutNewARUP
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewARUPByPK(DateTime dayID, string operatorID, float newARUP, TransactionManager tm_ = null)
		{
			RepairPutNewARUPByPKData(dayID, operatorID, newARUP, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutNewARUPByPKAsync(DateTime dayID, string operatorID, float newARUP, TransactionManager tm_ = null)
		{
			RepairPutNewARUPByPKData(dayID, operatorID, newARUP, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutNewARUPByPKData(DateTime dayID, string operatorID, float newARUP, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `NewARUP` = @NewARUP  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutNewARUP(float newARUP, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewARUP` = @NewARUP";
			var parameter_ = Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutNewARUPAsync(float newARUP, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `NewARUP` = @NewARUP";
			var parameter_ = Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutNewARUP
		#region PutARUP
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutARUPByPK(DateTime dayID, string operatorID, float aRUP, TransactionManager tm_ = null)
		{
			RepairPutARUPByPKData(dayID, operatorID, aRUP, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutARUPByPKAsync(DateTime dayID, string operatorID, float aRUP, TransactionManager tm_ = null)
		{
			RepairPutARUPByPKData(dayID, operatorID, aRUP, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutARUPByPKData(DateTime dayID, string operatorID, float aRUP, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `ARUP` = @ARUP  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutARUP(float aRUP, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `ARUP` = @ARUP";
			var parameter_ = Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutARUPAsync(float aRUP, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `ARUP` = @ARUP";
			var parameter_ = Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutARUP
		#region PutRetentionD1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD1ByPK(DateTime dayID, string operatorID, float retentionD1, TransactionManager tm_ = null)
		{
			RepairPutRetentionD1ByPKData(dayID, operatorID, retentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD1ByPKAsync(DateTime dayID, string operatorID, float retentionD1, TransactionManager tm_ = null)
		{
			RepairPutRetentionD1ByPKData(dayID, operatorID, retentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD1ByPKData(DateTime dayID, string operatorID, float retentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD1` = @RetentionD1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD1(float retentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD1` = @RetentionD1";
			var parameter_ = Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD1Async(float retentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD1` = @RetentionD1";
			var parameter_ = Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD1
		#region PutRetentionD3
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD3ByPK(DateTime dayID, string operatorID, float retentionD3, TransactionManager tm_ = null)
		{
			RepairPutRetentionD3ByPKData(dayID, operatorID, retentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD3ByPKAsync(DateTime dayID, string operatorID, float retentionD3, TransactionManager tm_ = null)
		{
			RepairPutRetentionD3ByPKData(dayID, operatorID, retentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD3ByPKData(DateTime dayID, string operatorID, float retentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD3` = @RetentionD3  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD3(float retentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD3` = @RetentionD3";
			var parameter_ = Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD3Async(float retentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD3` = @RetentionD3";
			var parameter_ = Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD3
		#region PutRetentionD7
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD7ByPK(DateTime dayID, string operatorID, float retentionD7, TransactionManager tm_ = null)
		{
			RepairPutRetentionD7ByPKData(dayID, operatorID, retentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD7ByPKAsync(DateTime dayID, string operatorID, float retentionD7, TransactionManager tm_ = null)
		{
			RepairPutRetentionD7ByPKData(dayID, operatorID, retentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD7ByPKData(DateTime dayID, string operatorID, float retentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD7` = @RetentionD7  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD7(float retentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD7` = @RetentionD7";
			var parameter_ = Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD7Async(float retentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD7` = @RetentionD7";
			var parameter_ = Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD7
		#region PutRetentionD14
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD14ByPK(DateTime dayID, string operatorID, float retentionD14, TransactionManager tm_ = null)
		{
			RepairPutRetentionD14ByPKData(dayID, operatorID, retentionD14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD14ByPKAsync(DateTime dayID, string operatorID, float retentionD14, TransactionManager tm_ = null)
		{
			RepairPutRetentionD14ByPKData(dayID, operatorID, retentionD14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD14ByPKData(DateTime dayID, string operatorID, float retentionD14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD14` = @RetentionD14  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD14(float retentionD14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD14` = @RetentionD14";
			var parameter_ = Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD14Async(float retentionD14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD14` = @RetentionD14";
			var parameter_ = Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD14
		#region PutRetentionD15
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD15ByPK(DateTime dayID, string operatorID, float retentionD15, TransactionManager tm_ = null)
		{
			RepairPutRetentionD15ByPKData(dayID, operatorID, retentionD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD15ByPKAsync(DateTime dayID, string operatorID, float retentionD15, TransactionManager tm_ = null)
		{
			RepairPutRetentionD15ByPKData(dayID, operatorID, retentionD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD15ByPKData(DateTime dayID, string operatorID, float retentionD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD15` = @RetentionD15  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD15(float retentionD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD15` = @RetentionD15";
			var parameter_ = Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD15Async(float retentionD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD15` = @RetentionD15";
			var parameter_ = Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD15
		#region PutRetentionD20
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD20ByPK(DateTime dayID, string operatorID, float retentionD20, TransactionManager tm_ = null)
		{
			RepairPutRetentionD20ByPKData(dayID, operatorID, retentionD20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD20ByPKAsync(DateTime dayID, string operatorID, float retentionD20, TransactionManager tm_ = null)
		{
			RepairPutRetentionD20ByPKData(dayID, operatorID, retentionD20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD20ByPKData(DateTime dayID, string operatorID, float retentionD20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD20` = @RetentionD20  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD20(float retentionD20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD20` = @RetentionD20";
			var parameter_ = Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD20Async(float retentionD20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD20` = @RetentionD20";
			var parameter_ = Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD20
		#region PutRetentionD30
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD30ByPK(DateTime dayID, string operatorID, float retentionD30, TransactionManager tm_ = null)
		{
			RepairPutRetentionD30ByPKData(dayID, operatorID, retentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRetentionD30ByPKAsync(DateTime dayID, string operatorID, float retentionD30, TransactionManager tm_ = null)
		{
			RepairPutRetentionD30ByPKData(dayID, operatorID, retentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRetentionD30ByPKData(DateTime dayID, string operatorID, float retentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RetentionD30` = @RetentionD30  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRetentionD30(float retentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD30` = @RetentionD30";
			var parameter_ = Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRetentionD30Async(float retentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RetentionD30` = @RetentionD30";
			var parameter_ = Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRetentionD30
		#region PutRegRetentionD1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD1ByPK(DateTime dayID, string operatorID, float regRetentionD1, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD1ByPKData(dayID, operatorID, regRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegRetentionD1ByPKAsync(DateTime dayID, string operatorID, float regRetentionD1, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD1ByPKData(dayID, operatorID, regRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegRetentionD1ByPKData(DateTime dayID, string operatorID, float regRetentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegRetentionD1` = @RegRetentionD1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD1(float regRetentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD1` = @RegRetentionD1";
			var parameter_ = Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegRetentionD1Async(float regRetentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD1` = @RegRetentionD1";
			var parameter_ = Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegRetentionD1
		#region PutRegRetentionD3
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD3ByPK(DateTime dayID, string operatorID, float regRetentionD3, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD3ByPKData(dayID, operatorID, regRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegRetentionD3ByPKAsync(DateTime dayID, string operatorID, float regRetentionD3, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD3ByPKData(dayID, operatorID, regRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegRetentionD3ByPKData(DateTime dayID, string operatorID, float regRetentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegRetentionD3` = @RegRetentionD3  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD3(float regRetentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD3` = @RegRetentionD3";
			var parameter_ = Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegRetentionD3Async(float regRetentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD3` = @RegRetentionD3";
			var parameter_ = Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegRetentionD3
		#region PutRegRetentionD7
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD7ByPK(DateTime dayID, string operatorID, float regRetentionD7, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD7ByPKData(dayID, operatorID, regRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegRetentionD7ByPKAsync(DateTime dayID, string operatorID, float regRetentionD7, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD7ByPKData(dayID, operatorID, regRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegRetentionD7ByPKData(DateTime dayID, string operatorID, float regRetentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegRetentionD7` = @RegRetentionD7  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD7(float regRetentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD7` = @RegRetentionD7";
			var parameter_ = Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegRetentionD7Async(float regRetentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD7` = @RegRetentionD7";
			var parameter_ = Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegRetentionD7
		#region PutRegRetentionD15
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD15ByPK(DateTime dayID, string operatorID, float regRetentionD15, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD15ByPKData(dayID, operatorID, regRetentionD15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegRetentionD15ByPKAsync(DateTime dayID, string operatorID, float regRetentionD15, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD15ByPKData(dayID, operatorID, regRetentionD15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegRetentionD15ByPKData(DateTime dayID, string operatorID, float regRetentionD15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegRetentionD15` = @RegRetentionD15  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD15(float regRetentionD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD15` = @RegRetentionD15";
			var parameter_ = Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegRetentionD15Async(float regRetentionD15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD15` = @RegRetentionD15";
			var parameter_ = Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegRetentionD15
		#region PutRegRetentionD30
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD30ByPK(DateTime dayID, string operatorID, float regRetentionD30, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD30ByPKData(dayID, operatorID, regRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRegRetentionD30ByPKAsync(DateTime dayID, string operatorID, float regRetentionD30, TransactionManager tm_ = null)
		{
			RepairPutRegRetentionD30ByPKData(dayID, operatorID, regRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRegRetentionD30ByPKData(DateTime dayID, string operatorID, float regRetentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RegRetentionD30` = @RegRetentionD30  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRegRetentionD30(float regRetentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD30` = @RegRetentionD30";
			var parameter_ = Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRegRetentionD30Async(float regRetentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RegRetentionD30` = @RegRetentionD30";
			var parameter_ = Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRegRetentionD30
		#region PutPayRetentionD1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD1ByPK(DateTime dayID, string operatorID, float payRetentionD1, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD1ByPKData(dayID, operatorID, payRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD1ByPKAsync(DateTime dayID, string operatorID, float payRetentionD1, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD1ByPKData(dayID, operatorID, payRetentionD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD1ByPKData(DateTime dayID, string operatorID, float payRetentionD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD1` = @PayRetentionD1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD1(float payRetentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD1` = @PayRetentionD1";
			var parameter_ = Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD1Async(float payRetentionD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD1` = @PayRetentionD1";
			var parameter_ = Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD1
		#region PutPayRetentionD2
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD2ByPK(DateTime dayID, string operatorID, float payRetentionD2, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD2ByPKData(dayID, operatorID, payRetentionD2, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD2ByPKAsync(DateTime dayID, string operatorID, float payRetentionD2, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD2ByPKData(dayID, operatorID, payRetentionD2, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD2ByPKData(DateTime dayID, string operatorID, float payRetentionD2, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD2` = @PayRetentionD2  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD2(float payRetentionD2, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD2` = @PayRetentionD2";
			var parameter_ = Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD2Async(float payRetentionD2, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD2` = @PayRetentionD2";
			var parameter_ = Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD2
		#region PutPayRetentionD3
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD3ByPK(DateTime dayID, string operatorID, float payRetentionD3, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD3ByPKData(dayID, operatorID, payRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD3ByPKAsync(DateTime dayID, string operatorID, float payRetentionD3, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD3ByPKData(dayID, operatorID, payRetentionD3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD3ByPKData(DateTime dayID, string operatorID, float payRetentionD3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD3` = @PayRetentionD3  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD3(float payRetentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD3` = @PayRetentionD3";
			var parameter_ = Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD3Async(float payRetentionD3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD3` = @PayRetentionD3";
			var parameter_ = Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD3
		#region PutPayRetentionD4
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD4ByPK(DateTime dayID, string operatorID, float payRetentionD4, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD4ByPKData(dayID, operatorID, payRetentionD4, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD4ByPKAsync(DateTime dayID, string operatorID, float payRetentionD4, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD4ByPKData(dayID, operatorID, payRetentionD4, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD4ByPKData(DateTime dayID, string operatorID, float payRetentionD4, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD4` = @PayRetentionD4  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD4(float payRetentionD4, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD4` = @PayRetentionD4";
			var parameter_ = Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD4Async(float payRetentionD4, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD4` = @PayRetentionD4";
			var parameter_ = Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD4
		#region PutPayRetentionD5
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD5ByPK(DateTime dayID, string operatorID, float payRetentionD5, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD5ByPKData(dayID, operatorID, payRetentionD5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD5ByPKAsync(DateTime dayID, string operatorID, float payRetentionD5, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD5ByPKData(dayID, operatorID, payRetentionD5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD5ByPKData(DateTime dayID, string operatorID, float payRetentionD5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD5` = @PayRetentionD5  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD5(float payRetentionD5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD5` = @PayRetentionD5";
			var parameter_ = Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD5Async(float payRetentionD5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD5` = @PayRetentionD5";
			var parameter_ = Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD5
		#region PutPayRetentionD6
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD6ByPK(DateTime dayID, string operatorID, float payRetentionD6, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD6ByPKData(dayID, operatorID, payRetentionD6, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD6ByPKAsync(DateTime dayID, string operatorID, float payRetentionD6, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD6ByPKData(dayID, operatorID, payRetentionD6, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD6ByPKData(DateTime dayID, string operatorID, float payRetentionD6, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD6` = @PayRetentionD6  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD6(float payRetentionD6, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD6` = @PayRetentionD6";
			var parameter_ = Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD6Async(float payRetentionD6, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD6` = @PayRetentionD6";
			var parameter_ = Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD6
		#region PutPayRetentionD7
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD7ByPK(DateTime dayID, string operatorID, float payRetentionD7, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD7ByPKData(dayID, operatorID, payRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD7ByPKAsync(DateTime dayID, string operatorID, float payRetentionD7, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD7ByPKData(dayID, operatorID, payRetentionD7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD7ByPKData(DateTime dayID, string operatorID, float payRetentionD7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD7` = @PayRetentionD7  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD7(float payRetentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD7` = @PayRetentionD7";
			var parameter_ = Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD7Async(float payRetentionD7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD7` = @PayRetentionD7";
			var parameter_ = Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD7
		#region PutPayRetentionD14
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD14ByPK(DateTime dayID, string operatorID, float payRetentionD14, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD14ByPKData(dayID, operatorID, payRetentionD14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD14ByPKAsync(DateTime dayID, string operatorID, float payRetentionD14, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD14ByPKData(dayID, operatorID, payRetentionD14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD14ByPKData(DateTime dayID, string operatorID, float payRetentionD14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD14` = @PayRetentionD14  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD14(float payRetentionD14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD14` = @PayRetentionD14";
			var parameter_ = Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD14Async(float payRetentionD14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD14` = @PayRetentionD14";
			var parameter_ = Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD14
		#region PutPayRetentionD20
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD20ByPK(DateTime dayID, string operatorID, float payRetentionD20, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD20ByPKData(dayID, operatorID, payRetentionD20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD20ByPKAsync(DateTime dayID, string operatorID, float payRetentionD20, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD20ByPKData(dayID, operatorID, payRetentionD20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD20ByPKData(DateTime dayID, string operatorID, float payRetentionD20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD20` = @PayRetentionD20  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD20(float payRetentionD20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD20` = @PayRetentionD20";
			var parameter_ = Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD20Async(float payRetentionD20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD20` = @PayRetentionD20";
			var parameter_ = Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD20
		#region PutPayRetentionD30
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD30ByPK(DateTime dayID, string operatorID, float payRetentionD30, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD30ByPKData(dayID, operatorID, payRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPayRetentionD30ByPKAsync(DateTime dayID, string operatorID, float payRetentionD30, TransactionManager tm_ = null)
		{
			RepairPutPayRetentionD30ByPKData(dayID, operatorID, payRetentionD30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPayRetentionD30ByPKData(DateTime dayID, string operatorID, float payRetentionD30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PayRetentionD30` = @PayRetentionD30  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPayRetentionD30(float payRetentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD30` = @PayRetentionD30";
			var parameter_ = Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPayRetentionD30Async(float payRetentionD30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PayRetentionD30` = @PayRetentionD30";
			var parameter_ = Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPayRetentionD30
		#region PutDNU_GGR1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR1ByPK(DateTime dayID, string operatorID, long dNU_GGR1, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR1ByPKData(dayID, operatorID, dNU_GGR1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR1ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR1, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR1ByPKData(dayID, operatorID, dNU_GGR1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR1ByPKData(DateTime dayID, string operatorID, long dNU_GGR1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR1` = @DNU_GGR1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR1(long dNU_GGR1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR1` = @DNU_GGR1";
			var parameter_ = Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR1Async(long dNU_GGR1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR1` = @DNU_GGR1";
			var parameter_ = Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR1
		#region PutDNU_GGR2
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR2ByPK(DateTime dayID, string operatorID, long dNU_GGR2, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR2ByPKData(dayID, operatorID, dNU_GGR2, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR2ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR2, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR2ByPKData(dayID, operatorID, dNU_GGR2, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR2ByPKData(DateTime dayID, string operatorID, long dNU_GGR2, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR2` = @DNU_GGR2  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR2(long dNU_GGR2, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR2` = @DNU_GGR2";
			var parameter_ = Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR2Async(long dNU_GGR2, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR2` = @DNU_GGR2";
			var parameter_ = Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR2
		#region PutDNU_GGR3
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR3ByPK(DateTime dayID, string operatorID, long dNU_GGR3, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR3ByPKData(dayID, operatorID, dNU_GGR3, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR3ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR3, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR3ByPKData(dayID, operatorID, dNU_GGR3, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR3ByPKData(DateTime dayID, string operatorID, long dNU_GGR3, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR3` = @DNU_GGR3  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR3(long dNU_GGR3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR3` = @DNU_GGR3";
			var parameter_ = Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR3Async(long dNU_GGR3, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR3` = @DNU_GGR3";
			var parameter_ = Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR3
		#region PutDNU_GGR4
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR4ByPK(DateTime dayID, string operatorID, long dNU_GGR4, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR4ByPKData(dayID, operatorID, dNU_GGR4, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR4ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR4, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR4ByPKData(dayID, operatorID, dNU_GGR4, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR4ByPKData(DateTime dayID, string operatorID, long dNU_GGR4, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR4` = @DNU_GGR4  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR4(long dNU_GGR4, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR4` = @DNU_GGR4";
			var parameter_ = Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR4Async(long dNU_GGR4, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR4` = @DNU_GGR4";
			var parameter_ = Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR4
		#region PutDNU_GGR5
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR5ByPK(DateTime dayID, string operatorID, long dNU_GGR5, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR5ByPKData(dayID, operatorID, dNU_GGR5, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR5ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR5, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR5ByPKData(dayID, operatorID, dNU_GGR5, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR5ByPKData(DateTime dayID, string operatorID, long dNU_GGR5, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR5` = @DNU_GGR5  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR5(long dNU_GGR5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR5` = @DNU_GGR5";
			var parameter_ = Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR5Async(long dNU_GGR5, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR5` = @DNU_GGR5";
			var parameter_ = Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR5
		#region PutDNU_GGR6
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR6ByPK(DateTime dayID, string operatorID, long dNU_GGR6, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR6ByPKData(dayID, operatorID, dNU_GGR6, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR6ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR6, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR6ByPKData(dayID, operatorID, dNU_GGR6, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR6ByPKData(DateTime dayID, string operatorID, long dNU_GGR6, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR6` = @DNU_GGR6  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR6(long dNU_GGR6, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR6` = @DNU_GGR6";
			var parameter_ = Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR6Async(long dNU_GGR6, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR6` = @DNU_GGR6";
			var parameter_ = Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR6
		#region PutDNU_GGR7
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR7ByPK(DateTime dayID, string operatorID, long dNU_GGR7, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR7ByPKData(dayID, operatorID, dNU_GGR7, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR7ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR7, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR7ByPKData(dayID, operatorID, dNU_GGR7, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR7ByPKData(DateTime dayID, string operatorID, long dNU_GGR7, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR7` = @DNU_GGR7  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR7(long dNU_GGR7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR7` = @DNU_GGR7";
			var parameter_ = Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR7Async(long dNU_GGR7, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR7` = @DNU_GGR7";
			var parameter_ = Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR7
		#region PutDNU_GGR8
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR8ByPK(DateTime dayID, string operatorID, long dNU_GGR8, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR8ByPKData(dayID, operatorID, dNU_GGR8, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR8ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR8, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR8ByPKData(dayID, operatorID, dNU_GGR8, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR8ByPKData(DateTime dayID, string operatorID, long dNU_GGR8, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR8` = @DNU_GGR8  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR8(long dNU_GGR8, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR8` = @DNU_GGR8";
			var parameter_ = Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR8Async(long dNU_GGR8, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR8` = @DNU_GGR8";
			var parameter_ = Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR8
		#region PutDNU_GGR9
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR9ByPK(DateTime dayID, string operatorID, long dNU_GGR9, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR9ByPKData(dayID, operatorID, dNU_GGR9, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR9ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR9, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR9ByPKData(dayID, operatorID, dNU_GGR9, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR9ByPKData(DateTime dayID, string operatorID, long dNU_GGR9, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR9` = @DNU_GGR9  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR9(long dNU_GGR9, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR9` = @DNU_GGR9";
			var parameter_ = Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR9Async(long dNU_GGR9, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR9` = @DNU_GGR9";
			var parameter_ = Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR9
		#region PutDNU_GGR10
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR10ByPK(DateTime dayID, string operatorID, long dNU_GGR10, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR10ByPKData(dayID, operatorID, dNU_GGR10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR10ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR10, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR10ByPKData(dayID, operatorID, dNU_GGR10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR10ByPKData(DateTime dayID, string operatorID, long dNU_GGR10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR10` = @DNU_GGR10  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR10(long dNU_GGR10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR10` = @DNU_GGR10";
			var parameter_ = Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR10Async(long dNU_GGR10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR10` = @DNU_GGR10";
			var parameter_ = Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR10
		#region PutDNU_GGR11
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR11ByPK(DateTime dayID, string operatorID, long dNU_GGR11, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR11ByPKData(dayID, operatorID, dNU_GGR11, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR11ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR11, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR11ByPKData(dayID, operatorID, dNU_GGR11, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR11ByPKData(DateTime dayID, string operatorID, long dNU_GGR11, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR11` = @DNU_GGR11  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR11(long dNU_GGR11, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR11` = @DNU_GGR11";
			var parameter_ = Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR11Async(long dNU_GGR11, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR11` = @DNU_GGR11";
			var parameter_ = Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR11
		#region PutDNU_GGR12
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR12ByPK(DateTime dayID, string operatorID, long dNU_GGR12, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR12ByPKData(dayID, operatorID, dNU_GGR12, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR12ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR12, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR12ByPKData(dayID, operatorID, dNU_GGR12, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR12ByPKData(DateTime dayID, string operatorID, long dNU_GGR12, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR12` = @DNU_GGR12  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR12(long dNU_GGR12, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR12` = @DNU_GGR12";
			var parameter_ = Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR12Async(long dNU_GGR12, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR12` = @DNU_GGR12";
			var parameter_ = Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR12
		#region PutDNU_GGR13
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR13ByPK(DateTime dayID, string operatorID, long dNU_GGR13, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR13ByPKData(dayID, operatorID, dNU_GGR13, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR13ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR13, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR13ByPKData(dayID, operatorID, dNU_GGR13, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR13ByPKData(DateTime dayID, string operatorID, long dNU_GGR13, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR13` = @DNU_GGR13  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR13(long dNU_GGR13, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR13` = @DNU_GGR13";
			var parameter_ = Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR13Async(long dNU_GGR13, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR13` = @DNU_GGR13";
			var parameter_ = Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR13
		#region PutDNU_GGR14
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR14ByPK(DateTime dayID, string operatorID, long dNU_GGR14, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR14ByPKData(dayID, operatorID, dNU_GGR14, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR14ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR14, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR14ByPKData(dayID, operatorID, dNU_GGR14, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR14ByPKData(DateTime dayID, string operatorID, long dNU_GGR14, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR14` = @DNU_GGR14  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR14(long dNU_GGR14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR14` = @DNU_GGR14";
			var parameter_ = Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR14Async(long dNU_GGR14, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR14` = @DNU_GGR14";
			var parameter_ = Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR14
		#region PutDNU_GGR15
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR15ByPK(DateTime dayID, string operatorID, long dNU_GGR15, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR15ByPKData(dayID, operatorID, dNU_GGR15, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR15ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR15, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR15ByPKData(dayID, operatorID, dNU_GGR15, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR15ByPKData(DateTime dayID, string operatorID, long dNU_GGR15, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR15` = @DNU_GGR15  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR15(long dNU_GGR15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR15` = @DNU_GGR15";
			var parameter_ = Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR15Async(long dNU_GGR15, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR15` = @DNU_GGR15";
			var parameter_ = Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR15
		#region PutDNU_GGR16
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR16ByPK(DateTime dayID, string operatorID, long dNU_GGR16, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR16ByPKData(dayID, operatorID, dNU_GGR16, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR16ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR16, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR16ByPKData(dayID, operatorID, dNU_GGR16, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR16ByPKData(DateTime dayID, string operatorID, long dNU_GGR16, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR16` = @DNU_GGR16  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR16(long dNU_GGR16, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR16` = @DNU_GGR16";
			var parameter_ = Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR16Async(long dNU_GGR16, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR16` = @DNU_GGR16";
			var parameter_ = Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR16
		#region PutDNU_GGR17
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR17ByPK(DateTime dayID, string operatorID, long dNU_GGR17, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR17ByPKData(dayID, operatorID, dNU_GGR17, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR17ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR17, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR17ByPKData(dayID, operatorID, dNU_GGR17, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR17ByPKData(DateTime dayID, string operatorID, long dNU_GGR17, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR17` = @DNU_GGR17  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR17(long dNU_GGR17, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR17` = @DNU_GGR17";
			var parameter_ = Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR17Async(long dNU_GGR17, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR17` = @DNU_GGR17";
			var parameter_ = Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR17
		#region PutDNU_GGR18
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR18ByPK(DateTime dayID, string operatorID, long dNU_GGR18, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR18ByPKData(dayID, operatorID, dNU_GGR18, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR18ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR18, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR18ByPKData(dayID, operatorID, dNU_GGR18, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR18ByPKData(DateTime dayID, string operatorID, long dNU_GGR18, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR18` = @DNU_GGR18  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR18(long dNU_GGR18, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR18` = @DNU_GGR18";
			var parameter_ = Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR18Async(long dNU_GGR18, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR18` = @DNU_GGR18";
			var parameter_ = Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR18
		#region PutDNU_GGR19
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR19ByPK(DateTime dayID, string operatorID, long dNU_GGR19, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR19ByPKData(dayID, operatorID, dNU_GGR19, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR19ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR19, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR19ByPKData(dayID, operatorID, dNU_GGR19, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR19ByPKData(DateTime dayID, string operatorID, long dNU_GGR19, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR19` = @DNU_GGR19  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR19(long dNU_GGR19, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR19` = @DNU_GGR19";
			var parameter_ = Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR19Async(long dNU_GGR19, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR19` = @DNU_GGR19";
			var parameter_ = Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR19
		#region PutDNU_GGR20
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR20ByPK(DateTime dayID, string operatorID, long dNU_GGR20, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR20ByPKData(dayID, operatorID, dNU_GGR20, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR20ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR20, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR20ByPKData(dayID, operatorID, dNU_GGR20, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR20ByPKData(DateTime dayID, string operatorID, long dNU_GGR20, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR20` = @DNU_GGR20  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR20(long dNU_GGR20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR20` = @DNU_GGR20";
			var parameter_ = Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR20Async(long dNU_GGR20, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR20` = @DNU_GGR20";
			var parameter_ = Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR20
		#region PutDNU_GGR21
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR21ByPK(DateTime dayID, string operatorID, long dNU_GGR21, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR21ByPKData(dayID, operatorID, dNU_GGR21, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR21ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR21, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR21ByPKData(dayID, operatorID, dNU_GGR21, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR21ByPKData(DateTime dayID, string operatorID, long dNU_GGR21, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR21` = @DNU_GGR21  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR21(long dNU_GGR21, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR21` = @DNU_GGR21";
			var parameter_ = Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR21Async(long dNU_GGR21, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR21` = @DNU_GGR21";
			var parameter_ = Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR21
		#region PutDNU_GGR22
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR22ByPK(DateTime dayID, string operatorID, long dNU_GGR22, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR22ByPKData(dayID, operatorID, dNU_GGR22, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR22ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR22, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR22ByPKData(dayID, operatorID, dNU_GGR22, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR22ByPKData(DateTime dayID, string operatorID, long dNU_GGR22, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR22` = @DNU_GGR22  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR22(long dNU_GGR22, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR22` = @DNU_GGR22";
			var parameter_ = Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR22Async(long dNU_GGR22, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR22` = @DNU_GGR22";
			var parameter_ = Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR22
		#region PutDNU_GGR23
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR23ByPK(DateTime dayID, string operatorID, long dNU_GGR23, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR23ByPKData(dayID, operatorID, dNU_GGR23, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR23ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR23, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR23ByPKData(dayID, operatorID, dNU_GGR23, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR23ByPKData(DateTime dayID, string operatorID, long dNU_GGR23, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR23` = @DNU_GGR23  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR23(long dNU_GGR23, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR23` = @DNU_GGR23";
			var parameter_ = Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR23Async(long dNU_GGR23, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR23` = @DNU_GGR23";
			var parameter_ = Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR23
		#region PutDNU_GGR24
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR24ByPK(DateTime dayID, string operatorID, long dNU_GGR24, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR24ByPKData(dayID, operatorID, dNU_GGR24, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR24ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR24, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR24ByPKData(dayID, operatorID, dNU_GGR24, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR24ByPKData(DateTime dayID, string operatorID, long dNU_GGR24, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR24` = @DNU_GGR24  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR24(long dNU_GGR24, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR24` = @DNU_GGR24";
			var parameter_ = Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR24Async(long dNU_GGR24, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR24` = @DNU_GGR24";
			var parameter_ = Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR24
		#region PutDNU_GGR25
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR25ByPK(DateTime dayID, string operatorID, long dNU_GGR25, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR25ByPKData(dayID, operatorID, dNU_GGR25, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR25ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR25, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR25ByPKData(dayID, operatorID, dNU_GGR25, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR25ByPKData(DateTime dayID, string operatorID, long dNU_GGR25, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR25` = @DNU_GGR25  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR25(long dNU_GGR25, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR25` = @DNU_GGR25";
			var parameter_ = Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR25Async(long dNU_GGR25, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR25` = @DNU_GGR25";
			var parameter_ = Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR25
		#region PutDNU_GGR26
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR26ByPK(DateTime dayID, string operatorID, long dNU_GGR26, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR26ByPKData(dayID, operatorID, dNU_GGR26, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR26ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR26, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR26ByPKData(dayID, operatorID, dNU_GGR26, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR26ByPKData(DateTime dayID, string operatorID, long dNU_GGR26, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR26` = @DNU_GGR26  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR26(long dNU_GGR26, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR26` = @DNU_GGR26";
			var parameter_ = Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR26Async(long dNU_GGR26, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR26` = @DNU_GGR26";
			var parameter_ = Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR26
		#region PutDNU_GGR27
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR27ByPK(DateTime dayID, string operatorID, long dNU_GGR27, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR27ByPKData(dayID, operatorID, dNU_GGR27, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR27ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR27, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR27ByPKData(dayID, operatorID, dNU_GGR27, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR27ByPKData(DateTime dayID, string operatorID, long dNU_GGR27, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR27` = @DNU_GGR27  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR27(long dNU_GGR27, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR27` = @DNU_GGR27";
			var parameter_ = Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR27Async(long dNU_GGR27, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR27` = @DNU_GGR27";
			var parameter_ = Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR27
		#region PutDNU_GGR28
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR28ByPK(DateTime dayID, string operatorID, long dNU_GGR28, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR28ByPKData(dayID, operatorID, dNU_GGR28, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR28ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR28, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR28ByPKData(dayID, operatorID, dNU_GGR28, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR28ByPKData(DateTime dayID, string operatorID, long dNU_GGR28, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR28` = @DNU_GGR28  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR28(long dNU_GGR28, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR28` = @DNU_GGR28";
			var parameter_ = Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR28Async(long dNU_GGR28, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR28` = @DNU_GGR28";
			var parameter_ = Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR28
		#region PutDNU_GGR29
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR29ByPK(DateTime dayID, string operatorID, long dNU_GGR29, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR29ByPKData(dayID, operatorID, dNU_GGR29, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR29ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR29, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR29ByPKData(dayID, operatorID, dNU_GGR29, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR29ByPKData(DateTime dayID, string operatorID, long dNU_GGR29, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR29` = @DNU_GGR29  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR29(long dNU_GGR29, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR29` = @DNU_GGR29";
			var parameter_ = Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR29Async(long dNU_GGR29, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR29` = @DNU_GGR29";
			var parameter_ = Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR29
		#region PutDNU_GGR30
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR30ByPK(DateTime dayID, string operatorID, long dNU_GGR30, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR30ByPKData(dayID, operatorID, dNU_GGR30, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutDNU_GGR30ByPKAsync(DateTime dayID, string operatorID, long dNU_GGR30, TransactionManager tm_ = null)
		{
			RepairPutDNU_GGR30ByPKData(dayID, operatorID, dNU_GGR30, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutDNU_GGR30ByPKData(DateTime dayID, string operatorID, long dNU_GGR30, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `DNU_GGR30` = @DNU_GGR30  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutDNU_GGR30(long dNU_GGR30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR30` = @DNU_GGR30";
			var parameter_ = Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutDNU_GGR30Async(long dNU_GGR30, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `DNU_GGR30` = @DNU_GGR30";
			var parameter_ = Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutDNU_GGR30
		#region PutLose10
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10ByPK(DateTime dayID, string operatorID, int lose10, TransactionManager tm_ = null)
		{
			RepairPutLose10ByPKData(dayID, operatorID, lose10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose10ByPKAsync(DateTime dayID, string operatorID, int lose10, TransactionManager tm_ = null)
		{
			RepairPutLose10ByPKData(dayID, operatorID, lose10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose10ByPKData(DateTime dayID, string operatorID, int lose10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose10` = @Lose10  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10(int lose10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10` = @Lose10";
			var parameter_ = Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose10Async(int lose10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10` = @Lose10";
			var parameter_ = Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose10
		#region PutLose10_100
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10_100ByPK(DateTime dayID, string operatorID, int lose10_100, TransactionManager tm_ = null)
		{
			RepairPutLose10_100ByPKData(dayID, operatorID, lose10_100, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose10_100ByPKAsync(DateTime dayID, string operatorID, int lose10_100, TransactionManager tm_ = null)
		{
			RepairPutLose10_100ByPKData(dayID, operatorID, lose10_100, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose10_100ByPKData(DateTime dayID, string operatorID, int lose10_100, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose10_100` = @Lose10_100  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10_100(int lose10_100, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10_100` = @Lose10_100";
			var parameter_ = Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose10_100Async(int lose10_100, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10_100` = @Lose10_100";
			var parameter_ = Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose10_100
		#region PutLose100_500
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose100_500ByPK(DateTime dayID, string operatorID, int lose100_500, TransactionManager tm_ = null)
		{
			RepairPutLose100_500ByPKData(dayID, operatorID, lose100_500, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose100_500ByPKAsync(DateTime dayID, string operatorID, int lose100_500, TransactionManager tm_ = null)
		{
			RepairPutLose100_500ByPKData(dayID, operatorID, lose100_500, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose100_500ByPKData(DateTime dayID, string operatorID, int lose100_500, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose100_500` = @Lose100_500  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose100_500(int lose100_500, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose100_500` = @Lose100_500";
			var parameter_ = Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose100_500Async(int lose100_500, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose100_500` = @Lose100_500";
			var parameter_ = Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose100_500
		#region PutLose500_1000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose500_1000ByPK(DateTime dayID, string operatorID, int lose500_1000, TransactionManager tm_ = null)
		{
			RepairPutLose500_1000ByPKData(dayID, operatorID, lose500_1000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose500_1000ByPKAsync(DateTime dayID, string operatorID, int lose500_1000, TransactionManager tm_ = null)
		{
			RepairPutLose500_1000ByPKData(dayID, operatorID, lose500_1000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose500_1000ByPKData(DateTime dayID, string operatorID, int lose500_1000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose500_1000` = @Lose500_1000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose500_1000(int lose500_1000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose500_1000` = @Lose500_1000";
			var parameter_ = Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose500_1000Async(int lose500_1000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose500_1000` = @Lose500_1000";
			var parameter_ = Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose500_1000
		#region PutLose1000_3000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose1000_3000ByPK(DateTime dayID, string operatorID, int lose1000_3000, TransactionManager tm_ = null)
		{
			RepairPutLose1000_3000ByPKData(dayID, operatorID, lose1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose1000_3000ByPKAsync(DateTime dayID, string operatorID, int lose1000_3000, TransactionManager tm_ = null)
		{
			RepairPutLose1000_3000ByPKData(dayID, operatorID, lose1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose1000_3000ByPKData(DateTime dayID, string operatorID, int lose1000_3000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose1000_3000` = @Lose1000_3000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose1000_3000(int lose1000_3000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose1000_3000` = @Lose1000_3000";
			var parameter_ = Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose1000_3000Async(int lose1000_3000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose1000_3000` = @Lose1000_3000";
			var parameter_ = Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose1000_3000
		#region PutLose3000_5000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose3000_5000ByPK(DateTime dayID, string operatorID, int lose3000_5000, TransactionManager tm_ = null)
		{
			RepairPutLose3000_5000ByPKData(dayID, operatorID, lose3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose3000_5000ByPKAsync(DateTime dayID, string operatorID, int lose3000_5000, TransactionManager tm_ = null)
		{
			RepairPutLose3000_5000ByPKData(dayID, operatorID, lose3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose3000_5000ByPKData(DateTime dayID, string operatorID, int lose3000_5000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose3000_5000` = @Lose3000_5000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose3000_5000(int lose3000_5000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose3000_5000` = @Lose3000_5000";
			var parameter_ = Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose3000_5000Async(int lose3000_5000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose3000_5000` = @Lose3000_5000";
			var parameter_ = Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose3000_5000
		#region PutLose5000_10000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose5000_10000ByPK(DateTime dayID, string operatorID, int lose5000_10000, TransactionManager tm_ = null)
		{
			RepairPutLose5000_10000ByPKData(dayID, operatorID, lose5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose5000_10000ByPKAsync(DateTime dayID, string operatorID, int lose5000_10000, TransactionManager tm_ = null)
		{
			RepairPutLose5000_10000ByPKData(dayID, operatorID, lose5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose5000_10000ByPKData(DateTime dayID, string operatorID, int lose5000_10000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose5000_10000` = @Lose5000_10000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose5000_10000(int lose5000_10000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose5000_10000` = @Lose5000_10000";
			var parameter_ = Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose5000_10000Async(int lose5000_10000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose5000_10000` = @Lose5000_10000";
			var parameter_ = Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose5000_10000
		#region PutLose10000_50000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10000_50000ByPK(DateTime dayID, string operatorID, int lose10000_50000, TransactionManager tm_ = null)
		{
			RepairPutLose10000_50000ByPKData(dayID, operatorID, lose10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose10000_50000ByPKAsync(DateTime dayID, string operatorID, int lose10000_50000, TransactionManager tm_ = null)
		{
			RepairPutLose10000_50000ByPKData(dayID, operatorID, lose10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose10000_50000ByPKData(DateTime dayID, string operatorID, int lose10000_50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose10000_50000` = @Lose10000_50000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose10000_50000(int lose10000_50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10000_50000` = @Lose10000_50000";
			var parameter_ = Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose10000_50000Async(int lose10000_50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose10000_50000` = @Lose10000_50000";
			var parameter_ = Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose10000_50000
		#region PutLose50000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose50000ByPK(DateTime dayID, string operatorID, int lose50000, TransactionManager tm_ = null)
		{
			RepairPutLose50000ByPKData(dayID, operatorID, lose50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutLose50000ByPKAsync(DateTime dayID, string operatorID, int lose50000, TransactionManager tm_ = null)
		{
			RepairPutLose50000ByPKData(dayID, operatorID, lose50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutLose50000ByPKData(DateTime dayID, string operatorID, int lose50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Lose50000` = @Lose50000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutLose50000(int lose50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose50000` = @Lose50000";
			var parameter_ = Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutLose50000Async(int lose50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Lose50000` = @Lose50000";
			var parameter_ = Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutLose50000
		#region PutWin10
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10ByPK(DateTime dayID, string operatorID, int win10, TransactionManager tm_ = null)
		{
			RepairPutWin10ByPKData(dayID, operatorID, win10, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin10ByPKAsync(DateTime dayID, string operatorID, int win10, TransactionManager tm_ = null)
		{
			RepairPutWin10ByPKData(dayID, operatorID, win10, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin10ByPKData(DateTime dayID, string operatorID, int win10, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win10` = @Win10  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10(int win10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10` = @Win10";
			var parameter_ = Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin10Async(int win10, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10` = @Win10";
			var parameter_ = Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin10
		#region PutWin10_100
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10_100ByPK(DateTime dayID, string operatorID, int win10_100, TransactionManager tm_ = null)
		{
			RepairPutWin10_100ByPKData(dayID, operatorID, win10_100, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin10_100ByPKAsync(DateTime dayID, string operatorID, int win10_100, TransactionManager tm_ = null)
		{
			RepairPutWin10_100ByPKData(dayID, operatorID, win10_100, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin10_100ByPKData(DateTime dayID, string operatorID, int win10_100, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win10_100` = @Win10_100  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10_100(int win10_100, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10_100` = @Win10_100";
			var parameter_ = Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin10_100Async(int win10_100, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10_100` = @Win10_100";
			var parameter_ = Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin10_100
		#region PutWin100_500
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin100_500ByPK(DateTime dayID, string operatorID, int win100_500, TransactionManager tm_ = null)
		{
			RepairPutWin100_500ByPKData(dayID, operatorID, win100_500, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin100_500ByPKAsync(DateTime dayID, string operatorID, int win100_500, TransactionManager tm_ = null)
		{
			RepairPutWin100_500ByPKData(dayID, operatorID, win100_500, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin100_500ByPKData(DateTime dayID, string operatorID, int win100_500, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win100_500` = @Win100_500  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin100_500(int win100_500, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win100_500` = @Win100_500";
			var parameter_ = Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin100_500Async(int win100_500, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win100_500` = @Win100_500";
			var parameter_ = Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin100_500
		#region PutWin500_1000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin500_1000ByPK(DateTime dayID, string operatorID, int win500_1000, TransactionManager tm_ = null)
		{
			RepairPutWin500_1000ByPKData(dayID, operatorID, win500_1000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin500_1000ByPKAsync(DateTime dayID, string operatorID, int win500_1000, TransactionManager tm_ = null)
		{
			RepairPutWin500_1000ByPKData(dayID, operatorID, win500_1000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin500_1000ByPKData(DateTime dayID, string operatorID, int win500_1000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win500_1000` = @Win500_1000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin500_1000(int win500_1000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win500_1000` = @Win500_1000";
			var parameter_ = Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin500_1000Async(int win500_1000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win500_1000` = @Win500_1000";
			var parameter_ = Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin500_1000
		#region PutWin1000_3000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin1000_3000ByPK(DateTime dayID, string operatorID, int win1000_3000, TransactionManager tm_ = null)
		{
			RepairPutWin1000_3000ByPKData(dayID, operatorID, win1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin1000_3000ByPKAsync(DateTime dayID, string operatorID, int win1000_3000, TransactionManager tm_ = null)
		{
			RepairPutWin1000_3000ByPKData(dayID, operatorID, win1000_3000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin1000_3000ByPKData(DateTime dayID, string operatorID, int win1000_3000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win1000_3000` = @Win1000_3000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin1000_3000(int win1000_3000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win1000_3000` = @Win1000_3000";
			var parameter_ = Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin1000_3000Async(int win1000_3000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win1000_3000` = @Win1000_3000";
			var parameter_ = Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin1000_3000
		#region PutWin3000_5000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin3000_5000ByPK(DateTime dayID, string operatorID, int win3000_5000, TransactionManager tm_ = null)
		{
			RepairPutWin3000_5000ByPKData(dayID, operatorID, win3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin3000_5000ByPKAsync(DateTime dayID, string operatorID, int win3000_5000, TransactionManager tm_ = null)
		{
			RepairPutWin3000_5000ByPKData(dayID, operatorID, win3000_5000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin3000_5000ByPKData(DateTime dayID, string operatorID, int win3000_5000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win3000_5000` = @Win3000_5000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin3000_5000(int win3000_5000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win3000_5000` = @Win3000_5000";
			var parameter_ = Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin3000_5000Async(int win3000_5000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win3000_5000` = @Win3000_5000";
			var parameter_ = Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin3000_5000
		#region PutWin5000_10000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin5000_10000ByPK(DateTime dayID, string operatorID, int win5000_10000, TransactionManager tm_ = null)
		{
			RepairPutWin5000_10000ByPKData(dayID, operatorID, win5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin5000_10000ByPKAsync(DateTime dayID, string operatorID, int win5000_10000, TransactionManager tm_ = null)
		{
			RepairPutWin5000_10000ByPKData(dayID, operatorID, win5000_10000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin5000_10000ByPKData(DateTime dayID, string operatorID, int win5000_10000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win5000_10000` = @Win5000_10000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin5000_10000(int win5000_10000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win5000_10000` = @Win5000_10000";
			var parameter_ = Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin5000_10000Async(int win5000_10000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win5000_10000` = @Win5000_10000";
			var parameter_ = Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin5000_10000
		#region PutWin10000_50000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10000_50000ByPK(DateTime dayID, string operatorID, int win10000_50000, TransactionManager tm_ = null)
		{
			RepairPutWin10000_50000ByPKData(dayID, operatorID, win10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin10000_50000ByPKAsync(DateTime dayID, string operatorID, int win10000_50000, TransactionManager tm_ = null)
		{
			RepairPutWin10000_50000ByPKData(dayID, operatorID, win10000_50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin10000_50000ByPKData(DateTime dayID, string operatorID, int win10000_50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win10000_50000` = @Win10000_50000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin10000_50000(int win10000_50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10000_50000` = @Win10000_50000";
			var parameter_ = Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin10000_50000Async(int win10000_50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win10000_50000` = @Win10000_50000";
			var parameter_ = Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin10000_50000
		#region PutWin50000
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin50000ByPK(DateTime dayID, string operatorID, int win50000, TransactionManager tm_ = null)
		{
			RepairPutWin50000ByPKData(dayID, operatorID, win50000, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutWin50000ByPKAsync(DateTime dayID, string operatorID, int win50000, TransactionManager tm_ = null)
		{
			RepairPutWin50000ByPKData(dayID, operatorID, win50000, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutWin50000ByPKData(DateTime dayID, string operatorID, int win50000, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `Win50000` = @Win50000  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutWin50000(int win50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win50000` = @Win50000";
			var parameter_ = Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutWin50000Async(int win50000, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `Win50000` = @Win50000";
			var parameter_ = Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutWin50000
		#region PutTotalBalanceCalcTime
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutTotalBalanceCalcTimeByPK(DateTime dayID, string operatorID, DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			RepairPutTotalBalanceCalcTimeByPKData(dayID, operatorID, totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutTotalBalanceCalcTimeByPKAsync(DateTime dayID, string operatorID, DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			RepairPutTotalBalanceCalcTimeByPKData(dayID, operatorID, totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutTotalBalanceCalcTimeByPKData(DateTime dayID, string operatorID, DateTime totalBalanceCalcTime, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `TotalBalanceCalcTime` = @TotalBalanceCalcTime  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutTotalBalanceCalcTime(DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `TotalBalanceCalcTime` = @TotalBalanceCalcTime";
			var parameter_ = Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `TotalBalanceCalcTime` = @TotalBalanceCalcTime";
			var parameter_ = Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutTotalBalanceCalcTime
		#region PutBetD1
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetD1ByPK(DateTime dayID, string operatorID, float betD1, TransactionManager tm_ = null)
		{
			RepairPutBetD1ByPKData(dayID, operatorID, betD1, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutBetD1ByPKAsync(DateTime dayID, string operatorID, float betD1, TransactionManager tm_ = null)
		{
			RepairPutBetD1ByPKData(dayID, operatorID, betD1, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutBetD1ByPKData(DateTime dayID, string operatorID, float betD1, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `BetD1` = @BetD1  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutBetD1(float betD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetD1` = @BetD1";
			var parameter_ = Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutBetD1Async(float betD1, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `BetD1` = @BetD1";
			var parameter_ = Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutBetD1
		#region PutRMPBet
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRMPBetByPK(DateTime dayID, string operatorID, float rMPBet, TransactionManager tm_ = null)
		{
			RepairPutRMPBetByPKData(dayID, operatorID, rMPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRMPBetByPKAsync(DateTime dayID, string operatorID, float rMPBet, TransactionManager tm_ = null)
		{
			RepairPutRMPBetByPKData(dayID, operatorID, rMPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRMPBetByPKData(DateTime dayID, string operatorID, float rMPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RMPBet` = @RMPBet  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRMPBet(float rMPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RMPBet` = @RMPBet";
			var parameter_ = Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRMPBetAsync(float rMPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RMPBet` = @RMPBet";
			var parameter_ = Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRMPBet
		#region PutRSPBet
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRSPBetByPK(DateTime dayID, string operatorID, float rSPBet, TransactionManager tm_ = null)
		{
			RepairPutRSPBetByPKData(dayID, operatorID, rSPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRSPBetByPKAsync(DateTime dayID, string operatorID, float rSPBet, TransactionManager tm_ = null)
		{
			RepairPutRSPBetByPKData(dayID, operatorID, rSPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRSPBetByPKData(DateTime dayID, string operatorID, float rSPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RSPBet` = @RSPBet  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRSPBet(float rSPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RSPBet` = @RSPBet";
			var parameter_ = Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRSPBetAsync(float rSPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RSPBet` = @RSPBet";
			var parameter_ = Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRSPBet
		#region PutPSPBet
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPSPBetByPK(DateTime dayID, string operatorID, float pSPBet, TransactionManager tm_ = null)
		{
			RepairPutPSPBetByPKData(dayID, operatorID, pSPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPSPBetByPKAsync(DateTime dayID, string operatorID, float pSPBet, TransactionManager tm_ = null)
		{
			RepairPutPSPBetByPKData(dayID, operatorID, pSPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPSPBetByPKData(DateTime dayID, string operatorID, float pSPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PSPBet` = @PSPBet  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPSPBet(float pSPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PSPBet` = @PSPBet";
			var parameter_ = Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPSPBetAsync(float pSPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PSPBet` = @PSPBet";
			var parameter_ = Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPSPBet
		#region PutPMPBet
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPMPBetByPK(DateTime dayID, string operatorID, float pMPBet, TransactionManager tm_ = null)
		{
			RepairPutPMPBetByPKData(dayID, operatorID, pMPBet, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutPMPBetByPKAsync(DateTime dayID, string operatorID, float pMPBet, TransactionManager tm_ = null)
		{
			RepairPutPMPBetByPKData(dayID, operatorID, pMPBet, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutPMPBetByPKData(DateTime dayID, string operatorID, float pMPBet, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `PMPBet` = @PMPBet  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutPMPBet(float pMPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PMPBet` = @PMPBet";
			var parameter_ = Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutPMPBetAsync(float pMPBet, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `PMPBet` = @PMPBet";
			var parameter_ = Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutPMPBet
		#region PutRecDate
		/// <summary>
		/// 按主键更新列数据
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRecDateByPK(DateTime dayID, string operatorID, DateTime recDate, TransactionManager tm_ = null)
		{
			RepairPutRecDateByPKData(dayID, operatorID, recDate, out string sql_, out List<MySqlParameter> paras_);
			return Database.ExecSqlNonQuery(sql_, paras_, tm_);
		}
		public async Task<int> PutRecDateByPKAsync(DateTime dayID, string operatorID, DateTime recDate, TransactionManager tm_ = null)
		{
			RepairPutRecDateByPKData(dayID, operatorID, recDate, out string sql_, out List<MySqlParameter> paras_);
			return await Database.ExecSqlNonQueryAsync(sql_, paras_, tm_);
		}
		private void RepairPutRecDateByPKData(DateTime dayID, string operatorID, DateTime recDate, out string sql_, out List<MySqlParameter> paras_)
		{
			sql_ = $"UPDATE {TableName} SET `RecDate` = @RecDate  WHERE `DayID` = @DayID AND `OperatorID` = @OperatorID";
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime),
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
	 
		/// <summary>
		/// 更新一列数据
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>受影响的行数</return>
		public int PutRecDate(DateTime recDate, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RecDate` = @RecDate";
			var parameter_ = Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime);
			return Database.ExecSqlNonQuery(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		public async Task<int> PutRecDateAsync(DateTime recDate, TransactionManager tm_ = null)
		{
			string sql_ = $"UPDATE {TableName} SET `RecDate` = @RecDate";
			var parameter_ = Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime);
			return await Database.ExecSqlNonQueryAsync(sql_, new MySqlParameter[] { parameter_ }, tm_);
		}
		#endregion // PutRecDate
		#endregion // PutXXX
		#endregion // Put
	   
		#region Set
		
		/// <summary>
		/// 插入或者更新数据
		/// </summary>
		/// <param name = "item">要更新的实体对象</param>
		/// <param name="tm">事务管理对象</param>
		/// <return>true:插入操作；false:更新操作</return>
		public bool Set(Sr_oper_dayEO item, TransactionManager tm = null)
		{
			bool ret = true;
			if(GetByPK(item.DayID, item.OperatorID) == null)
			{
				Add(item, tm);
			}
			else
			{
				Put(item, tm);
				ret = false;
			}
			return ret;
		}
		public async Task<bool> SetAsync(Sr_oper_dayEO item, TransactionManager tm = null)
		{
			bool ret = true;
			if(GetByPK(item.DayID, item.OperatorID) == null)
			{
				await AddAsync(item, tm);
			}
			else
			{
				await PutAsync(item, tm);
				ret = false;
			}
			return ret;
		}
		
		#endregion // Set
		
		#region Get
		#region GetByPK
		/// <summary>
		/// 按 PK（主键） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <param name="isForUpdate_">是否使用FOR UPDATE锁行</param>
		/// <return></return>
		public Sr_oper_dayEO GetByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null, bool isForUpdate_ = false)
		{
			RepairGetByPKData(dayID, operatorID, out string sql_, out List<MySqlParameter> paras_, isForUpdate_, tm_);
			return Database.ExecSqlSingle(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<Sr_oper_dayEO> GetByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null, bool isForUpdate_ = false)
		{
			RepairGetByPKData(dayID, operatorID, out string sql_, out List<MySqlParameter> paras_, isForUpdate_, tm_);
			return await Database.ExecSqlSingleAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		private void RepairGetByPKData(DateTime dayID, string operatorID, out string sql_, out List<MySqlParameter> paras_, bool isForUpdate_ = false, TransactionManager tm_ = null)
		{
			sql_ = BuildSelectSQL("`DayID` = @DayID AND `OperatorID` = @OperatorID", 0, null, null, isForUpdate_);
			paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
		}
		#endregion // GetByPK
		
		#region GetXXXByPK
		
		/// <summary>
		/// 按主键查询 DayID（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public DateTime GetDayIDByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)GetScalar("`DayID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<DateTime> GetDayIDByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)await GetScalarAsync("`DayID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 OperatorID（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public string GetOperatorIDByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)GetScalar("`OperatorID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<string> GetOperatorIDByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)await GetScalarAsync("`OperatorID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CountryID（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public string GetCountryIDByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)GetScalar("`CountryID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<string> GetCountryIDByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)await GetScalarAsync("`CountryID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CurrencyID（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public string GetCurrencyIDByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)GetScalar("`CurrencyID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<string> GetCurrencyIDByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (string)await GetScalarAsync("`CurrencyID`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetNewUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`NewUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetNewUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`NewUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 LoginUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLoginUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`LoginUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLoginUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`LoginUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetRegUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`RegUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetRegUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`RegUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetCashUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`CashUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetCashUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`CashUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetPayUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`PayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetPayUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`PayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BetUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetBetUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`BetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetBetUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`BetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 TotalBalance（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetTotalBalanceByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`TotalBalance`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetTotalBalanceByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`TotalBalance`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BetAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBetAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BetAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBetAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BetAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BetBonus（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBetBonusByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BetBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBetBonusByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BetBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 WinBonus（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetWinBonusByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`WinBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetWinBonusByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`WinBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewBetUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetNewBetUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`NewBetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetNewBetUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`NewBetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserBetAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserBetAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserBetAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserBetAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserBetAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserBetBonus（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserBetBonusByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserBetBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserBetBonusByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserBetBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserWinBonus（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserWinBonusByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserWinBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserWinBonusByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserWinBonus`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 WinAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetWinAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`WinAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetWinAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`WinAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayNotBetUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetPayNotBetUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`PayNotBetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetPayNotBetUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`PayNotBetUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DOU_FirstPayUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetDOU_FirstPayUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`DOU_FirstPayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetDOU_FirstPayUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`DOU_FirstPayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_RepayUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetDNU_RepayUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`DNU_RepayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetDNU_RepayUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`DNU_RepayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RepeatConsumersD1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetRepeatConsumersD1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`RepeatConsumersD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetRepeatConsumersD1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`RepeatConsumersD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RepeatConsumersD5（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetRepeatConsumersD5ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`RepeatConsumersD5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetRepeatConsumersD5ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`RepeatConsumersD5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RepeatConsumersD10（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetRepeatConsumersD10ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`RepeatConsumersD10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetRepeatConsumersD10ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`RepeatConsumersD10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RepeatConsumersD15（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetRepeatConsumersD15ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`RepeatConsumersD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetRepeatConsumersD15ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`RepeatConsumersD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_FirstPayAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_FirstPayAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_FirstPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_FirstPayAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_FirstPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DOU_FirstPayAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDOU_FirstPayAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DOU_FirstPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDOU_FirstPayAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DOU_FirstPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DOU_FirstPayTotalAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDOU_FirstPayTotalAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DOU_FirstPayTotalAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDOU_FirstPayTotalAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DOU_FirstPayTotalAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewCashUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetNewCashUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`NewCashUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetNewCashUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`NewCashUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewPayUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetNewPayUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`NewPayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetNewPayUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`NewPayUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayOwnFee（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public decimal GetPayOwnFeeByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)GetScalar("`PayOwnFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<decimal> GetPayOwnFeeByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)await GetScalarAsync("`PayOwnFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayUserFee（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public decimal GetPayUserFeeByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)GetScalar("`PayUserFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<decimal> GetPayUserFeeByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)await GetScalarAsync("`PayUserFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserPayAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserPayAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserPayAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserPayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetPayAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`PayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetPayAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`PayAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashOwnFee（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public decimal GetCashOwnFeeByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)GetScalar("`CashOwnFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<decimal> GetCashOwnFeeByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)await GetScalarAsync("`CashOwnFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashUserFee（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public decimal GetCashUserFeeByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)GetScalar("`CashUserFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<decimal> GetCashUserFeeByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (decimal)await GetScalarAsync("`CashUserFee`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserCashAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserCashAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserCashAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserCashAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserCashAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewUserWinAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetNewUserWinAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`NewUserWinAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetNewUserWinAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`NewUserWinAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetCashAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`CashAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetCashAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`CashAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BonusRecUsers（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetBonusRecUsersByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`BonusRecUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetBonusRecUsersByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`BonusRecUsers`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BonusAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBonusAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BonusAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBonusAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BonusAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BonusUseAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBonusUseAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BonusUseAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBonusUseAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BonusUseAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BonusRemainAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBonusRemainAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BonusRemainAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBonusRemainAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BonusRemainAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BonusUnlockAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetBonusUnlockAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`BonusUnlockAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetBonusUnlockAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`BonusUnlockAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashAuditAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetCashAuditAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`CashAuditAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetCashAuditAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`CashAuditAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashRefuseAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetCashRefuseAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`CashRefuseAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetCashRefuseAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`CashRefuseAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashPassAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetCashPassAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`CashPassAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetCashPassAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`CashPassAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 CashFailAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetCashFailAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`CashFailAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetCashFailAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`CashFailAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 ProfitAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetProfitAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`ProfitAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetProfitAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`ProfitAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PromotionFeeAmount（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetPromotionFeeAmountByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`PromotionFeeAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetPromotionFeeAmountByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`PromotionFeeAmount`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 NewARUP（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetNewARUPByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`NewARUP`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetNewARUPByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`NewARUP`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 ARUP（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetARUPByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`ARUP`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetARUPByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`ARUP`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD3（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD3ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD3ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD7（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD7ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD7ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD14（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD14ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD14ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD15（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD15ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD15ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD20（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD20ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD20ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RetentionD30（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRetentionD30ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRetentionD30ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegRetentionD1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRegRetentionD1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RegRetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRegRetentionD1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RegRetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegRetentionD3（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRegRetentionD3ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RegRetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRegRetentionD3ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RegRetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegRetentionD7（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRegRetentionD7ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RegRetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRegRetentionD7ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RegRetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegRetentionD15（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRegRetentionD15ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RegRetentionD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRegRetentionD15ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RegRetentionD15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RegRetentionD30（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRegRetentionD30ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RegRetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRegRetentionD30ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RegRetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD2（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD2ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD2`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD2ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD2`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD3（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD3ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD3ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD4（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD4ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD4`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD4ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD4`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD5（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD5ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD5ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD6（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD6ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD6`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD6ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD6`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD7（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD7ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD7ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD14（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD14ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD14ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD20（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD20ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD20ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PayRetentionD30（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPayRetentionD30ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PayRetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPayRetentionD30ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PayRetentionD30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR2（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR2ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR2`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR2ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR2`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR3（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR3ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR3ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR3`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR4（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR4ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR4`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR4ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR4`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR5（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR5ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR5ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR5`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR6（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR6ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR6`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR6ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR6`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR7（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR7ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR7ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR7`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR8（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR8ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR8`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR8ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR8`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR9（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR9ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR9`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR9ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR9`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR10（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR10ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR10ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR11（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR11ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR11`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR11ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR11`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR12（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR12ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR12`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR12ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR12`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR13（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR13ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR13`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR13ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR13`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR14（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR14ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR14ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR14`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR15（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR15ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR15ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR15`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR16（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR16ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR16`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR16ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR16`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR17（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR17ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR17`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR17ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR17`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR18（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR18ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR18`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR18ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR18`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR19（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR19ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR19`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR19ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR19`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR20（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR20ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR20ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR20`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR21（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR21ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR21`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR21ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR21`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR22（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR22ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR22`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR22ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR22`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR23（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR23ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR23`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR23ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR23`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR24（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR24ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR24`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR24ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR24`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR25（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR25ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR25`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR25ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR25`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR26（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR26ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR26`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR26ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR26`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR27（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR27ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR27`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR27ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR27`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR28（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR28ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR28`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR28ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR28`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR29（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR29ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR29`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR29ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR29`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 DNU_GGR30（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public long GetDNU_GGR30ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)GetScalar("`DNU_GGR30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<long> GetDNU_GGR30ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (long)await GetScalarAsync("`DNU_GGR30`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose10（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose10ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose10ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose10_100（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose10_100ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose10_100`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose10_100ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose10_100`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose100_500（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose100_500ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose100_500`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose100_500ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose100_500`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose500_1000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose500_1000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose500_1000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose500_1000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose500_1000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose1000_3000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose1000_3000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose1000_3000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose1000_3000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose1000_3000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose3000_5000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose3000_5000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose3000_5000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose3000_5000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose3000_5000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose5000_10000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose5000_10000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose5000_10000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose5000_10000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose5000_10000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose10000_50000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose10000_50000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose10000_50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose10000_50000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose10000_50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Lose50000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetLose50000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Lose50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetLose50000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Lose50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win10（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin10ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin10ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win10`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win10_100（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin10_100ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win10_100`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin10_100ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win10_100`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win100_500（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin100_500ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win100_500`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin100_500ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win100_500`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win500_1000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin500_1000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win500_1000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin500_1000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win500_1000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win1000_3000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin1000_3000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win1000_3000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin1000_3000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win1000_3000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win3000_5000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin3000_5000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win3000_5000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin3000_5000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win3000_5000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win5000_10000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin5000_10000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win5000_10000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin5000_10000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win5000_10000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win10000_50000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin10000_50000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win10000_50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin10000_50000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win10000_50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 Win50000（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public int GetWin50000ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)GetScalar("`Win50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<int> GetWin50000ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (int)await GetScalarAsync("`Win50000`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 TotalBalanceCalcTime（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public DateTime GetTotalBalanceCalcTimeByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)GetScalar("`TotalBalanceCalcTime`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<DateTime> GetTotalBalanceCalcTimeByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)await GetScalarAsync("`TotalBalanceCalcTime`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 BetD1（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetBetD1ByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`BetD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetBetD1ByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`BetD1`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RMPBet（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRMPBetByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RMPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRMPBetByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RMPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RSPBet（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetRSPBetByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`RSPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetRSPBetByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`RSPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PSPBet（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPSPBetByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PSPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPSPBetByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PSPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 PMPBet（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public float GetPMPBetByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)GetScalar("`PMPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<float> GetPMPBetByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (float)await GetScalarAsync("`PMPBet`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		
		/// <summary>
		/// 按主键查询 RecDate（字段）
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return></return>
		public DateTime GetRecDateByPK(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)GetScalar("`RecDate`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		public async Task<DateTime> GetRecDateByPKAsync(DateTime dayID, string operatorID, TransactionManager tm_ = null)
		{
			var paras_ = new List<MySqlParameter>() 
			{
				Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date),
				Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar),
			};
			return (DateTime)await GetScalarAsync("`RecDate`", "`DayID` = @DayID AND `OperatorID` = @OperatorID", paras_, tm_);
		}
		#endregion // GetXXXByPK
		#region GetByXXX
		#region GetByDayID
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID)
		{
			return GetByDayID(dayID, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID)
		{
			return await GetByDayIDAsync(dayID, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, TransactionManager tm_)
		{
			return GetByDayID(dayID, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, TransactionManager tm_)
		{
			return await GetByDayIDAsync(dayID, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, int top_)
		{
			return GetByDayID(dayID, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, int top_)
		{
			return await GetByDayIDAsync(dayID, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, int top_, TransactionManager tm_)
		{
			return GetByDayID(dayID, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, int top_, TransactionManager tm_)
		{
			return await GetByDayIDAsync(dayID, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, string sort_)
		{
			return GetByDayID(dayID, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, string sort_)
		{
			return await GetByDayIDAsync(dayID, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, string sort_, TransactionManager tm_)
		{
			return GetByDayID(dayID, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, string sort_, TransactionManager tm_)
		{
			return await GetByDayIDAsync(dayID, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DayID（字段） 查询
		/// </summary>
		/// /// <param name = "dayID">统计日</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDayID(DateTime dayID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DayID` = @DayID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDayIDAsync(DateTime dayID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DayID` = @DayID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DayID", dayID, MySqlDbType.Date));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDayID
		#region GetByOperatorID
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID)
		{
			return GetByOperatorID(operatorID, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID)
		{
			return await GetByOperatorIDAsync(operatorID, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, TransactionManager tm_)
		{
			return GetByOperatorID(operatorID, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, TransactionManager tm_)
		{
			return await GetByOperatorIDAsync(operatorID, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, int top_)
		{
			return GetByOperatorID(operatorID, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, int top_)
		{
			return await GetByOperatorIDAsync(operatorID, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, int top_, TransactionManager tm_)
		{
			return GetByOperatorID(operatorID, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, int top_, TransactionManager tm_)
		{
			return await GetByOperatorIDAsync(operatorID, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, string sort_)
		{
			return GetByOperatorID(operatorID, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, string sort_)
		{
			return await GetByOperatorIDAsync(operatorID, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, string sort_, TransactionManager tm_)
		{
			return GetByOperatorID(operatorID, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, string sort_, TransactionManager tm_)
		{
			return await GetByOperatorIDAsync(operatorID, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 OperatorID（字段） 查询
		/// </summary>
		/// /// <param name = "operatorID">运营商编码</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByOperatorID(string operatorID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`OperatorID` = @OperatorID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByOperatorIDAsync(string operatorID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`OperatorID` = @OperatorID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@OperatorID", operatorID, MySqlDbType.VarChar));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByOperatorID
		#region GetByCountryID
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID)
		{
			return GetByCountryID(countryID, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID)
		{
			return await GetByCountryIDAsync(countryID, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, TransactionManager tm_)
		{
			return GetByCountryID(countryID, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, TransactionManager tm_)
		{
			return await GetByCountryIDAsync(countryID, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, int top_)
		{
			return GetByCountryID(countryID, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, int top_)
		{
			return await GetByCountryIDAsync(countryID, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, int top_, TransactionManager tm_)
		{
			return GetByCountryID(countryID, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, int top_, TransactionManager tm_)
		{
			return await GetByCountryIDAsync(countryID, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, string sort_)
		{
			return GetByCountryID(countryID, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, string sort_)
		{
			return await GetByCountryIDAsync(countryID, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, string sort_, TransactionManager tm_)
		{
			return GetByCountryID(countryID, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, string sort_, TransactionManager tm_)
		{
			return await GetByCountryIDAsync(countryID, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CountryID（字段） 查询
		/// </summary>
		/// /// <param name = "countryID">国家编码ISO 3166-1三位字母</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCountryID(string countryID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL(countryID != null ? "`CountryID` = @CountryID" : "`CountryID` IS NULL", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			if (countryID != null)
				paras_.Add(Database.CreateInParameter("@CountryID", countryID, MySqlDbType.VarChar));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCountryIDAsync(string countryID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL(countryID != null ? "`CountryID` = @CountryID" : "`CountryID` IS NULL", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			if (countryID != null)
				paras_.Add(Database.CreateInParameter("@CountryID", countryID, MySqlDbType.VarChar));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCountryID
		#region GetByCurrencyID
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID)
		{
			return GetByCurrencyID(currencyID, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID)
		{
			return await GetByCurrencyIDAsync(currencyID, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, TransactionManager tm_)
		{
			return GetByCurrencyID(currencyID, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, TransactionManager tm_)
		{
			return await GetByCurrencyIDAsync(currencyID, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, int top_)
		{
			return GetByCurrencyID(currencyID, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, int top_)
		{
			return await GetByCurrencyIDAsync(currencyID, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, int top_, TransactionManager tm_)
		{
			return GetByCurrencyID(currencyID, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, int top_, TransactionManager tm_)
		{
			return await GetByCurrencyIDAsync(currencyID, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, string sort_)
		{
			return GetByCurrencyID(currencyID, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, string sort_)
		{
			return await GetByCurrencyIDAsync(currencyID, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, string sort_, TransactionManager tm_)
		{
			return GetByCurrencyID(currencyID, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, string sort_, TransactionManager tm_)
		{
			return await GetByCurrencyIDAsync(currencyID, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CurrencyID（字段） 查询
		/// </summary>
		/// /// <param name = "currencyID">货币类型（货币缩写USD）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCurrencyID(string currencyID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CurrencyID` = @CurrencyID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCurrencyIDAsync(string currencyID, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CurrencyID` = @CurrencyID", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CurrencyID", currencyID, MySqlDbType.VarChar));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCurrencyID
		#region GetByNewUsers
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers)
		{
			return GetByNewUsers(newUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers)
		{
			return await GetByNewUsersAsync(newUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, TransactionManager tm_)
		{
			return GetByNewUsers(newUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, TransactionManager tm_)
		{
			return await GetByNewUsersAsync(newUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, int top_)
		{
			return GetByNewUsers(newUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, int top_)
		{
			return await GetByNewUsersAsync(newUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, int top_, TransactionManager tm_)
		{
			return GetByNewUsers(newUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, int top_, TransactionManager tm_)
		{
			return await GetByNewUsersAsync(newUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, string sort_)
		{
			return GetByNewUsers(newUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, string sort_)
		{
			return await GetByNewUsersAsync(newUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, string sort_, TransactionManager tm_)
		{
			return GetByNewUsers(newUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, string sort_, TransactionManager tm_)
		{
			return await GetByNewUsersAsync(newUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newUsers">新增用户数DNU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUsers(int newUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUsers` = @NewUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUsersAsync(int newUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUsers` = @NewUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUsers", newUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUsers
		#region GetByLoginUsers
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers)
		{
			return GetByLoginUsers(loginUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers)
		{
			return await GetByLoginUsersAsync(loginUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, TransactionManager tm_)
		{
			return GetByLoginUsers(loginUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, TransactionManager tm_)
		{
			return await GetByLoginUsersAsync(loginUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, int top_)
		{
			return GetByLoginUsers(loginUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, int top_)
		{
			return await GetByLoginUsersAsync(loginUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, int top_, TransactionManager tm_)
		{
			return GetByLoginUsers(loginUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, int top_, TransactionManager tm_)
		{
			return await GetByLoginUsersAsync(loginUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, string sort_)
		{
			return GetByLoginUsers(loginUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, string sort_)
		{
			return await GetByLoginUsersAsync(loginUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, string sort_, TransactionManager tm_)
		{
			return GetByLoginUsers(loginUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, string sort_, TransactionManager tm_)
		{
			return await GetByLoginUsersAsync(loginUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 LoginUsers（字段） 查询
		/// </summary>
		/// /// <param name = "loginUsers">登录用户DAU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLoginUsers(int loginUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`LoginUsers` = @LoginUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLoginUsersAsync(int loginUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`LoginUsers` = @LoginUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@LoginUsers", loginUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLoginUsers
		#region GetByRegUsers
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers)
		{
			return GetByRegUsers(regUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers)
		{
			return await GetByRegUsersAsync(regUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, TransactionManager tm_)
		{
			return GetByRegUsers(regUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, TransactionManager tm_)
		{
			return await GetByRegUsersAsync(regUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, int top_)
		{
			return GetByRegUsers(regUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, int top_)
		{
			return await GetByRegUsersAsync(regUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, int top_, TransactionManager tm_)
		{
			return GetByRegUsers(regUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, int top_, TransactionManager tm_)
		{
			return await GetByRegUsersAsync(regUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, string sort_)
		{
			return GetByRegUsers(regUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, string sort_)
		{
			return await GetByRegUsersAsync(regUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, string sort_, TransactionManager tm_)
		{
			return GetByRegUsers(regUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, string sort_, TransactionManager tm_)
		{
			return await GetByRegUsersAsync(regUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegUsers（字段） 查询
		/// </summary>
		/// /// <param name = "regUsers">注册用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegUsers(int regUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegUsers` = @RegUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegUsersAsync(int regUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegUsers` = @RegUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegUsers", regUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegUsers
		#region GetByCashUsers
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers)
		{
			return GetByCashUsers(cashUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers)
		{
			return await GetByCashUsersAsync(cashUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, TransactionManager tm_)
		{
			return GetByCashUsers(cashUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, TransactionManager tm_)
		{
			return await GetByCashUsersAsync(cashUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, int top_)
		{
			return GetByCashUsers(cashUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, int top_)
		{
			return await GetByCashUsersAsync(cashUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, int top_, TransactionManager tm_)
		{
			return GetByCashUsers(cashUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, int top_, TransactionManager tm_)
		{
			return await GetByCashUsersAsync(cashUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, string sort_)
		{
			return GetByCashUsers(cashUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, string sort_)
		{
			return await GetByCashUsersAsync(cashUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, string sort_, TransactionManager tm_)
		{
			return GetByCashUsers(cashUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, string sort_, TransactionManager tm_)
		{
			return await GetByCashUsersAsync(cashUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "cashUsers">提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUsers(int cashUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashUsers` = @CashUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUsersAsync(int cashUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashUsers` = @CashUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUsers", cashUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashUsers
		#region GetByPayUsers
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers)
		{
			return GetByPayUsers(payUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers)
		{
			return await GetByPayUsersAsync(payUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, TransactionManager tm_)
		{
			return GetByPayUsers(payUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, TransactionManager tm_)
		{
			return await GetByPayUsersAsync(payUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, int top_)
		{
			return GetByPayUsers(payUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, int top_)
		{
			return await GetByPayUsersAsync(payUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, int top_, TransactionManager tm_)
		{
			return GetByPayUsers(payUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, int top_, TransactionManager tm_)
		{
			return await GetByPayUsersAsync(payUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, string sort_)
		{
			return GetByPayUsers(payUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, string sort_)
		{
			return await GetByPayUsersAsync(payUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, string sort_, TransactionManager tm_)
		{
			return GetByPayUsers(payUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, string sort_, TransactionManager tm_)
		{
			return await GetByPayUsersAsync(payUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payUsers">充值用户数PU</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUsers(int payUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayUsers` = @PayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUsersAsync(int payUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayUsers` = @PayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUsers", payUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayUsers
		#region GetByBetUsers
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers)
		{
			return GetByBetUsers(betUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers)
		{
			return await GetByBetUsersAsync(betUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, TransactionManager tm_)
		{
			return GetByBetUsers(betUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, TransactionManager tm_)
		{
			return await GetByBetUsersAsync(betUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, int top_)
		{
			return GetByBetUsers(betUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, int top_)
		{
			return await GetByBetUsersAsync(betUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, int top_, TransactionManager tm_)
		{
			return GetByBetUsers(betUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, int top_, TransactionManager tm_)
		{
			return await GetByBetUsersAsync(betUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, string sort_)
		{
			return GetByBetUsers(betUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, string sort_)
		{
			return await GetByBetUsersAsync(betUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, string sort_, TransactionManager tm_)
		{
			return GetByBetUsers(betUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, string sort_, TransactionManager tm_)
		{
			return await GetByBetUsersAsync(betUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "betUsers">下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetUsers(int betUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetUsers` = @BetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetUsersAsync(int betUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetUsers` = @BetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetUsers", betUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBetUsers
		#region GetByTotalBalance
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance)
		{
			return GetByTotalBalance(totalBalance, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance)
		{
			return await GetByTotalBalanceAsync(totalBalance, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, TransactionManager tm_)
		{
			return GetByTotalBalance(totalBalance, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, TransactionManager tm_)
		{
			return await GetByTotalBalanceAsync(totalBalance, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, int top_)
		{
			return GetByTotalBalance(totalBalance, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, int top_)
		{
			return await GetByTotalBalanceAsync(totalBalance, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, int top_, TransactionManager tm_)
		{
			return GetByTotalBalance(totalBalance, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, int top_, TransactionManager tm_)
		{
			return await GetByTotalBalanceAsync(totalBalance, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, string sort_)
		{
			return GetByTotalBalance(totalBalance, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, string sort_)
		{
			return await GetByTotalBalanceAsync(totalBalance, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, string sort_, TransactionManager tm_)
		{
			return GetByTotalBalance(totalBalance, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, string sort_, TransactionManager tm_)
		{
			return await GetByTotalBalanceAsync(totalBalance, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalance（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalance">当日所有账户总存量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalance(long totalBalance, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`TotalBalance` = @TotalBalance", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceAsync(long totalBalance, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`TotalBalance` = @TotalBalance", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalance", totalBalance, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByTotalBalance
		#region GetByBetAmount
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount)
		{
			return GetByBetAmount(betAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount)
		{
			return await GetByBetAmountAsync(betAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, TransactionManager tm_)
		{
			return GetByBetAmount(betAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, TransactionManager tm_)
		{
			return await GetByBetAmountAsync(betAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, int top_)
		{
			return GetByBetAmount(betAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, int top_)
		{
			return await GetByBetAmountAsync(betAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, int top_, TransactionManager tm_)
		{
			return GetByBetAmount(betAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, int top_, TransactionManager tm_)
		{
			return await GetByBetAmountAsync(betAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, string sort_)
		{
			return GetByBetAmount(betAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, string sort_)
		{
			return await GetByBetAmountAsync(betAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, string sort_, TransactionManager tm_)
		{
			return GetByBetAmount(betAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, string sort_, TransactionManager tm_)
		{
			return await GetByBetAmountAsync(betAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "betAmount">下注数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetAmount(long betAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetAmount` = @BetAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetAmountAsync(long betAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetAmount` = @BetAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetAmount", betAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBetAmount
		#region GetByBetBonus
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus)
		{
			return GetByBetBonus(betBonus, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus)
		{
			return await GetByBetBonusAsync(betBonus, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, TransactionManager tm_)
		{
			return GetByBetBonus(betBonus, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, TransactionManager tm_)
		{
			return await GetByBetBonusAsync(betBonus, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, int top_)
		{
			return GetByBetBonus(betBonus, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, int top_)
		{
			return await GetByBetBonusAsync(betBonus, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, int top_, TransactionManager tm_)
		{
			return GetByBetBonus(betBonus, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, int top_, TransactionManager tm_)
		{
			return await GetByBetBonusAsync(betBonus, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, string sort_)
		{
			return GetByBetBonus(betBonus, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, string sort_)
		{
			return await GetByBetBonusAsync(betBonus, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, string sort_, TransactionManager tm_)
		{
			return GetByBetBonus(betBonus, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, string sort_, TransactionManager tm_)
		{
			return await GetByBetBonusAsync(betBonus, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "betBonus">下注时扣除的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetBonus(long betBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetBonus` = @BetBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetBonusAsync(long betBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetBonus` = @BetBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetBonus", betBonus, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBetBonus
		#region GetByWinBonus
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus)
		{
			return GetByWinBonus(winBonus, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus)
		{
			return await GetByWinBonusAsync(winBonus, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, TransactionManager tm_)
		{
			return GetByWinBonus(winBonus, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, TransactionManager tm_)
		{
			return await GetByWinBonusAsync(winBonus, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, int top_)
		{
			return GetByWinBonus(winBonus, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, int top_)
		{
			return await GetByWinBonusAsync(winBonus, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, int top_, TransactionManager tm_)
		{
			return GetByWinBonus(winBonus, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, int top_, TransactionManager tm_)
		{
			return await GetByWinBonusAsync(winBonus, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, string sort_)
		{
			return GetByWinBonus(winBonus, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, string sort_)
		{
			return await GetByWinBonusAsync(winBonus, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, string sort_, TransactionManager tm_)
		{
			return GetByWinBonus(winBonus, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, string sort_, TransactionManager tm_)
		{
			return await GetByWinBonusAsync(winBonus, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 WinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "winBonus">返奖时增加的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinBonus(long winBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`WinBonus` = @WinBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinBonusAsync(long winBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`WinBonus` = @WinBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinBonus", winBonus, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWinBonus
		#region GetByNewBetUsers
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers)
		{
			return GetByNewBetUsers(newBetUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers)
		{
			return await GetByNewBetUsersAsync(newBetUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, TransactionManager tm_)
		{
			return GetByNewBetUsers(newBetUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, TransactionManager tm_)
		{
			return await GetByNewBetUsersAsync(newBetUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, int top_)
		{
			return GetByNewBetUsers(newBetUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, int top_)
		{
			return await GetByNewBetUsersAsync(newBetUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, int top_, TransactionManager tm_)
		{
			return GetByNewBetUsers(newBetUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, int top_, TransactionManager tm_)
		{
			return await GetByNewBetUsersAsync(newBetUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, string sort_)
		{
			return GetByNewBetUsers(newBetUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, string sort_)
		{
			return await GetByNewBetUsersAsync(newBetUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, string sort_, TransactionManager tm_)
		{
			return GetByNewBetUsers(newBetUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, string sort_, TransactionManager tm_)
		{
			return await GetByNewBetUsersAsync(newBetUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newBetUsers">新下注用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewBetUsers(int newBetUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewBetUsers` = @NewBetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewBetUsersAsync(int newBetUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewBetUsers` = @NewBetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewBetUsers", newBetUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewBetUsers
		#region GetByNewUserBetAmount
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount)
		{
			return GetByNewUserBetAmount(newUserBetAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, TransactionManager tm_)
		{
			return GetByNewUserBetAmount(newUserBetAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, TransactionManager tm_)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, int top_)
		{
			return GetByNewUserBetAmount(newUserBetAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, int top_)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, int top_, TransactionManager tm_)
		{
			return GetByNewUserBetAmount(newUserBetAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, int top_, TransactionManager tm_)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, string sort_)
		{
			return GetByNewUserBetAmount(newUserBetAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, string sort_)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, string sort_, TransactionManager tm_)
		{
			return GetByNewUserBetAmount(newUserBetAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserBetAmountAsync(newUserBetAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetAmount">新用户下注额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetAmount(long newUserBetAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserBetAmount` = @NewUserBetAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetAmountAsync(long newUserBetAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserBetAmount` = @NewUserBetAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetAmount", newUserBetAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserBetAmount
		#region GetByNewUserBetBonus
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus)
		{
			return GetByNewUserBetBonus(newUserBetBonus, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, TransactionManager tm_)
		{
			return GetByNewUserBetBonus(newUserBetBonus, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, TransactionManager tm_)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, int top_)
		{
			return GetByNewUserBetBonus(newUserBetBonus, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, int top_)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, int top_, TransactionManager tm_)
		{
			return GetByNewUserBetBonus(newUserBetBonus, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, int top_, TransactionManager tm_)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, string sort_)
		{
			return GetByNewUserBetBonus(newUserBetBonus, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, string sort_)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, string sort_, TransactionManager tm_)
		{
			return GetByNewUserBetBonus(newUserBetBonus, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserBetBonusAsync(newUserBetBonus, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserBetBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserBetBonus">新用户下注的bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserBetBonus(long newUserBetBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserBetBonus` = @NewUserBetBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserBetBonusAsync(long newUserBetBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserBetBonus` = @NewUserBetBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserBetBonus", newUserBetBonus, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserBetBonus
		#region GetByNewUserWinBonus
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus)
		{
			return GetByNewUserWinBonus(newUserWinBonus, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, TransactionManager tm_)
		{
			return GetByNewUserWinBonus(newUserWinBonus, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, TransactionManager tm_)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, int top_)
		{
			return GetByNewUserWinBonus(newUserWinBonus, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, int top_)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, int top_, TransactionManager tm_)
		{
			return GetByNewUserWinBonus(newUserWinBonus, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, int top_, TransactionManager tm_)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, string sort_)
		{
			return GetByNewUserWinBonus(newUserWinBonus, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, string sort_)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, string sort_, TransactionManager tm_)
		{
			return GetByNewUserWinBonus(newUserWinBonus, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserWinBonusAsync(newUserWinBonus, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinBonus（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinBonus">新用户返奖bonus</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinBonus(long newUserWinBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserWinBonus` = @NewUserWinBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinBonusAsync(long newUserWinBonus, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserWinBonus` = @NewUserWinBonus", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinBonus", newUserWinBonus, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserWinBonus
		#region GetByWinAmount
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount)
		{
			return GetByWinAmount(winAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount)
		{
			return await GetByWinAmountAsync(winAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, TransactionManager tm_)
		{
			return GetByWinAmount(winAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, TransactionManager tm_)
		{
			return await GetByWinAmountAsync(winAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, int top_)
		{
			return GetByWinAmount(winAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, int top_)
		{
			return await GetByWinAmountAsync(winAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, int top_, TransactionManager tm_)
		{
			return GetByWinAmount(winAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, int top_, TransactionManager tm_)
		{
			return await GetByWinAmountAsync(winAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, string sort_)
		{
			return GetByWinAmount(winAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, string sort_)
		{
			return await GetByWinAmountAsync(winAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, string sort_, TransactionManager tm_)
		{
			return GetByWinAmount(winAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, string sort_, TransactionManager tm_)
		{
			return await GetByWinAmountAsync(winAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 WinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "winAmount">返奖数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWinAmount(long winAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`WinAmount` = @WinAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWinAmountAsync(long winAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`WinAmount` = @WinAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@WinAmount", winAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWinAmount
		#region GetByPayNotBetUsers
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers)
		{
			return GetByPayNotBetUsers(payNotBetUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, TransactionManager tm_)
		{
			return GetByPayNotBetUsers(payNotBetUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, TransactionManager tm_)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, int top_)
		{
			return GetByPayNotBetUsers(payNotBetUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, int top_)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, int top_, TransactionManager tm_)
		{
			return GetByPayNotBetUsers(payNotBetUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, int top_, TransactionManager tm_)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, string sort_)
		{
			return GetByPayNotBetUsers(payNotBetUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, string sort_)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, string sort_, TransactionManager tm_)
		{
			return GetByPayNotBetUsers(payNotBetUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, string sort_, TransactionManager tm_)
		{
			return await GetByPayNotBetUsersAsync(payNotBetUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayNotBetUsers（字段） 查询
		/// </summary>
		/// /// <param name = "payNotBetUsers">充值未下注用户数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayNotBetUsers(int payNotBetUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayNotBetUsers` = @PayNotBetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayNotBetUsersAsync(int payNotBetUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayNotBetUsers` = @PayNotBetUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayNotBetUsers", payNotBetUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayNotBetUsers
		#region GetByDOU_FirstPayUsers
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, TransactionManager tm_)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, int top_)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, int top_)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, int top_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, int top_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, string sort_)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, string sort_)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, string sort_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayUsers(dOU_FirstPayUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, string sort_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayUsersAsync(dOU_FirstPayUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayUsers">当日首充(历史未充值)的老用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayUsers(int dOU_FirstPayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayUsers` = @DOU_FirstPayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayUsersAsync(int dOU_FirstPayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayUsers` = @DOU_FirstPayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayUsers", dOU_FirstPayUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDOU_FirstPayUsers
		#region GetByDNU_RepayUsers
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, TransactionManager tm_)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, TransactionManager tm_)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, int top_)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, int top_)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, int top_, TransactionManager tm_)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, int top_, TransactionManager tm_)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, string sort_)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, string sort_)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, string sort_, TransactionManager tm_)
		{
			return GetByDNU_RepayUsers(dNU_RepayUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_RepayUsersAsync(dNU_RepayUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_RepayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_RepayUsers">DNU复充用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_RepayUsers(int dNU_RepayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_RepayUsers` = @DNU_RepayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_RepayUsersAsync(int dNU_RepayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_RepayUsers` = @DNU_RepayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_RepayUsers", dNU_RepayUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_RepayUsers
		#region GetByRepeatConsumersD1
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, TransactionManager tm_)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, int top_)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, int top_)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, int top_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, int top_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, string sort_)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, string sort_)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, string sort_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD1(repeatConsumersD1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, string sort_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD1Async(repeatConsumersD1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD1（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD1">回流用户</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD1(int repeatConsumersD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD1` = @RepeatConsumersD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD1Async(int repeatConsumersD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD1` = @RepeatConsumersD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD1", repeatConsumersD1, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRepeatConsumersD1
		#region GetByRepeatConsumersD5
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, TransactionManager tm_)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, int top_)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, int top_)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, int top_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, int top_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, string sort_)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, string sort_)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, string sort_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD5(repeatConsumersD5, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, string sort_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD5Async(repeatConsumersD5, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD5（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD5">回流用户(5日）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD5(int repeatConsumersD5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD5` = @RepeatConsumersD5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD5Async(int repeatConsumersD5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD5` = @RepeatConsumersD5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD5", repeatConsumersD5, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRepeatConsumersD5
		#region GetByRepeatConsumersD10
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, TransactionManager tm_)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, int top_)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, int top_)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, int top_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, int top_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, string sort_)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, string sort_)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, string sort_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD10(repeatConsumersD10, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, string sort_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD10Async(repeatConsumersD10, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD10（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD10">回流用户(10日)</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD10(int repeatConsumersD10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD10` = @RepeatConsumersD10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD10Async(int repeatConsumersD10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD10` = @RepeatConsumersD10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD10", repeatConsumersD10, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRepeatConsumersD10
		#region GetByRepeatConsumersD15
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, TransactionManager tm_)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, int top_)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, int top_)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, int top_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, int top_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, string sort_)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, string sort_)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, string sort_, TransactionManager tm_)
		{
			return GetByRepeatConsumersD15(repeatConsumersD15, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, string sort_, TransactionManager tm_)
		{
			return await GetByRepeatConsumersD15Async(repeatConsumersD15, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RepeatConsumersD15（字段） 查询
		/// </summary>
		/// /// <param name = "repeatConsumersD15">回流用户(15日)</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRepeatConsumersD15(int repeatConsumersD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD15` = @RepeatConsumersD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRepeatConsumersD15Async(int repeatConsumersD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RepeatConsumersD15` = @RepeatConsumersD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RepeatConsumersD15", repeatConsumersD15, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRepeatConsumersD15
		#region GetByDNU_FirstPayAmount
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, TransactionManager tm_)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, TransactionManager tm_)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, int top_)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, int top_)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, int top_, TransactionManager tm_)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, int top_, TransactionManager tm_)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, string sort_)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, string sort_)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, string sort_, TransactionManager tm_)
		{
			return GetByDNU_FirstPayAmount(dNU_FirstPayAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_FirstPayAmountAsync(dNU_FirstPayAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_FirstPayAmount">DNU首充金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_FirstPayAmount(long dNU_FirstPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_FirstPayAmount` = @DNU_FirstPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_FirstPayAmountAsync(long dNU_FirstPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_FirstPayAmount` = @DNU_FirstPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_FirstPayAmount", dNU_FirstPayAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_FirstPayAmount
		#region GetByDOU_FirstPayAmount
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, TransactionManager tm_)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, int top_)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, int top_)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, int top_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, int top_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, string sort_)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, string sort_)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, string sort_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayAmount(dOU_FirstPayAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, string sort_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayAmountAsync(dOU_FirstPayAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayAmount">老用户当日首充的累计金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayAmount(long dOU_FirstPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayAmount` = @DOU_FirstPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayAmountAsync(long dOU_FirstPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayAmount` = @DOU_FirstPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayAmount", dOU_FirstPayAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDOU_FirstPayAmount
		#region GetByDOU_FirstPayTotalAmount
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, TransactionManager tm_)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, int top_)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, int top_)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, int top_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, int top_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, string sort_)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, string sort_)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, string sort_, TransactionManager tm_)
		{
			return GetByDOU_FirstPayTotalAmount(dOU_FirstPayTotalAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, string sort_, TransactionManager tm_)
		{
			return await GetByDOU_FirstPayTotalAmountAsync(dOU_FirstPayTotalAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DOU_FirstPayTotalAmount（字段） 查询
		/// </summary>
		/// /// <param name = "dOU_FirstPayTotalAmount">首充老用户（历史未有充值）当日累计充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDOU_FirstPayTotalAmount(long dOU_FirstPayTotalAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDOU_FirstPayTotalAmountAsync(long dOU_FirstPayTotalAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DOU_FirstPayTotalAmount` = @DOU_FirstPayTotalAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DOU_FirstPayTotalAmount", dOU_FirstPayTotalAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDOU_FirstPayTotalAmount
		#region GetByNewCashUsers
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers)
		{
			return GetByNewCashUsers(newCashUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers)
		{
			return await GetByNewCashUsersAsync(newCashUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, TransactionManager tm_)
		{
			return GetByNewCashUsers(newCashUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, TransactionManager tm_)
		{
			return await GetByNewCashUsersAsync(newCashUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, int top_)
		{
			return GetByNewCashUsers(newCashUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, int top_)
		{
			return await GetByNewCashUsersAsync(newCashUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, int top_, TransactionManager tm_)
		{
			return GetByNewCashUsers(newCashUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, int top_, TransactionManager tm_)
		{
			return await GetByNewCashUsersAsync(newCashUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, string sort_)
		{
			return GetByNewCashUsers(newCashUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, string sort_)
		{
			return await GetByNewCashUsersAsync(newCashUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, string sort_, TransactionManager tm_)
		{
			return GetByNewCashUsers(newCashUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, string sort_, TransactionManager tm_)
		{
			return await GetByNewCashUsersAsync(newCashUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewCashUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newCashUsers">新提现用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewCashUsers(int newCashUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewCashUsers` = @NewCashUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewCashUsersAsync(int newCashUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewCashUsers` = @NewCashUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewCashUsers", newCashUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewCashUsers
		#region GetByNewPayUsers
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers)
		{
			return GetByNewPayUsers(newPayUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers)
		{
			return await GetByNewPayUsersAsync(newPayUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, TransactionManager tm_)
		{
			return GetByNewPayUsers(newPayUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, TransactionManager tm_)
		{
			return await GetByNewPayUsersAsync(newPayUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, int top_)
		{
			return GetByNewPayUsers(newPayUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, int top_)
		{
			return await GetByNewPayUsersAsync(newPayUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, int top_, TransactionManager tm_)
		{
			return GetByNewPayUsers(newPayUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, int top_, TransactionManager tm_)
		{
			return await GetByNewPayUsersAsync(newPayUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, string sort_)
		{
			return GetByNewPayUsers(newPayUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, string sort_)
		{
			return await GetByNewPayUsersAsync(newPayUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, string sort_, TransactionManager tm_)
		{
			return GetByNewPayUsers(newPayUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, string sort_, TransactionManager tm_)
		{
			return await GetByNewPayUsersAsync(newPayUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewPayUsers（字段） 查询
		/// </summary>
		/// /// <param name = "newPayUsers">新充值用户数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewPayUsers(int newPayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewPayUsers` = @NewPayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewPayUsersAsync(int newPayUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewPayUsers` = @NewPayUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewPayUsers", newPayUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewPayUsers
		#region GetByPayOwnFee
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee)
		{
			return GetByPayOwnFee(payOwnFee, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, TransactionManager tm_)
		{
			return GetByPayOwnFee(payOwnFee, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, TransactionManager tm_)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, int top_)
		{
			return GetByPayOwnFee(payOwnFee, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, int top_)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, int top_, TransactionManager tm_)
		{
			return GetByPayOwnFee(payOwnFee, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, int top_, TransactionManager tm_)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, string sort_)
		{
			return GetByPayOwnFee(payOwnFee, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, string sort_)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, string sort_, TransactionManager tm_)
		{
			return GetByPayOwnFee(payOwnFee, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, string sort_, TransactionManager tm_)
		{
			return await GetByPayOwnFeeAsync(payOwnFee, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "payOwnFee">充值我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayOwnFee(decimal payOwnFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayOwnFee` = @PayOwnFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayOwnFeeAsync(decimal payOwnFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayOwnFee` = @PayOwnFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayOwnFee", payOwnFee, MySqlDbType.NewDecimal));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayOwnFee
		#region GetByPayUserFee
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee)
		{
			return GetByPayUserFee(payUserFee, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee)
		{
			return await GetByPayUserFeeAsync(payUserFee, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, TransactionManager tm_)
		{
			return GetByPayUserFee(payUserFee, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, TransactionManager tm_)
		{
			return await GetByPayUserFeeAsync(payUserFee, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, int top_)
		{
			return GetByPayUserFee(payUserFee, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, int top_)
		{
			return await GetByPayUserFeeAsync(payUserFee, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, int top_, TransactionManager tm_)
		{
			return GetByPayUserFee(payUserFee, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, int top_, TransactionManager tm_)
		{
			return await GetByPayUserFeeAsync(payUserFee, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, string sort_)
		{
			return GetByPayUserFee(payUserFee, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, string sort_)
		{
			return await GetByPayUserFeeAsync(payUserFee, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, string sort_, TransactionManager tm_)
		{
			return GetByPayUserFee(payUserFee, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, string sort_, TransactionManager tm_)
		{
			return await GetByPayUserFeeAsync(payUserFee, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "payUserFee">充值用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayUserFee(decimal payUserFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayUserFee` = @PayUserFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayUserFeeAsync(decimal payUserFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayUserFee` = @PayUserFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayUserFee", payUserFee, MySqlDbType.NewDecimal));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayUserFee
		#region GetByNewUserPayAmount
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount)
		{
			return GetByNewUserPayAmount(newUserPayAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, TransactionManager tm_)
		{
			return GetByNewUserPayAmount(newUserPayAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, TransactionManager tm_)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, int top_)
		{
			return GetByNewUserPayAmount(newUserPayAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, int top_)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, int top_, TransactionManager tm_)
		{
			return GetByNewUserPayAmount(newUserPayAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, int top_, TransactionManager tm_)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, string sort_)
		{
			return GetByNewUserPayAmount(newUserPayAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, string sort_)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, string sort_, TransactionManager tm_)
		{
			return GetByNewUserPayAmount(newUserPayAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserPayAmountAsync(newUserPayAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserPayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserPayAmount">新用户充值额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserPayAmount(long newUserPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserPayAmount` = @NewUserPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserPayAmountAsync(long newUserPayAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserPayAmount` = @NewUserPayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserPayAmount", newUserPayAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserPayAmount
		#region GetByPayAmount
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount)
		{
			return GetByPayAmount(payAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount)
		{
			return await GetByPayAmountAsync(payAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, TransactionManager tm_)
		{
			return GetByPayAmount(payAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, TransactionManager tm_)
		{
			return await GetByPayAmountAsync(payAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, int top_)
		{
			return GetByPayAmount(payAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, int top_)
		{
			return await GetByPayAmountAsync(payAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, int top_, TransactionManager tm_)
		{
			return GetByPayAmount(payAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, int top_, TransactionManager tm_)
		{
			return await GetByPayAmountAsync(payAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, string sort_)
		{
			return GetByPayAmount(payAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, string sort_)
		{
			return await GetByPayAmountAsync(payAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, string sort_, TransactionManager tm_)
		{
			return GetByPayAmount(payAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, string sort_, TransactionManager tm_)
		{
			return await GetByPayAmountAsync(payAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayAmount（字段） 查询
		/// </summary>
		/// /// <param name = "payAmount">充值数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayAmount(long payAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayAmount` = @PayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayAmountAsync(long payAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayAmount` = @PayAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayAmount", payAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayAmount
		#region GetByCashOwnFee
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee)
		{
			return GetByCashOwnFee(cashOwnFee, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, TransactionManager tm_)
		{
			return GetByCashOwnFee(cashOwnFee, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, TransactionManager tm_)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, int top_)
		{
			return GetByCashOwnFee(cashOwnFee, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, int top_)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, int top_, TransactionManager tm_)
		{
			return GetByCashOwnFee(cashOwnFee, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, int top_, TransactionManager tm_)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, string sort_)
		{
			return GetByCashOwnFee(cashOwnFee, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, string sort_)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, string sort_, TransactionManager tm_)
		{
			return GetByCashOwnFee(cashOwnFee, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, string sort_, TransactionManager tm_)
		{
			return await GetByCashOwnFeeAsync(cashOwnFee, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashOwnFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashOwnFee">提现我方手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashOwnFee(decimal cashOwnFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashOwnFee` = @CashOwnFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashOwnFeeAsync(decimal cashOwnFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashOwnFee` = @CashOwnFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashOwnFee", cashOwnFee, MySqlDbType.NewDecimal));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashOwnFee
		#region GetByCashUserFee
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee)
		{
			return GetByCashUserFee(cashUserFee, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee)
		{
			return await GetByCashUserFeeAsync(cashUserFee, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, TransactionManager tm_)
		{
			return GetByCashUserFee(cashUserFee, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, TransactionManager tm_)
		{
			return await GetByCashUserFeeAsync(cashUserFee, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, int top_)
		{
			return GetByCashUserFee(cashUserFee, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, int top_)
		{
			return await GetByCashUserFeeAsync(cashUserFee, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, int top_, TransactionManager tm_)
		{
			return GetByCashUserFee(cashUserFee, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, int top_, TransactionManager tm_)
		{
			return await GetByCashUserFeeAsync(cashUserFee, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, string sort_)
		{
			return GetByCashUserFee(cashUserFee, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, string sort_)
		{
			return await GetByCashUserFeeAsync(cashUserFee, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, string sort_, TransactionManager tm_)
		{
			return GetByCashUserFee(cashUserFee, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, string sort_, TransactionManager tm_)
		{
			return await GetByCashUserFeeAsync(cashUserFee, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashUserFee（字段） 查询
		/// </summary>
		/// /// <param name = "cashUserFee">提现用户手续费</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashUserFee(decimal cashUserFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashUserFee` = @CashUserFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashUserFeeAsync(decimal cashUserFee, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashUserFee` = @CashUserFee", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashUserFee", cashUserFee, MySqlDbType.NewDecimal));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashUserFee
		#region GetByNewUserCashAmount
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount)
		{
			return GetByNewUserCashAmount(newUserCashAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, TransactionManager tm_)
		{
			return GetByNewUserCashAmount(newUserCashAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, TransactionManager tm_)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, int top_)
		{
			return GetByNewUserCashAmount(newUserCashAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, int top_)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, int top_, TransactionManager tm_)
		{
			return GetByNewUserCashAmount(newUserCashAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, int top_, TransactionManager tm_)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, string sort_)
		{
			return GetByNewUserCashAmount(newUserCashAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, string sort_)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, string sort_, TransactionManager tm_)
		{
			return GetByNewUserCashAmount(newUserCashAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserCashAmountAsync(newUserCashAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserCashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserCashAmount">新用户提现额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserCashAmount(long newUserCashAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserCashAmount` = @NewUserCashAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserCashAmountAsync(long newUserCashAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserCashAmount` = @NewUserCashAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserCashAmount", newUserCashAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserCashAmount
		#region GetByNewUserWinAmount
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount)
		{
			return GetByNewUserWinAmount(newUserWinAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, TransactionManager tm_)
		{
			return GetByNewUserWinAmount(newUserWinAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, TransactionManager tm_)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, int top_)
		{
			return GetByNewUserWinAmount(newUserWinAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, int top_)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, int top_, TransactionManager tm_)
		{
			return GetByNewUserWinAmount(newUserWinAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, int top_, TransactionManager tm_)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, string sort_)
		{
			return GetByNewUserWinAmount(newUserWinAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, string sort_)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, string sort_, TransactionManager tm_)
		{
			return GetByNewUserWinAmount(newUserWinAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, string sort_, TransactionManager tm_)
		{
			return await GetByNewUserWinAmountAsync(newUserWinAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewUserWinAmount（字段） 查询
		/// </summary>
		/// /// <param name = "newUserWinAmount">新用户返奖额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewUserWinAmount(long newUserWinAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserWinAmount` = @NewUserWinAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewUserWinAmountAsync(long newUserWinAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewUserWinAmount` = @NewUserWinAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewUserWinAmount", newUserWinAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewUserWinAmount
		#region GetByCashAmount
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount)
		{
			return GetByCashAmount(cashAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount)
		{
			return await GetByCashAmountAsync(cashAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, TransactionManager tm_)
		{
			return GetByCashAmount(cashAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, TransactionManager tm_)
		{
			return await GetByCashAmountAsync(cashAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, int top_)
		{
			return GetByCashAmount(cashAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, int top_)
		{
			return await GetByCashAmountAsync(cashAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, int top_, TransactionManager tm_)
		{
			return GetByCashAmount(cashAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, int top_, TransactionManager tm_)
		{
			return await GetByCashAmountAsync(cashAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, string sort_)
		{
			return GetByCashAmount(cashAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, string sort_)
		{
			return await GetByCashAmountAsync(cashAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, string sort_, TransactionManager tm_)
		{
			return GetByCashAmount(cashAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, string sort_, TransactionManager tm_)
		{
			return await GetByCashAmountAsync(cashAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAmount">提现数量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAmount(long cashAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashAmount` = @CashAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAmountAsync(long cashAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashAmount` = @CashAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAmount", cashAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashAmount
		#region GetByBonusRecUsers
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers)
		{
			return GetByBonusRecUsers(bonusRecUsers, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, TransactionManager tm_)
		{
			return GetByBonusRecUsers(bonusRecUsers, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, TransactionManager tm_)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, int top_)
		{
			return GetByBonusRecUsers(bonusRecUsers, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, int top_)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, int top_, TransactionManager tm_)
		{
			return GetByBonusRecUsers(bonusRecUsers, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, int top_, TransactionManager tm_)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, string sort_)
		{
			return GetByBonusRecUsers(bonusRecUsers, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, string sort_)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, string sort_, TransactionManager tm_)
		{
			return GetByBonusRecUsers(bonusRecUsers, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, string sort_, TransactionManager tm_)
		{
			return await GetByBonusRecUsersAsync(bonusRecUsers, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BonusRecUsers（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRecUsers">bonus领取人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRecUsers(int bonusRecUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusRecUsers` = @BonusRecUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRecUsersAsync(int bonusRecUsers, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusRecUsers` = @BonusRecUsers", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRecUsers", bonusRecUsers, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBonusRecUsers
		#region GetByBonusAmount
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount)
		{
			return GetByBonusAmount(bonusAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount)
		{
			return await GetByBonusAmountAsync(bonusAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, TransactionManager tm_)
		{
			return GetByBonusAmount(bonusAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, TransactionManager tm_)
		{
			return await GetByBonusAmountAsync(bonusAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, int top_)
		{
			return GetByBonusAmount(bonusAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, int top_)
		{
			return await GetByBonusAmountAsync(bonusAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, int top_, TransactionManager tm_)
		{
			return GetByBonusAmount(bonusAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, int top_, TransactionManager tm_)
		{
			return await GetByBonusAmountAsync(bonusAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, string sort_)
		{
			return GetByBonusAmount(bonusAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, string sort_)
		{
			return await GetByBonusAmountAsync(bonusAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, string sort_, TransactionManager tm_)
		{
			return GetByBonusAmount(bonusAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, string sort_, TransactionManager tm_)
		{
			return await GetByBonusAmountAsync(bonusAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BonusAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusAmount">bonus发放总量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusAmount(long bonusAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusAmount` = @BonusAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusAmountAsync(long bonusAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusAmount` = @BonusAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusAmount", bonusAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBonusAmount
		#region GetByBonusUseAmount
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount)
		{
			return GetByBonusUseAmount(bonusUseAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, TransactionManager tm_)
		{
			return GetByBonusUseAmount(bonusUseAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, TransactionManager tm_)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, int top_)
		{
			return GetByBonusUseAmount(bonusUseAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, int top_)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, int top_, TransactionManager tm_)
		{
			return GetByBonusUseAmount(bonusUseAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, int top_, TransactionManager tm_)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, string sort_)
		{
			return GetByBonusUseAmount(bonusUseAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, string sort_)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, string sort_, TransactionManager tm_)
		{
			return GetByBonusUseAmount(bonusUseAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, string sort_, TransactionManager tm_)
		{
			return await GetByBonusUseAmountAsync(bonusUseAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BonusUseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUseAmount">bonus消耗总量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUseAmount(long bonusUseAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusUseAmount` = @BonusUseAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUseAmountAsync(long bonusUseAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusUseAmount` = @BonusUseAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUseAmount", bonusUseAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBonusUseAmount
		#region GetByBonusRemainAmount
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, TransactionManager tm_)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, TransactionManager tm_)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, int top_)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, int top_)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, int top_, TransactionManager tm_)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, int top_, TransactionManager tm_)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, string sort_)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, string sort_)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, string sort_, TransactionManager tm_)
		{
			return GetByBonusRemainAmount(bonusRemainAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, string sort_, TransactionManager tm_)
		{
			return await GetByBonusRemainAmountAsync(bonusRemainAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BonusRemainAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusRemainAmount">bonus存量</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusRemainAmount(long bonusRemainAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusRemainAmount` = @BonusRemainAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusRemainAmountAsync(long bonusRemainAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusRemainAmount` = @BonusRemainAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusRemainAmount", bonusRemainAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBonusRemainAmount
		#region GetByBonusUnlockAmount
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, TransactionManager tm_)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, TransactionManager tm_)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, int top_)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, int top_)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, int top_, TransactionManager tm_)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, int top_, TransactionManager tm_)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, string sort_)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, string sort_)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, string sort_, TransactionManager tm_)
		{
			return GetByBonusUnlockAmount(bonusUnlockAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, string sort_, TransactionManager tm_)
		{
			return await GetByBonusUnlockAmountAsync(bonusUnlockAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BonusUnlockAmount（字段） 查询
		/// </summary>
		/// /// <param name = "bonusUnlockAmount">bonus解锁金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBonusUnlockAmount(long bonusUnlockAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusUnlockAmount` = @BonusUnlockAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBonusUnlockAmountAsync(long bonusUnlockAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BonusUnlockAmount` = @BonusUnlockAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BonusUnlockAmount", bonusUnlockAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBonusUnlockAmount
		#region GetByCashAuditAmount
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount)
		{
			return GetByCashAuditAmount(cashAuditAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, TransactionManager tm_)
		{
			return GetByCashAuditAmount(cashAuditAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, TransactionManager tm_)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, int top_)
		{
			return GetByCashAuditAmount(cashAuditAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, int top_)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, int top_, TransactionManager tm_)
		{
			return GetByCashAuditAmount(cashAuditAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, int top_, TransactionManager tm_)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, string sort_)
		{
			return GetByCashAuditAmount(cashAuditAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, string sort_)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, string sort_, TransactionManager tm_)
		{
			return GetByCashAuditAmount(cashAuditAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, string sort_, TransactionManager tm_)
		{
			return await GetByCashAuditAmountAsync(cashAuditAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashAuditAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashAuditAmount">提审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashAuditAmount(long cashAuditAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashAuditAmount` = @CashAuditAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashAuditAmountAsync(long cashAuditAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashAuditAmount` = @CashAuditAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashAuditAmount", cashAuditAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashAuditAmount
		#region GetByCashRefuseAmount
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, TransactionManager tm_)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, TransactionManager tm_)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, int top_)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, int top_)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, int top_, TransactionManager tm_)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, int top_, TransactionManager tm_)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, string sort_)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, string sort_)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, string sort_, TransactionManager tm_)
		{
			return GetByCashRefuseAmount(cashRefuseAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, string sort_, TransactionManager tm_)
		{
			return await GetByCashRefuseAmountAsync(cashRefuseAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashRefuseAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashRefuseAmount">拒审现金额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashRefuseAmount(long cashRefuseAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashRefuseAmount` = @CashRefuseAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashRefuseAmountAsync(long cashRefuseAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashRefuseAmount` = @CashRefuseAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashRefuseAmount", cashRefuseAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashRefuseAmount
		#region GetByCashPassAmount
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount)
		{
			return GetByCashPassAmount(cashPassAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, TransactionManager tm_)
		{
			return GetByCashPassAmount(cashPassAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, TransactionManager tm_)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, int top_)
		{
			return GetByCashPassAmount(cashPassAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, int top_)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, int top_, TransactionManager tm_)
		{
			return GetByCashPassAmount(cashPassAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, int top_, TransactionManager tm_)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, string sort_)
		{
			return GetByCashPassAmount(cashPassAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, string sort_)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, string sort_, TransactionManager tm_)
		{
			return GetByCashPassAmount(cashPassAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, string sort_, TransactionManager tm_)
		{
			return await GetByCashPassAmountAsync(cashPassAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashPassAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashPassAmount">通过成功额度</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashPassAmount(long cashPassAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashPassAmount` = @CashPassAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashPassAmountAsync(long cashPassAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashPassAmount` = @CashPassAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashPassAmount", cashPassAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashPassAmount
		#region GetByCashFailAmount
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount)
		{
			return GetByCashFailAmount(cashFailAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, TransactionManager tm_)
		{
			return GetByCashFailAmount(cashFailAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, TransactionManager tm_)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, int top_)
		{
			return GetByCashFailAmount(cashFailAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, int top_)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, int top_, TransactionManager tm_)
		{
			return GetByCashFailAmount(cashFailAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, int top_, TransactionManager tm_)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, string sort_)
		{
			return GetByCashFailAmount(cashFailAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, string sort_)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, string sort_, TransactionManager tm_)
		{
			return GetByCashFailAmount(cashFailAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, string sort_, TransactionManager tm_)
		{
			return await GetByCashFailAmountAsync(cashFailAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 CashFailAmount（字段） 查询
		/// </summary>
		/// /// <param name = "cashFailAmount">失败金额</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByCashFailAmount(long cashFailAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashFailAmount` = @CashFailAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByCashFailAmountAsync(long cashFailAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`CashFailAmount` = @CashFailAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@CashFailAmount", cashFailAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByCashFailAmount
		#region GetByProfitAmount
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount)
		{
			return GetByProfitAmount(profitAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount)
		{
			return await GetByProfitAmountAsync(profitAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, TransactionManager tm_)
		{
			return GetByProfitAmount(profitAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, TransactionManager tm_)
		{
			return await GetByProfitAmountAsync(profitAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, int top_)
		{
			return GetByProfitAmount(profitAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, int top_)
		{
			return await GetByProfitAmountAsync(profitAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, int top_, TransactionManager tm_)
		{
			return GetByProfitAmount(profitAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, int top_, TransactionManager tm_)
		{
			return await GetByProfitAmountAsync(profitAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, string sort_)
		{
			return GetByProfitAmount(profitAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, string sort_)
		{
			return await GetByProfitAmountAsync(profitAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, string sort_, TransactionManager tm_)
		{
			return GetByProfitAmount(profitAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, string sort_, TransactionManager tm_)
		{
			return await GetByProfitAmountAsync(profitAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 ProfitAmount（字段） 查询
		/// </summary>
		/// /// <param name = "profitAmount">盈利数量GGR（下注-返奖-活动）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByProfitAmount(long profitAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`ProfitAmount` = @ProfitAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByProfitAmountAsync(long profitAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`ProfitAmount` = @ProfitAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ProfitAmount", profitAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByProfitAmount
		#region GetByPromotionFeeAmount
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, TransactionManager tm_)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, TransactionManager tm_)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, int top_)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, int top_)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, int top_, TransactionManager tm_)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, int top_, TransactionManager tm_)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, string sort_)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, string sort_)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, string sort_, TransactionManager tm_)
		{
			return GetByPromotionFeeAmount(promotionFeeAmount, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, string sort_, TransactionManager tm_)
		{
			return await GetByPromotionFeeAmountAsync(promotionFeeAmount, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PromotionFeeAmount（字段） 查询
		/// </summary>
		/// /// <param name = "promotionFeeAmount">活动成本sum（s_currency_change.Amount）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPromotionFeeAmount(long promotionFeeAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PromotionFeeAmount` = @PromotionFeeAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPromotionFeeAmountAsync(long promotionFeeAmount, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PromotionFeeAmount` = @PromotionFeeAmount", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PromotionFeeAmount", promotionFeeAmount, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPromotionFeeAmount
		#region GetByNewARUP
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP)
		{
			return GetByNewARUP(newARUP, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP)
		{
			return await GetByNewARUPAsync(newARUP, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, TransactionManager tm_)
		{
			return GetByNewARUP(newARUP, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, TransactionManager tm_)
		{
			return await GetByNewARUPAsync(newARUP, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, int top_)
		{
			return GetByNewARUP(newARUP, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, int top_)
		{
			return await GetByNewARUPAsync(newARUP, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, int top_, TransactionManager tm_)
		{
			return GetByNewARUP(newARUP, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, int top_, TransactionManager tm_)
		{
			return await GetByNewARUPAsync(newARUP, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, string sort_)
		{
			return GetByNewARUP(newARUP, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, string sort_)
		{
			return await GetByNewARUPAsync(newARUP, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, string sort_, TransactionManager tm_)
		{
			return GetByNewARUP(newARUP, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, string sort_, TransactionManager tm_)
		{
			return await GetByNewARUPAsync(newARUP, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 NewARUP（字段） 查询
		/// </summary>
		/// /// <param name = "newARUP">新用户ARUP（新下注用户数/新用户下注-返奖总额）</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByNewARUP(float newARUP, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewARUP` = @NewARUP", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByNewARUPAsync(float newARUP, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`NewARUP` = @NewARUP", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@NewARUP", newARUP, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByNewARUP
		#region GetByARUP
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP)
		{
			return GetByARUP(aRUP, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP)
		{
			return await GetByARUPAsync(aRUP, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, TransactionManager tm_)
		{
			return GetByARUP(aRUP, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, TransactionManager tm_)
		{
			return await GetByARUPAsync(aRUP, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, int top_)
		{
			return GetByARUP(aRUP, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, int top_)
		{
			return await GetByARUPAsync(aRUP, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, int top_, TransactionManager tm_)
		{
			return GetByARUP(aRUP, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, int top_, TransactionManager tm_)
		{
			return await GetByARUPAsync(aRUP, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, string sort_)
		{
			return GetByARUP(aRUP, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, string sort_)
		{
			return await GetByARUPAsync(aRUP, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, string sort_, TransactionManager tm_)
		{
			return GetByARUP(aRUP, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, string sort_, TransactionManager tm_)
		{
			return await GetByARUPAsync(aRUP, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 ARUP（字段） 查询
		/// </summary>
		/// /// <param name = "aRUP">ARUP</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByARUP(float aRUP, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`ARUP` = @ARUP", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByARUPAsync(float aRUP, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`ARUP` = @ARUP", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@ARUP", aRUP, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByARUP
		#region GetByRetentionD1
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1)
		{
			return GetByRetentionD1(retentionD1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1)
		{
			return await GetByRetentionD1Async(retentionD1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, TransactionManager tm_)
		{
			return GetByRetentionD1(retentionD1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, TransactionManager tm_)
		{
			return await GetByRetentionD1Async(retentionD1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, int top_)
		{
			return GetByRetentionD1(retentionD1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, int top_)
		{
			return await GetByRetentionD1Async(retentionD1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, int top_, TransactionManager tm_)
		{
			return GetByRetentionD1(retentionD1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD1Async(retentionD1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, string sort_)
		{
			return GetByRetentionD1(retentionD1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, string sort_)
		{
			return await GetByRetentionD1Async(retentionD1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD1(retentionD1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD1Async(retentionD1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD1">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD1(float retentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD1` = @RetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD1Async(float retentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD1` = @RetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD1", retentionD1, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD1
		#region GetByRetentionD3
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3)
		{
			return GetByRetentionD3(retentionD3, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3)
		{
			return await GetByRetentionD3Async(retentionD3, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, TransactionManager tm_)
		{
			return GetByRetentionD3(retentionD3, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, TransactionManager tm_)
		{
			return await GetByRetentionD3Async(retentionD3, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, int top_)
		{
			return GetByRetentionD3(retentionD3, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, int top_)
		{
			return await GetByRetentionD3Async(retentionD3, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, int top_, TransactionManager tm_)
		{
			return GetByRetentionD3(retentionD3, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD3Async(retentionD3, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, string sort_)
		{
			return GetByRetentionD3(retentionD3, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, string sort_)
		{
			return await GetByRetentionD3Async(retentionD3, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD3(retentionD3, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD3Async(retentionD3, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD3">3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD3(float retentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD3` = @RetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD3Async(float retentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD3` = @RetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD3", retentionD3, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD3
		#region GetByRetentionD7
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7)
		{
			return GetByRetentionD7(retentionD7, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7)
		{
			return await GetByRetentionD7Async(retentionD7, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, TransactionManager tm_)
		{
			return GetByRetentionD7(retentionD7, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, TransactionManager tm_)
		{
			return await GetByRetentionD7Async(retentionD7, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, int top_)
		{
			return GetByRetentionD7(retentionD7, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, int top_)
		{
			return await GetByRetentionD7Async(retentionD7, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, int top_, TransactionManager tm_)
		{
			return GetByRetentionD7(retentionD7, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD7Async(retentionD7, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, string sort_)
		{
			return GetByRetentionD7(retentionD7, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, string sort_)
		{
			return await GetByRetentionD7Async(retentionD7, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD7(retentionD7, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD7Async(retentionD7, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD7">7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD7(float retentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD7` = @RetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD7Async(float retentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD7` = @RetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD7", retentionD7, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD7
		#region GetByRetentionD14
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14)
		{
			return GetByRetentionD14(retentionD14, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14)
		{
			return await GetByRetentionD14Async(retentionD14, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, TransactionManager tm_)
		{
			return GetByRetentionD14(retentionD14, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, TransactionManager tm_)
		{
			return await GetByRetentionD14Async(retentionD14, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, int top_)
		{
			return GetByRetentionD14(retentionD14, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, int top_)
		{
			return await GetByRetentionD14Async(retentionD14, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, int top_, TransactionManager tm_)
		{
			return GetByRetentionD14(retentionD14, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD14Async(retentionD14, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, string sort_)
		{
			return GetByRetentionD14(retentionD14, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, string sort_)
		{
			return await GetByRetentionD14Async(retentionD14, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD14(retentionD14, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD14Async(retentionD14, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD14">14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD14(float retentionD14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD14` = @RetentionD14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD14Async(float retentionD14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD14` = @RetentionD14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD14", retentionD14, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD14
		#region GetByRetentionD15
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15)
		{
			return GetByRetentionD15(retentionD15, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15)
		{
			return await GetByRetentionD15Async(retentionD15, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, TransactionManager tm_)
		{
			return GetByRetentionD15(retentionD15, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, TransactionManager tm_)
		{
			return await GetByRetentionD15Async(retentionD15, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, int top_)
		{
			return GetByRetentionD15(retentionD15, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, int top_)
		{
			return await GetByRetentionD15Async(retentionD15, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, int top_, TransactionManager tm_)
		{
			return GetByRetentionD15(retentionD15, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD15Async(retentionD15, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, string sort_)
		{
			return GetByRetentionD15(retentionD15, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, string sort_)
		{
			return await GetByRetentionD15Async(retentionD15, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD15(retentionD15, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD15Async(retentionD15, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD15">15日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD15(float retentionD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD15` = @RetentionD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD15Async(float retentionD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD15` = @RetentionD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD15", retentionD15, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD15
		#region GetByRetentionD20
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20)
		{
			return GetByRetentionD20(retentionD20, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20)
		{
			return await GetByRetentionD20Async(retentionD20, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, TransactionManager tm_)
		{
			return GetByRetentionD20(retentionD20, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, TransactionManager tm_)
		{
			return await GetByRetentionD20Async(retentionD20, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, int top_)
		{
			return GetByRetentionD20(retentionD20, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, int top_)
		{
			return await GetByRetentionD20Async(retentionD20, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, int top_, TransactionManager tm_)
		{
			return GetByRetentionD20(retentionD20, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD20Async(retentionD20, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, string sort_)
		{
			return GetByRetentionD20(retentionD20, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, string sort_)
		{
			return await GetByRetentionD20Async(retentionD20, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD20(retentionD20, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD20Async(retentionD20, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD20">20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD20(float retentionD20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD20` = @RetentionD20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD20Async(float retentionD20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD20` = @RetentionD20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD20", retentionD20, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD20
		#region GetByRetentionD30
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30)
		{
			return GetByRetentionD30(retentionD30, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30)
		{
			return await GetByRetentionD30Async(retentionD30, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, TransactionManager tm_)
		{
			return GetByRetentionD30(retentionD30, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, TransactionManager tm_)
		{
			return await GetByRetentionD30Async(retentionD30, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, int top_)
		{
			return GetByRetentionD30(retentionD30, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, int top_)
		{
			return await GetByRetentionD30Async(retentionD30, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, int top_, TransactionManager tm_)
		{
			return GetByRetentionD30(retentionD30, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, int top_, TransactionManager tm_)
		{
			return await GetByRetentionD30Async(retentionD30, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, string sort_)
		{
			return GetByRetentionD30(retentionD30, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, string sort_)
		{
			return await GetByRetentionD30Async(retentionD30, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, string sort_, TransactionManager tm_)
		{
			return GetByRetentionD30(retentionD30, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, string sort_, TransactionManager tm_)
		{
			return await GetByRetentionD30Async(retentionD30, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "retentionD30">30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRetentionD30(float retentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD30` = @RetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRetentionD30Async(float retentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RetentionD30` = @RetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RetentionD30", retentionD30, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRetentionD30
		#region GetByRegRetentionD1
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1)
		{
			return GetByRegRetentionD1(regRetentionD1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, TransactionManager tm_)
		{
			return GetByRegRetentionD1(regRetentionD1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, TransactionManager tm_)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, int top_)
		{
			return GetByRegRetentionD1(regRetentionD1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, int top_)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, int top_, TransactionManager tm_)
		{
			return GetByRegRetentionD1(regRetentionD1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, int top_, TransactionManager tm_)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, string sort_)
		{
			return GetByRegRetentionD1(regRetentionD1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, string sort_)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, string sort_, TransactionManager tm_)
		{
			return GetByRegRetentionD1(regRetentionD1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, string sort_, TransactionManager tm_)
		{
			return await GetByRegRetentionD1Async(regRetentionD1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD1">注册1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD1(float regRetentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD1` = @RegRetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD1Async(float regRetentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD1` = @RegRetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD1", regRetentionD1, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegRetentionD1
		#region GetByRegRetentionD3
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3)
		{
			return GetByRegRetentionD3(regRetentionD3, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, TransactionManager tm_)
		{
			return GetByRegRetentionD3(regRetentionD3, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, TransactionManager tm_)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, int top_)
		{
			return GetByRegRetentionD3(regRetentionD3, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, int top_)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, int top_, TransactionManager tm_)
		{
			return GetByRegRetentionD3(regRetentionD3, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, int top_, TransactionManager tm_)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, string sort_)
		{
			return GetByRegRetentionD3(regRetentionD3, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, string sort_)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, string sort_, TransactionManager tm_)
		{
			return GetByRegRetentionD3(regRetentionD3, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, string sort_, TransactionManager tm_)
		{
			return await GetByRegRetentionD3Async(regRetentionD3, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD3">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD3(float regRetentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD3` = @RegRetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD3Async(float regRetentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD3` = @RegRetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD3", regRetentionD3, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegRetentionD3
		#region GetByRegRetentionD7
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7)
		{
			return GetByRegRetentionD7(regRetentionD7, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, TransactionManager tm_)
		{
			return GetByRegRetentionD7(regRetentionD7, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, TransactionManager tm_)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, int top_)
		{
			return GetByRegRetentionD7(regRetentionD7, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, int top_)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, int top_, TransactionManager tm_)
		{
			return GetByRegRetentionD7(regRetentionD7, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, int top_, TransactionManager tm_)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, string sort_)
		{
			return GetByRegRetentionD7(regRetentionD7, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, string sort_)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, string sort_, TransactionManager tm_)
		{
			return GetByRegRetentionD7(regRetentionD7, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, string sort_, TransactionManager tm_)
		{
			return await GetByRegRetentionD7Async(regRetentionD7, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD7">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD7(float regRetentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD7` = @RegRetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD7Async(float regRetentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD7` = @RegRetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD7", regRetentionD7, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegRetentionD7
		#region GetByRegRetentionD15
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15)
		{
			return GetByRegRetentionD15(regRetentionD15, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, TransactionManager tm_)
		{
			return GetByRegRetentionD15(regRetentionD15, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, TransactionManager tm_)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, int top_)
		{
			return GetByRegRetentionD15(regRetentionD15, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, int top_)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, int top_, TransactionManager tm_)
		{
			return GetByRegRetentionD15(regRetentionD15, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, int top_, TransactionManager tm_)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, string sort_)
		{
			return GetByRegRetentionD15(regRetentionD15, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, string sort_)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, string sort_, TransactionManager tm_)
		{
			return GetByRegRetentionD15(regRetentionD15, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, string sort_, TransactionManager tm_)
		{
			return await GetByRegRetentionD15Async(regRetentionD15, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD15（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD15">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD15(float regRetentionD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD15` = @RegRetentionD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD15Async(float regRetentionD15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD15` = @RegRetentionD15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD15", regRetentionD15, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegRetentionD15
		#region GetByRegRetentionD30
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30)
		{
			return GetByRegRetentionD30(regRetentionD30, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, TransactionManager tm_)
		{
			return GetByRegRetentionD30(regRetentionD30, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, TransactionManager tm_)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, int top_)
		{
			return GetByRegRetentionD30(regRetentionD30, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, int top_)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, int top_, TransactionManager tm_)
		{
			return GetByRegRetentionD30(regRetentionD30, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, int top_, TransactionManager tm_)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, string sort_)
		{
			return GetByRegRetentionD30(regRetentionD30, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, string sort_)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, string sort_, TransactionManager tm_)
		{
			return GetByRegRetentionD30(regRetentionD30, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, string sort_, TransactionManager tm_)
		{
			return await GetByRegRetentionD30Async(regRetentionD30, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RegRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "regRetentionD30">1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRegRetentionD30(float regRetentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD30` = @RegRetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRegRetentionD30Async(float regRetentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RegRetentionD30` = @RegRetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RegRetentionD30", regRetentionD30, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRegRetentionD30
		#region GetByPayRetentionD1
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1)
		{
			return GetByPayRetentionD1(payRetentionD1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, TransactionManager tm_)
		{
			return GetByPayRetentionD1(payRetentionD1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, TransactionManager tm_)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, int top_)
		{
			return GetByPayRetentionD1(payRetentionD1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, int top_)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD1(payRetentionD1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, string sort_)
		{
			return GetByPayRetentionD1(payRetentionD1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, string sort_)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD1(payRetentionD1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD1Async(payRetentionD1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD1（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD1">充值1日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD1(float payRetentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD1` = @PayRetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD1Async(float payRetentionD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD1` = @PayRetentionD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD1", payRetentionD1, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD1
		#region GetByPayRetentionD2
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2)
		{
			return GetByPayRetentionD2(payRetentionD2, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, TransactionManager tm_)
		{
			return GetByPayRetentionD2(payRetentionD2, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, TransactionManager tm_)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, int top_)
		{
			return GetByPayRetentionD2(payRetentionD2, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, int top_)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD2(payRetentionD2, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, string sort_)
		{
			return GetByPayRetentionD2(payRetentionD2, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, string sort_)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD2(payRetentionD2, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD2Async(payRetentionD2, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD2（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD2">充值2日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD2(float payRetentionD2, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD2` = @PayRetentionD2", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD2Async(float payRetentionD2, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD2` = @PayRetentionD2", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD2", payRetentionD2, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD2
		#region GetByPayRetentionD3
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3)
		{
			return GetByPayRetentionD3(payRetentionD3, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, TransactionManager tm_)
		{
			return GetByPayRetentionD3(payRetentionD3, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, TransactionManager tm_)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, int top_)
		{
			return GetByPayRetentionD3(payRetentionD3, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, int top_)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD3(payRetentionD3, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, string sort_)
		{
			return GetByPayRetentionD3(payRetentionD3, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, string sort_)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD3(payRetentionD3, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD3Async(payRetentionD3, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD3（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD3">充值3日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD3(float payRetentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD3` = @PayRetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD3Async(float payRetentionD3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD3` = @PayRetentionD3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD3", payRetentionD3, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD3
		#region GetByPayRetentionD4
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4)
		{
			return GetByPayRetentionD4(payRetentionD4, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, TransactionManager tm_)
		{
			return GetByPayRetentionD4(payRetentionD4, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, TransactionManager tm_)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, int top_)
		{
			return GetByPayRetentionD4(payRetentionD4, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, int top_)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD4(payRetentionD4, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, string sort_)
		{
			return GetByPayRetentionD4(payRetentionD4, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, string sort_)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD4(payRetentionD4, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD4Async(payRetentionD4, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD4（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD4">充值4日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD4(float payRetentionD4, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD4` = @PayRetentionD4", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD4Async(float payRetentionD4, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD4` = @PayRetentionD4", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD4", payRetentionD4, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD4
		#region GetByPayRetentionD5
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5)
		{
			return GetByPayRetentionD5(payRetentionD5, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, TransactionManager tm_)
		{
			return GetByPayRetentionD5(payRetentionD5, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, TransactionManager tm_)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, int top_)
		{
			return GetByPayRetentionD5(payRetentionD5, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, int top_)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD5(payRetentionD5, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, string sort_)
		{
			return GetByPayRetentionD5(payRetentionD5, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, string sort_)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD5(payRetentionD5, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD5Async(payRetentionD5, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD5（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD5">充值5日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD5(float payRetentionD5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD5` = @PayRetentionD5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD5Async(float payRetentionD5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD5` = @PayRetentionD5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD5", payRetentionD5, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD5
		#region GetByPayRetentionD6
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6)
		{
			return GetByPayRetentionD6(payRetentionD6, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, TransactionManager tm_)
		{
			return GetByPayRetentionD6(payRetentionD6, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, TransactionManager tm_)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, int top_)
		{
			return GetByPayRetentionD6(payRetentionD6, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, int top_)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD6(payRetentionD6, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, string sort_)
		{
			return GetByPayRetentionD6(payRetentionD6, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, string sort_)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD6(payRetentionD6, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD6Async(payRetentionD6, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD6（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD6">充值6日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD6(float payRetentionD6, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD6` = @PayRetentionD6", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD6Async(float payRetentionD6, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD6` = @PayRetentionD6", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD6", payRetentionD6, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD6
		#region GetByPayRetentionD7
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7)
		{
			return GetByPayRetentionD7(payRetentionD7, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, TransactionManager tm_)
		{
			return GetByPayRetentionD7(payRetentionD7, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, TransactionManager tm_)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, int top_)
		{
			return GetByPayRetentionD7(payRetentionD7, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, int top_)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD7(payRetentionD7, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, string sort_)
		{
			return GetByPayRetentionD7(payRetentionD7, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, string sort_)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD7(payRetentionD7, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD7Async(payRetentionD7, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD7（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD7">充值7日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD7(float payRetentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD7` = @PayRetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD7Async(float payRetentionD7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD7` = @PayRetentionD7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD7", payRetentionD7, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD7
		#region GetByPayRetentionD14
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14)
		{
			return GetByPayRetentionD14(payRetentionD14, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, TransactionManager tm_)
		{
			return GetByPayRetentionD14(payRetentionD14, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, TransactionManager tm_)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, int top_)
		{
			return GetByPayRetentionD14(payRetentionD14, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, int top_)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD14(payRetentionD14, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, string sort_)
		{
			return GetByPayRetentionD14(payRetentionD14, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, string sort_)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD14(payRetentionD14, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD14Async(payRetentionD14, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD14（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD14">充值14日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD14(float payRetentionD14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD14` = @PayRetentionD14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD14Async(float payRetentionD14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD14` = @PayRetentionD14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD14", payRetentionD14, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD14
		#region GetByPayRetentionD20
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20)
		{
			return GetByPayRetentionD20(payRetentionD20, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, TransactionManager tm_)
		{
			return GetByPayRetentionD20(payRetentionD20, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, TransactionManager tm_)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, int top_)
		{
			return GetByPayRetentionD20(payRetentionD20, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, int top_)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD20(payRetentionD20, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, string sort_)
		{
			return GetByPayRetentionD20(payRetentionD20, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, string sort_)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD20(payRetentionD20, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD20Async(payRetentionD20, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD20（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD20">充值20日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD20(float payRetentionD20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD20` = @PayRetentionD20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD20Async(float payRetentionD20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD20` = @PayRetentionD20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD20", payRetentionD20, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD20
		#region GetByPayRetentionD30
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30)
		{
			return GetByPayRetentionD30(payRetentionD30, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, TransactionManager tm_)
		{
			return GetByPayRetentionD30(payRetentionD30, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, TransactionManager tm_)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, int top_)
		{
			return GetByPayRetentionD30(payRetentionD30, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, int top_)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, int top_, TransactionManager tm_)
		{
			return GetByPayRetentionD30(payRetentionD30, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, int top_, TransactionManager tm_)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, string sort_)
		{
			return GetByPayRetentionD30(payRetentionD30, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, string sort_)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, string sort_, TransactionManager tm_)
		{
			return GetByPayRetentionD30(payRetentionD30, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, string sort_, TransactionManager tm_)
		{
			return await GetByPayRetentionD30Async(payRetentionD30, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PayRetentionD30（字段） 查询
		/// </summary>
		/// /// <param name = "payRetentionD30">充值30日留存率</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPayRetentionD30(float payRetentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD30` = @PayRetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPayRetentionD30Async(float payRetentionD30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PayRetentionD30` = @PayRetentionD30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PayRetentionD30", payRetentionD30, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPayRetentionD30
		#region GetByDNU_GGR1
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1)
		{
			return GetByDNU_GGR1(dNU_GGR1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, TransactionManager tm_)
		{
			return GetByDNU_GGR1(dNU_GGR1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, TransactionManager tm_)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, int top_)
		{
			return GetByDNU_GGR1(dNU_GGR1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, int top_)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR1(dNU_GGR1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, string sort_)
		{
			return GetByDNU_GGR1(dNU_GGR1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, string sort_)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR1(dNU_GGR1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR1Async(dNU_GGR1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR1（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR1">DNU_GGR1</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR1(long dNU_GGR1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR1` = @DNU_GGR1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR1Async(long dNU_GGR1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR1` = @DNU_GGR1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR1", dNU_GGR1, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR1
		#region GetByDNU_GGR2
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2)
		{
			return GetByDNU_GGR2(dNU_GGR2, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, TransactionManager tm_)
		{
			return GetByDNU_GGR2(dNU_GGR2, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, TransactionManager tm_)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, int top_)
		{
			return GetByDNU_GGR2(dNU_GGR2, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, int top_)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR2(dNU_GGR2, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, string sort_)
		{
			return GetByDNU_GGR2(dNU_GGR2, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, string sort_)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR2(dNU_GGR2, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR2Async(dNU_GGR2, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR2（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR2">DNU_GGR2</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR2(long dNU_GGR2, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR2` = @DNU_GGR2", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR2Async(long dNU_GGR2, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR2` = @DNU_GGR2", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR2", dNU_GGR2, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR2
		#region GetByDNU_GGR3
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3)
		{
			return GetByDNU_GGR3(dNU_GGR3, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, TransactionManager tm_)
		{
			return GetByDNU_GGR3(dNU_GGR3, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, TransactionManager tm_)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, int top_)
		{
			return GetByDNU_GGR3(dNU_GGR3, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, int top_)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR3(dNU_GGR3, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, string sort_)
		{
			return GetByDNU_GGR3(dNU_GGR3, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, string sort_)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR3(dNU_GGR3, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR3Async(dNU_GGR3, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR3（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR3">DNU_GGR3</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR3(long dNU_GGR3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR3` = @DNU_GGR3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR3Async(long dNU_GGR3, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR3` = @DNU_GGR3", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR3", dNU_GGR3, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR3
		#region GetByDNU_GGR4
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4)
		{
			return GetByDNU_GGR4(dNU_GGR4, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, TransactionManager tm_)
		{
			return GetByDNU_GGR4(dNU_GGR4, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, TransactionManager tm_)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, int top_)
		{
			return GetByDNU_GGR4(dNU_GGR4, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, int top_)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR4(dNU_GGR4, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, string sort_)
		{
			return GetByDNU_GGR4(dNU_GGR4, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, string sort_)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR4(dNU_GGR4, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR4Async(dNU_GGR4, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR4（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR4">DNU_GGR4</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR4(long dNU_GGR4, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR4` = @DNU_GGR4", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR4Async(long dNU_GGR4, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR4` = @DNU_GGR4", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR4", dNU_GGR4, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR4
		#region GetByDNU_GGR5
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5)
		{
			return GetByDNU_GGR5(dNU_GGR5, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, TransactionManager tm_)
		{
			return GetByDNU_GGR5(dNU_GGR5, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, TransactionManager tm_)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, int top_)
		{
			return GetByDNU_GGR5(dNU_GGR5, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, int top_)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR5(dNU_GGR5, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, string sort_)
		{
			return GetByDNU_GGR5(dNU_GGR5, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, string sort_)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR5(dNU_GGR5, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR5Async(dNU_GGR5, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR5（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR5">DNU_GGR5</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR5(long dNU_GGR5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR5` = @DNU_GGR5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR5Async(long dNU_GGR5, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR5` = @DNU_GGR5", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR5", dNU_GGR5, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR5
		#region GetByDNU_GGR6
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6)
		{
			return GetByDNU_GGR6(dNU_GGR6, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, TransactionManager tm_)
		{
			return GetByDNU_GGR6(dNU_GGR6, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, TransactionManager tm_)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, int top_)
		{
			return GetByDNU_GGR6(dNU_GGR6, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, int top_)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR6(dNU_GGR6, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, string sort_)
		{
			return GetByDNU_GGR6(dNU_GGR6, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, string sort_)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR6(dNU_GGR6, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR6Async(dNU_GGR6, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR6（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR6">DNU_GGR6</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR6(long dNU_GGR6, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR6` = @DNU_GGR6", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR6Async(long dNU_GGR6, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR6` = @DNU_GGR6", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR6", dNU_GGR6, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR6
		#region GetByDNU_GGR7
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7)
		{
			return GetByDNU_GGR7(dNU_GGR7, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, TransactionManager tm_)
		{
			return GetByDNU_GGR7(dNU_GGR7, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, TransactionManager tm_)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, int top_)
		{
			return GetByDNU_GGR7(dNU_GGR7, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, int top_)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR7(dNU_GGR7, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, string sort_)
		{
			return GetByDNU_GGR7(dNU_GGR7, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, string sort_)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR7(dNU_GGR7, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR7Async(dNU_GGR7, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR7（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR7">DNU_GGR7</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR7(long dNU_GGR7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR7` = @DNU_GGR7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR7Async(long dNU_GGR7, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR7` = @DNU_GGR7", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR7", dNU_GGR7, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR7
		#region GetByDNU_GGR8
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8)
		{
			return GetByDNU_GGR8(dNU_GGR8, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, TransactionManager tm_)
		{
			return GetByDNU_GGR8(dNU_GGR8, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, TransactionManager tm_)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, int top_)
		{
			return GetByDNU_GGR8(dNU_GGR8, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, int top_)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR8(dNU_GGR8, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, string sort_)
		{
			return GetByDNU_GGR8(dNU_GGR8, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, string sort_)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR8(dNU_GGR8, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR8Async(dNU_GGR8, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR8（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR8">DNU_GGR8</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR8(long dNU_GGR8, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR8` = @DNU_GGR8", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR8Async(long dNU_GGR8, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR8` = @DNU_GGR8", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR8", dNU_GGR8, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR8
		#region GetByDNU_GGR9
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9)
		{
			return GetByDNU_GGR9(dNU_GGR9, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, TransactionManager tm_)
		{
			return GetByDNU_GGR9(dNU_GGR9, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, TransactionManager tm_)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, int top_)
		{
			return GetByDNU_GGR9(dNU_GGR9, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, int top_)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR9(dNU_GGR9, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, string sort_)
		{
			return GetByDNU_GGR9(dNU_GGR9, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, string sort_)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR9(dNU_GGR9, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR9Async(dNU_GGR9, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR9（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR9">DNU_GGR9</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR9(long dNU_GGR9, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR9` = @DNU_GGR9", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR9Async(long dNU_GGR9, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR9` = @DNU_GGR9", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR9", dNU_GGR9, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR9
		#region GetByDNU_GGR10
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10)
		{
			return GetByDNU_GGR10(dNU_GGR10, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, TransactionManager tm_)
		{
			return GetByDNU_GGR10(dNU_GGR10, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, TransactionManager tm_)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, int top_)
		{
			return GetByDNU_GGR10(dNU_GGR10, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, int top_)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR10(dNU_GGR10, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, string sort_)
		{
			return GetByDNU_GGR10(dNU_GGR10, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, string sort_)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR10(dNU_GGR10, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR10Async(dNU_GGR10, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR10（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR10">DNU_GGR10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR10(long dNU_GGR10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR10` = @DNU_GGR10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR10Async(long dNU_GGR10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR10` = @DNU_GGR10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR10", dNU_GGR10, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR10
		#region GetByDNU_GGR11
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11)
		{
			return GetByDNU_GGR11(dNU_GGR11, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, TransactionManager tm_)
		{
			return GetByDNU_GGR11(dNU_GGR11, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, TransactionManager tm_)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, int top_)
		{
			return GetByDNU_GGR11(dNU_GGR11, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, int top_)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR11(dNU_GGR11, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, string sort_)
		{
			return GetByDNU_GGR11(dNU_GGR11, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, string sort_)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR11(dNU_GGR11, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR11Async(dNU_GGR11, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR11（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR11">DNU_GGR11</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR11(long dNU_GGR11, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR11` = @DNU_GGR11", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR11Async(long dNU_GGR11, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR11` = @DNU_GGR11", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR11", dNU_GGR11, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR11
		#region GetByDNU_GGR12
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12)
		{
			return GetByDNU_GGR12(dNU_GGR12, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, TransactionManager tm_)
		{
			return GetByDNU_GGR12(dNU_GGR12, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, TransactionManager tm_)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, int top_)
		{
			return GetByDNU_GGR12(dNU_GGR12, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, int top_)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR12(dNU_GGR12, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, string sort_)
		{
			return GetByDNU_GGR12(dNU_GGR12, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, string sort_)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR12(dNU_GGR12, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR12Async(dNU_GGR12, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR12（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR12">DNU_GGR12</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR12(long dNU_GGR12, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR12` = @DNU_GGR12", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR12Async(long dNU_GGR12, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR12` = @DNU_GGR12", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR12", dNU_GGR12, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR12
		#region GetByDNU_GGR13
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13)
		{
			return GetByDNU_GGR13(dNU_GGR13, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, TransactionManager tm_)
		{
			return GetByDNU_GGR13(dNU_GGR13, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, TransactionManager tm_)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, int top_)
		{
			return GetByDNU_GGR13(dNU_GGR13, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, int top_)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR13(dNU_GGR13, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, string sort_)
		{
			return GetByDNU_GGR13(dNU_GGR13, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, string sort_)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR13(dNU_GGR13, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR13Async(dNU_GGR13, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR13（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR13">DNU_GGR13</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR13(long dNU_GGR13, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR13` = @DNU_GGR13", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR13Async(long dNU_GGR13, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR13` = @DNU_GGR13", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR13", dNU_GGR13, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR13
		#region GetByDNU_GGR14
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14)
		{
			return GetByDNU_GGR14(dNU_GGR14, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, TransactionManager tm_)
		{
			return GetByDNU_GGR14(dNU_GGR14, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, TransactionManager tm_)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, int top_)
		{
			return GetByDNU_GGR14(dNU_GGR14, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, int top_)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR14(dNU_GGR14, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, string sort_)
		{
			return GetByDNU_GGR14(dNU_GGR14, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, string sort_)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR14(dNU_GGR14, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR14Async(dNU_GGR14, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR14（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR14">DNU_GGR14</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR14(long dNU_GGR14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR14` = @DNU_GGR14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR14Async(long dNU_GGR14, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR14` = @DNU_GGR14", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR14", dNU_GGR14, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR14
		#region GetByDNU_GGR15
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15)
		{
			return GetByDNU_GGR15(dNU_GGR15, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, TransactionManager tm_)
		{
			return GetByDNU_GGR15(dNU_GGR15, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, TransactionManager tm_)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, int top_)
		{
			return GetByDNU_GGR15(dNU_GGR15, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, int top_)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR15(dNU_GGR15, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, string sort_)
		{
			return GetByDNU_GGR15(dNU_GGR15, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, string sort_)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR15(dNU_GGR15, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR15Async(dNU_GGR15, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR15（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR15">DNU_GGR15</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR15(long dNU_GGR15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR15` = @DNU_GGR15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR15Async(long dNU_GGR15, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR15` = @DNU_GGR15", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR15", dNU_GGR15, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR15
		#region GetByDNU_GGR16
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16)
		{
			return GetByDNU_GGR16(dNU_GGR16, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, TransactionManager tm_)
		{
			return GetByDNU_GGR16(dNU_GGR16, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, TransactionManager tm_)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, int top_)
		{
			return GetByDNU_GGR16(dNU_GGR16, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, int top_)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR16(dNU_GGR16, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, string sort_)
		{
			return GetByDNU_GGR16(dNU_GGR16, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, string sort_)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR16(dNU_GGR16, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR16Async(dNU_GGR16, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR16（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR16">DNU_GGR16</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR16(long dNU_GGR16, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR16` = @DNU_GGR16", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR16Async(long dNU_GGR16, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR16` = @DNU_GGR16", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR16", dNU_GGR16, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR16
		#region GetByDNU_GGR17
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17)
		{
			return GetByDNU_GGR17(dNU_GGR17, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, TransactionManager tm_)
		{
			return GetByDNU_GGR17(dNU_GGR17, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, TransactionManager tm_)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, int top_)
		{
			return GetByDNU_GGR17(dNU_GGR17, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, int top_)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR17(dNU_GGR17, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, string sort_)
		{
			return GetByDNU_GGR17(dNU_GGR17, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, string sort_)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR17(dNU_GGR17, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR17Async(dNU_GGR17, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR17（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR17">DNU_GGR17</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR17(long dNU_GGR17, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR17` = @DNU_GGR17", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR17Async(long dNU_GGR17, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR17` = @DNU_GGR17", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR17", dNU_GGR17, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR17
		#region GetByDNU_GGR18
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18)
		{
			return GetByDNU_GGR18(dNU_GGR18, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, TransactionManager tm_)
		{
			return GetByDNU_GGR18(dNU_GGR18, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, TransactionManager tm_)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, int top_)
		{
			return GetByDNU_GGR18(dNU_GGR18, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, int top_)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR18(dNU_GGR18, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, string sort_)
		{
			return GetByDNU_GGR18(dNU_GGR18, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, string sort_)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR18(dNU_GGR18, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR18Async(dNU_GGR18, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR18（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR18">DNU_GGR18</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR18(long dNU_GGR18, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR18` = @DNU_GGR18", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR18Async(long dNU_GGR18, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR18` = @DNU_GGR18", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR18", dNU_GGR18, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR18
		#region GetByDNU_GGR19
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19)
		{
			return GetByDNU_GGR19(dNU_GGR19, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, TransactionManager tm_)
		{
			return GetByDNU_GGR19(dNU_GGR19, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, TransactionManager tm_)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, int top_)
		{
			return GetByDNU_GGR19(dNU_GGR19, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, int top_)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR19(dNU_GGR19, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, string sort_)
		{
			return GetByDNU_GGR19(dNU_GGR19, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, string sort_)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR19(dNU_GGR19, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR19Async(dNU_GGR19, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR19（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR19">DNU_GGR19</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR19(long dNU_GGR19, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR19` = @DNU_GGR19", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR19Async(long dNU_GGR19, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR19` = @DNU_GGR19", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR19", dNU_GGR19, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR19
		#region GetByDNU_GGR20
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20)
		{
			return GetByDNU_GGR20(dNU_GGR20, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, TransactionManager tm_)
		{
			return GetByDNU_GGR20(dNU_GGR20, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, TransactionManager tm_)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, int top_)
		{
			return GetByDNU_GGR20(dNU_GGR20, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, int top_)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR20(dNU_GGR20, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, string sort_)
		{
			return GetByDNU_GGR20(dNU_GGR20, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, string sort_)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR20(dNU_GGR20, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR20Async(dNU_GGR20, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR20（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR20">DNU_GGR20</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR20(long dNU_GGR20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR20` = @DNU_GGR20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR20Async(long dNU_GGR20, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR20` = @DNU_GGR20", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR20", dNU_GGR20, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR20
		#region GetByDNU_GGR21
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21)
		{
			return GetByDNU_GGR21(dNU_GGR21, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, TransactionManager tm_)
		{
			return GetByDNU_GGR21(dNU_GGR21, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, TransactionManager tm_)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, int top_)
		{
			return GetByDNU_GGR21(dNU_GGR21, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, int top_)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR21(dNU_GGR21, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, string sort_)
		{
			return GetByDNU_GGR21(dNU_GGR21, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, string sort_)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR21(dNU_GGR21, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR21Async(dNU_GGR21, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR21（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR21">DNU_GGR21</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR21(long dNU_GGR21, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR21` = @DNU_GGR21", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR21Async(long dNU_GGR21, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR21` = @DNU_GGR21", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR21", dNU_GGR21, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR21
		#region GetByDNU_GGR22
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22)
		{
			return GetByDNU_GGR22(dNU_GGR22, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, TransactionManager tm_)
		{
			return GetByDNU_GGR22(dNU_GGR22, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, TransactionManager tm_)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, int top_)
		{
			return GetByDNU_GGR22(dNU_GGR22, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, int top_)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR22(dNU_GGR22, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, string sort_)
		{
			return GetByDNU_GGR22(dNU_GGR22, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, string sort_)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR22(dNU_GGR22, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR22Async(dNU_GGR22, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR22（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR22">DNU_GGR22</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR22(long dNU_GGR22, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR22` = @DNU_GGR22", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR22Async(long dNU_GGR22, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR22` = @DNU_GGR22", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR22", dNU_GGR22, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR22
		#region GetByDNU_GGR23
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23)
		{
			return GetByDNU_GGR23(dNU_GGR23, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, TransactionManager tm_)
		{
			return GetByDNU_GGR23(dNU_GGR23, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, TransactionManager tm_)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, int top_)
		{
			return GetByDNU_GGR23(dNU_GGR23, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, int top_)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR23(dNU_GGR23, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, string sort_)
		{
			return GetByDNU_GGR23(dNU_GGR23, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, string sort_)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR23(dNU_GGR23, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR23Async(dNU_GGR23, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR23（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR23">DNU_GGR23</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR23(long dNU_GGR23, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR23` = @DNU_GGR23", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR23Async(long dNU_GGR23, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR23` = @DNU_GGR23", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR23", dNU_GGR23, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR23
		#region GetByDNU_GGR24
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24)
		{
			return GetByDNU_GGR24(dNU_GGR24, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, TransactionManager tm_)
		{
			return GetByDNU_GGR24(dNU_GGR24, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, TransactionManager tm_)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, int top_)
		{
			return GetByDNU_GGR24(dNU_GGR24, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, int top_)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR24(dNU_GGR24, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, string sort_)
		{
			return GetByDNU_GGR24(dNU_GGR24, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, string sort_)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR24(dNU_GGR24, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR24Async(dNU_GGR24, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR24（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR24">DNU_GGR24</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR24(long dNU_GGR24, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR24` = @DNU_GGR24", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR24Async(long dNU_GGR24, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR24` = @DNU_GGR24", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR24", dNU_GGR24, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR24
		#region GetByDNU_GGR25
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25)
		{
			return GetByDNU_GGR25(dNU_GGR25, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, TransactionManager tm_)
		{
			return GetByDNU_GGR25(dNU_GGR25, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, TransactionManager tm_)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, int top_)
		{
			return GetByDNU_GGR25(dNU_GGR25, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, int top_)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR25(dNU_GGR25, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, string sort_)
		{
			return GetByDNU_GGR25(dNU_GGR25, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, string sort_)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR25(dNU_GGR25, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR25Async(dNU_GGR25, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR25（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR25">DNU_GGR25</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR25(long dNU_GGR25, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR25` = @DNU_GGR25", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR25Async(long dNU_GGR25, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR25` = @DNU_GGR25", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR25", dNU_GGR25, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR25
		#region GetByDNU_GGR26
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26)
		{
			return GetByDNU_GGR26(dNU_GGR26, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, TransactionManager tm_)
		{
			return GetByDNU_GGR26(dNU_GGR26, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, TransactionManager tm_)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, int top_)
		{
			return GetByDNU_GGR26(dNU_GGR26, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, int top_)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR26(dNU_GGR26, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, string sort_)
		{
			return GetByDNU_GGR26(dNU_GGR26, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, string sort_)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR26(dNU_GGR26, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR26Async(dNU_GGR26, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR26（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR26">DNU_GGR26</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR26(long dNU_GGR26, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR26` = @DNU_GGR26", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR26Async(long dNU_GGR26, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR26` = @DNU_GGR26", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR26", dNU_GGR26, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR26
		#region GetByDNU_GGR27
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27)
		{
			return GetByDNU_GGR27(dNU_GGR27, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, TransactionManager tm_)
		{
			return GetByDNU_GGR27(dNU_GGR27, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, TransactionManager tm_)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, int top_)
		{
			return GetByDNU_GGR27(dNU_GGR27, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, int top_)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR27(dNU_GGR27, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, string sort_)
		{
			return GetByDNU_GGR27(dNU_GGR27, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, string sort_)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR27(dNU_GGR27, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR27Async(dNU_GGR27, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR27（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR27">DNU_GGR27</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR27(long dNU_GGR27, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR27` = @DNU_GGR27", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR27Async(long dNU_GGR27, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR27` = @DNU_GGR27", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR27", dNU_GGR27, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR27
		#region GetByDNU_GGR28
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28)
		{
			return GetByDNU_GGR28(dNU_GGR28, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, TransactionManager tm_)
		{
			return GetByDNU_GGR28(dNU_GGR28, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, TransactionManager tm_)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, int top_)
		{
			return GetByDNU_GGR28(dNU_GGR28, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, int top_)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR28(dNU_GGR28, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, string sort_)
		{
			return GetByDNU_GGR28(dNU_GGR28, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, string sort_)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR28(dNU_GGR28, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR28Async(dNU_GGR28, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR28（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR28">DNU_GGR28</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR28(long dNU_GGR28, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR28` = @DNU_GGR28", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR28Async(long dNU_GGR28, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR28` = @DNU_GGR28", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR28", dNU_GGR28, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR28
		#region GetByDNU_GGR29
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29)
		{
			return GetByDNU_GGR29(dNU_GGR29, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, TransactionManager tm_)
		{
			return GetByDNU_GGR29(dNU_GGR29, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, TransactionManager tm_)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, int top_)
		{
			return GetByDNU_GGR29(dNU_GGR29, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, int top_)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR29(dNU_GGR29, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, string sort_)
		{
			return GetByDNU_GGR29(dNU_GGR29, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, string sort_)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR29(dNU_GGR29, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR29Async(dNU_GGR29, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR29（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR29">DNU_GGR29</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR29(long dNU_GGR29, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR29` = @DNU_GGR29", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR29Async(long dNU_GGR29, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR29` = @DNU_GGR29", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR29", dNU_GGR29, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR29
		#region GetByDNU_GGR30
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30)
		{
			return GetByDNU_GGR30(dNU_GGR30, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, TransactionManager tm_)
		{
			return GetByDNU_GGR30(dNU_GGR30, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, TransactionManager tm_)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, int top_)
		{
			return GetByDNU_GGR30(dNU_GGR30, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, int top_)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, int top_, TransactionManager tm_)
		{
			return GetByDNU_GGR30(dNU_GGR30, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, int top_, TransactionManager tm_)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, string sort_)
		{
			return GetByDNU_GGR30(dNU_GGR30, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, string sort_)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, string sort_, TransactionManager tm_)
		{
			return GetByDNU_GGR30(dNU_GGR30, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, string sort_, TransactionManager tm_)
		{
			return await GetByDNU_GGR30Async(dNU_GGR30, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 DNU_GGR30（字段） 查询
		/// </summary>
		/// /// <param name = "dNU_GGR30">DNU_GGR30</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByDNU_GGR30(long dNU_GGR30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR30` = @DNU_GGR30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByDNU_GGR30Async(long dNU_GGR30, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`DNU_GGR30` = @DNU_GGR30", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@DNU_GGR30", dNU_GGR30, MySqlDbType.Int64));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByDNU_GGR30
		#region GetByLose10
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10)
		{
			return GetByLose10(lose10, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10)
		{
			return await GetByLose10Async(lose10, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, TransactionManager tm_)
		{
			return GetByLose10(lose10, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, TransactionManager tm_)
		{
			return await GetByLose10Async(lose10, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, int top_)
		{
			return GetByLose10(lose10, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, int top_)
		{
			return await GetByLose10Async(lose10, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, int top_, TransactionManager tm_)
		{
			return GetByLose10(lose10, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, int top_, TransactionManager tm_)
		{
			return await GetByLose10Async(lose10, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, string sort_)
		{
			return GetByLose10(lose10, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, string sort_)
		{
			return await GetByLose10Async(lose10, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, string sort_, TransactionManager tm_)
		{
			return GetByLose10(lose10, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, string sort_, TransactionManager tm_)
		{
			return await GetByLose10Async(lose10, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose10（字段） 查询
		/// </summary>
		/// /// <param name = "lose10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10(int lose10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10` = @Lose10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10Async(int lose10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10` = @Lose10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10", lose10, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose10
		#region GetByLose10_100
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100)
		{
			return GetByLose10_100(lose10_100, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100)
		{
			return await GetByLose10_100Async(lose10_100, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, TransactionManager tm_)
		{
			return GetByLose10_100(lose10_100, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, TransactionManager tm_)
		{
			return await GetByLose10_100Async(lose10_100, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, int top_)
		{
			return GetByLose10_100(lose10_100, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, int top_)
		{
			return await GetByLose10_100Async(lose10_100, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, int top_, TransactionManager tm_)
		{
			return GetByLose10_100(lose10_100, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, int top_, TransactionManager tm_)
		{
			return await GetByLose10_100Async(lose10_100, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, string sort_)
		{
			return GetByLose10_100(lose10_100, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, string sort_)
		{
			return await GetByLose10_100Async(lose10_100, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, string sort_, TransactionManager tm_)
		{
			return GetByLose10_100(lose10_100, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, string sort_, TransactionManager tm_)
		{
			return await GetByLose10_100Async(lose10_100, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose10_100（字段） 查询
		/// </summary>
		/// /// <param name = "lose10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10_100(int lose10_100, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10_100` = @Lose10_100", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10_100Async(int lose10_100, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10_100` = @Lose10_100", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10_100", lose10_100, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose10_100
		#region GetByLose100_500
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500)
		{
			return GetByLose100_500(lose100_500, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500)
		{
			return await GetByLose100_500Async(lose100_500, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, TransactionManager tm_)
		{
			return GetByLose100_500(lose100_500, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, TransactionManager tm_)
		{
			return await GetByLose100_500Async(lose100_500, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, int top_)
		{
			return GetByLose100_500(lose100_500, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, int top_)
		{
			return await GetByLose100_500Async(lose100_500, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, int top_, TransactionManager tm_)
		{
			return GetByLose100_500(lose100_500, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, int top_, TransactionManager tm_)
		{
			return await GetByLose100_500Async(lose100_500, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, string sort_)
		{
			return GetByLose100_500(lose100_500, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, string sort_)
		{
			return await GetByLose100_500Async(lose100_500, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, string sort_, TransactionManager tm_)
		{
			return GetByLose100_500(lose100_500, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, string sort_, TransactionManager tm_)
		{
			return await GetByLose100_500Async(lose100_500, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose100_500（字段） 查询
		/// </summary>
		/// /// <param name = "lose100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose100_500(int lose100_500, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose100_500` = @Lose100_500", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose100_500Async(int lose100_500, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose100_500` = @Lose100_500", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose100_500", lose100_500, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose100_500
		#region GetByLose500_1000
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000)
		{
			return GetByLose500_1000(lose500_1000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000)
		{
			return await GetByLose500_1000Async(lose500_1000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, TransactionManager tm_)
		{
			return GetByLose500_1000(lose500_1000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, TransactionManager tm_)
		{
			return await GetByLose500_1000Async(lose500_1000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, int top_)
		{
			return GetByLose500_1000(lose500_1000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, int top_)
		{
			return await GetByLose500_1000Async(lose500_1000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, int top_, TransactionManager tm_)
		{
			return GetByLose500_1000(lose500_1000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, int top_, TransactionManager tm_)
		{
			return await GetByLose500_1000Async(lose500_1000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, string sort_)
		{
			return GetByLose500_1000(lose500_1000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, string sort_)
		{
			return await GetByLose500_1000Async(lose500_1000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, string sort_, TransactionManager tm_)
		{
			return GetByLose500_1000(lose500_1000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, string sort_, TransactionManager tm_)
		{
			return await GetByLose500_1000Async(lose500_1000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "lose500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose500_1000(int lose500_1000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose500_1000` = @Lose500_1000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose500_1000Async(int lose500_1000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose500_1000` = @Lose500_1000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose500_1000", lose500_1000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose500_1000
		#region GetByLose1000_3000
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000)
		{
			return GetByLose1000_3000(lose1000_3000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000)
		{
			return await GetByLose1000_3000Async(lose1000_3000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, TransactionManager tm_)
		{
			return GetByLose1000_3000(lose1000_3000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, TransactionManager tm_)
		{
			return await GetByLose1000_3000Async(lose1000_3000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, int top_)
		{
			return GetByLose1000_3000(lose1000_3000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, int top_)
		{
			return await GetByLose1000_3000Async(lose1000_3000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, int top_, TransactionManager tm_)
		{
			return GetByLose1000_3000(lose1000_3000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, int top_, TransactionManager tm_)
		{
			return await GetByLose1000_3000Async(lose1000_3000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, string sort_)
		{
			return GetByLose1000_3000(lose1000_3000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, string sort_)
		{
			return await GetByLose1000_3000Async(lose1000_3000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, string sort_, TransactionManager tm_)
		{
			return GetByLose1000_3000(lose1000_3000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, string sort_, TransactionManager tm_)
		{
			return await GetByLose1000_3000Async(lose1000_3000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "lose1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose1000_3000(int lose1000_3000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose1000_3000` = @Lose1000_3000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose1000_3000Async(int lose1000_3000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose1000_3000` = @Lose1000_3000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose1000_3000", lose1000_3000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose1000_3000
		#region GetByLose3000_5000
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000)
		{
			return GetByLose3000_5000(lose3000_5000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000)
		{
			return await GetByLose3000_5000Async(lose3000_5000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, TransactionManager tm_)
		{
			return GetByLose3000_5000(lose3000_5000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, TransactionManager tm_)
		{
			return await GetByLose3000_5000Async(lose3000_5000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, int top_)
		{
			return GetByLose3000_5000(lose3000_5000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, int top_)
		{
			return await GetByLose3000_5000Async(lose3000_5000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, int top_, TransactionManager tm_)
		{
			return GetByLose3000_5000(lose3000_5000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, int top_, TransactionManager tm_)
		{
			return await GetByLose3000_5000Async(lose3000_5000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, string sort_)
		{
			return GetByLose3000_5000(lose3000_5000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, string sort_)
		{
			return await GetByLose3000_5000Async(lose3000_5000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, string sort_, TransactionManager tm_)
		{
			return GetByLose3000_5000(lose3000_5000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, string sort_, TransactionManager tm_)
		{
			return await GetByLose3000_5000Async(lose3000_5000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "lose3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose3000_5000(int lose3000_5000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose3000_5000` = @Lose3000_5000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose3000_5000Async(int lose3000_5000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose3000_5000` = @Lose3000_5000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose3000_5000", lose3000_5000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose3000_5000
		#region GetByLose5000_10000
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000)
		{
			return GetByLose5000_10000(lose5000_10000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000)
		{
			return await GetByLose5000_10000Async(lose5000_10000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, TransactionManager tm_)
		{
			return GetByLose5000_10000(lose5000_10000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, TransactionManager tm_)
		{
			return await GetByLose5000_10000Async(lose5000_10000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, int top_)
		{
			return GetByLose5000_10000(lose5000_10000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, int top_)
		{
			return await GetByLose5000_10000Async(lose5000_10000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, int top_, TransactionManager tm_)
		{
			return GetByLose5000_10000(lose5000_10000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, int top_, TransactionManager tm_)
		{
			return await GetByLose5000_10000Async(lose5000_10000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, string sort_)
		{
			return GetByLose5000_10000(lose5000_10000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, string sort_)
		{
			return await GetByLose5000_10000Async(lose5000_10000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, string sort_, TransactionManager tm_)
		{
			return GetByLose5000_10000(lose5000_10000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, string sort_, TransactionManager tm_)
		{
			return await GetByLose5000_10000Async(lose5000_10000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "lose5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose5000_10000(int lose5000_10000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose5000_10000` = @Lose5000_10000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose5000_10000Async(int lose5000_10000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose5000_10000` = @Lose5000_10000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose5000_10000", lose5000_10000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose5000_10000
		#region GetByLose10000_50000
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000)
		{
			return GetByLose10000_50000(lose10000_50000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000)
		{
			return await GetByLose10000_50000Async(lose10000_50000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, TransactionManager tm_)
		{
			return GetByLose10000_50000(lose10000_50000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, TransactionManager tm_)
		{
			return await GetByLose10000_50000Async(lose10000_50000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, int top_)
		{
			return GetByLose10000_50000(lose10000_50000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, int top_)
		{
			return await GetByLose10000_50000Async(lose10000_50000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, int top_, TransactionManager tm_)
		{
			return GetByLose10000_50000(lose10000_50000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, int top_, TransactionManager tm_)
		{
			return await GetByLose10000_50000Async(lose10000_50000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, string sort_)
		{
			return GetByLose10000_50000(lose10000_50000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, string sort_)
		{
			return await GetByLose10000_50000Async(lose10000_50000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, string sort_, TransactionManager tm_)
		{
			return GetByLose10000_50000(lose10000_50000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, string sort_, TransactionManager tm_)
		{
			return await GetByLose10000_50000Async(lose10000_50000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose10000_50000(int lose10000_50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10000_50000` = @Lose10000_50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose10000_50000Async(int lose10000_50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose10000_50000` = @Lose10000_50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose10000_50000", lose10000_50000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose10000_50000
		#region GetByLose50000
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000)
		{
			return GetByLose50000(lose50000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000)
		{
			return await GetByLose50000Async(lose50000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, TransactionManager tm_)
		{
			return GetByLose50000(lose50000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, TransactionManager tm_)
		{
			return await GetByLose50000Async(lose50000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, int top_)
		{
			return GetByLose50000(lose50000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, int top_)
		{
			return await GetByLose50000Async(lose50000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, int top_, TransactionManager tm_)
		{
			return GetByLose50000(lose50000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, int top_, TransactionManager tm_)
		{
			return await GetByLose50000Async(lose50000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, string sort_)
		{
			return GetByLose50000(lose50000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, string sort_)
		{
			return await GetByLose50000Async(lose50000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, string sort_, TransactionManager tm_)
		{
			return GetByLose50000(lose50000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, string sort_, TransactionManager tm_)
		{
			return await GetByLose50000Async(lose50000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Lose50000（字段） 查询
		/// </summary>
		/// /// <param name = "lose50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByLose50000(int lose50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose50000` = @Lose50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByLose50000Async(int lose50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Lose50000` = @Lose50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Lose50000", lose50000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByLose50000
		#region GetByWin10
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10)
		{
			return GetByWin10(win10, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10)
		{
			return await GetByWin10Async(win10, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, TransactionManager tm_)
		{
			return GetByWin10(win10, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, TransactionManager tm_)
		{
			return await GetByWin10Async(win10, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, int top_)
		{
			return GetByWin10(win10, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, int top_)
		{
			return await GetByWin10Async(win10, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, int top_, TransactionManager tm_)
		{
			return GetByWin10(win10, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, int top_, TransactionManager tm_)
		{
			return await GetByWin10Async(win10, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, string sort_)
		{
			return GetByWin10(win10, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, string sort_)
		{
			return await GetByWin10Async(win10, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, string sort_, TransactionManager tm_)
		{
			return GetByWin10(win10, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, string sort_, TransactionManager tm_)
		{
			return await GetByWin10Async(win10, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win10（字段） 查询
		/// </summary>
		/// /// <param name = "win10">输10</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10(int win10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10` = @Win10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10Async(int win10, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10` = @Win10", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10", win10, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin10
		#region GetByWin10_100
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100)
		{
			return GetByWin10_100(win10_100, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100)
		{
			return await GetByWin10_100Async(win10_100, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, TransactionManager tm_)
		{
			return GetByWin10_100(win10_100, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, TransactionManager tm_)
		{
			return await GetByWin10_100Async(win10_100, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, int top_)
		{
			return GetByWin10_100(win10_100, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, int top_)
		{
			return await GetByWin10_100Async(win10_100, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, int top_, TransactionManager tm_)
		{
			return GetByWin10_100(win10_100, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, int top_, TransactionManager tm_)
		{
			return await GetByWin10_100Async(win10_100, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, string sort_)
		{
			return GetByWin10_100(win10_100, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, string sort_)
		{
			return await GetByWin10_100Async(win10_100, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, string sort_, TransactionManager tm_)
		{
			return GetByWin10_100(win10_100, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, string sort_, TransactionManager tm_)
		{
			return await GetByWin10_100Async(win10_100, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win10_100（字段） 查询
		/// </summary>
		/// /// <param name = "win10_100">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10_100(int win10_100, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10_100` = @Win10_100", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10_100Async(int win10_100, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10_100` = @Win10_100", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10_100", win10_100, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin10_100
		#region GetByWin100_500
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500)
		{
			return GetByWin100_500(win100_500, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500)
		{
			return await GetByWin100_500Async(win100_500, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, TransactionManager tm_)
		{
			return GetByWin100_500(win100_500, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, TransactionManager tm_)
		{
			return await GetByWin100_500Async(win100_500, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, int top_)
		{
			return GetByWin100_500(win100_500, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, int top_)
		{
			return await GetByWin100_500Async(win100_500, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, int top_, TransactionManager tm_)
		{
			return GetByWin100_500(win100_500, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, int top_, TransactionManager tm_)
		{
			return await GetByWin100_500Async(win100_500, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, string sort_)
		{
			return GetByWin100_500(win100_500, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, string sort_)
		{
			return await GetByWin100_500Async(win100_500, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, string sort_, TransactionManager tm_)
		{
			return GetByWin100_500(win100_500, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, string sort_, TransactionManager tm_)
		{
			return await GetByWin100_500Async(win100_500, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win100_500（字段） 查询
		/// </summary>
		/// /// <param name = "win100_500">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin100_500(int win100_500, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win100_500` = @Win100_500", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin100_500Async(int win100_500, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win100_500` = @Win100_500", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win100_500", win100_500, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin100_500
		#region GetByWin500_1000
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000)
		{
			return GetByWin500_1000(win500_1000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000)
		{
			return await GetByWin500_1000Async(win500_1000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, TransactionManager tm_)
		{
			return GetByWin500_1000(win500_1000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, TransactionManager tm_)
		{
			return await GetByWin500_1000Async(win500_1000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, int top_)
		{
			return GetByWin500_1000(win500_1000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, int top_)
		{
			return await GetByWin500_1000Async(win500_1000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, int top_, TransactionManager tm_)
		{
			return GetByWin500_1000(win500_1000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, int top_, TransactionManager tm_)
		{
			return await GetByWin500_1000Async(win500_1000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, string sort_)
		{
			return GetByWin500_1000(win500_1000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, string sort_)
		{
			return await GetByWin500_1000Async(win500_1000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, string sort_, TransactionManager tm_)
		{
			return GetByWin500_1000(win500_1000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, string sort_, TransactionManager tm_)
		{
			return await GetByWin500_1000Async(win500_1000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win500_1000（字段） 查询
		/// </summary>
		/// /// <param name = "win500_1000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin500_1000(int win500_1000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win500_1000` = @Win500_1000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin500_1000Async(int win500_1000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win500_1000` = @Win500_1000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win500_1000", win500_1000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin500_1000
		#region GetByWin1000_3000
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000)
		{
			return GetByWin1000_3000(win1000_3000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000)
		{
			return await GetByWin1000_3000Async(win1000_3000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, TransactionManager tm_)
		{
			return GetByWin1000_3000(win1000_3000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, TransactionManager tm_)
		{
			return await GetByWin1000_3000Async(win1000_3000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, int top_)
		{
			return GetByWin1000_3000(win1000_3000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, int top_)
		{
			return await GetByWin1000_3000Async(win1000_3000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, int top_, TransactionManager tm_)
		{
			return GetByWin1000_3000(win1000_3000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, int top_, TransactionManager tm_)
		{
			return await GetByWin1000_3000Async(win1000_3000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, string sort_)
		{
			return GetByWin1000_3000(win1000_3000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, string sort_)
		{
			return await GetByWin1000_3000Async(win1000_3000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, string sort_, TransactionManager tm_)
		{
			return GetByWin1000_3000(win1000_3000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, string sort_, TransactionManager tm_)
		{
			return await GetByWin1000_3000Async(win1000_3000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win1000_3000（字段） 查询
		/// </summary>
		/// /// <param name = "win1000_3000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin1000_3000(int win1000_3000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win1000_3000` = @Win1000_3000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin1000_3000Async(int win1000_3000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win1000_3000` = @Win1000_3000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win1000_3000", win1000_3000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin1000_3000
		#region GetByWin3000_5000
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000)
		{
			return GetByWin3000_5000(win3000_5000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000)
		{
			return await GetByWin3000_5000Async(win3000_5000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, TransactionManager tm_)
		{
			return GetByWin3000_5000(win3000_5000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, TransactionManager tm_)
		{
			return await GetByWin3000_5000Async(win3000_5000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, int top_)
		{
			return GetByWin3000_5000(win3000_5000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, int top_)
		{
			return await GetByWin3000_5000Async(win3000_5000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, int top_, TransactionManager tm_)
		{
			return GetByWin3000_5000(win3000_5000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, int top_, TransactionManager tm_)
		{
			return await GetByWin3000_5000Async(win3000_5000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, string sort_)
		{
			return GetByWin3000_5000(win3000_5000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, string sort_)
		{
			return await GetByWin3000_5000Async(win3000_5000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, string sort_, TransactionManager tm_)
		{
			return GetByWin3000_5000(win3000_5000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, string sort_, TransactionManager tm_)
		{
			return await GetByWin3000_5000Async(win3000_5000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win3000_5000（字段） 查询
		/// </summary>
		/// /// <param name = "win3000_5000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin3000_5000(int win3000_5000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win3000_5000` = @Win3000_5000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin3000_5000Async(int win3000_5000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win3000_5000` = @Win3000_5000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win3000_5000", win3000_5000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin3000_5000
		#region GetByWin5000_10000
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000)
		{
			return GetByWin5000_10000(win5000_10000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000)
		{
			return await GetByWin5000_10000Async(win5000_10000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, TransactionManager tm_)
		{
			return GetByWin5000_10000(win5000_10000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, TransactionManager tm_)
		{
			return await GetByWin5000_10000Async(win5000_10000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, int top_)
		{
			return GetByWin5000_10000(win5000_10000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, int top_)
		{
			return await GetByWin5000_10000Async(win5000_10000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, int top_, TransactionManager tm_)
		{
			return GetByWin5000_10000(win5000_10000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, int top_, TransactionManager tm_)
		{
			return await GetByWin5000_10000Async(win5000_10000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, string sort_)
		{
			return GetByWin5000_10000(win5000_10000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, string sort_)
		{
			return await GetByWin5000_10000Async(win5000_10000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, string sort_, TransactionManager tm_)
		{
			return GetByWin5000_10000(win5000_10000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, string sort_, TransactionManager tm_)
		{
			return await GetByWin5000_10000Async(win5000_10000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win5000_10000（字段） 查询
		/// </summary>
		/// /// <param name = "win5000_10000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin5000_10000(int win5000_10000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win5000_10000` = @Win5000_10000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin5000_10000Async(int win5000_10000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win5000_10000` = @Win5000_10000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win5000_10000", win5000_10000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin5000_10000
		#region GetByWin10000_50000
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000)
		{
			return GetByWin10000_50000(win10000_50000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000)
		{
			return await GetByWin10000_50000Async(win10000_50000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, TransactionManager tm_)
		{
			return GetByWin10000_50000(win10000_50000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, TransactionManager tm_)
		{
			return await GetByWin10000_50000Async(win10000_50000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, int top_)
		{
			return GetByWin10000_50000(win10000_50000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, int top_)
		{
			return await GetByWin10000_50000Async(win10000_50000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, int top_, TransactionManager tm_)
		{
			return GetByWin10000_50000(win10000_50000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, int top_, TransactionManager tm_)
		{
			return await GetByWin10000_50000Async(win10000_50000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, string sort_)
		{
			return GetByWin10000_50000(win10000_50000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, string sort_)
		{
			return await GetByWin10000_50000Async(win10000_50000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, string sort_, TransactionManager tm_)
		{
			return GetByWin10000_50000(win10000_50000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, string sort_, TransactionManager tm_)
		{
			return await GetByWin10000_50000Async(win10000_50000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win10000_50000（字段） 查询
		/// </summary>
		/// /// <param name = "win10000_50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin10000_50000(int win10000_50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10000_50000` = @Win10000_50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin10000_50000Async(int win10000_50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win10000_50000` = @Win10000_50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win10000_50000", win10000_50000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin10000_50000
		#region GetByWin50000
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000)
		{
			return GetByWin50000(win50000, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000)
		{
			return await GetByWin50000Async(win50000, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, TransactionManager tm_)
		{
			return GetByWin50000(win50000, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, TransactionManager tm_)
		{
			return await GetByWin50000Async(win50000, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, int top_)
		{
			return GetByWin50000(win50000, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, int top_)
		{
			return await GetByWin50000Async(win50000, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, int top_, TransactionManager tm_)
		{
			return GetByWin50000(win50000, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, int top_, TransactionManager tm_)
		{
			return await GetByWin50000Async(win50000, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, string sort_)
		{
			return GetByWin50000(win50000, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, string sort_)
		{
			return await GetByWin50000Async(win50000, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, string sort_, TransactionManager tm_)
		{
			return GetByWin50000(win50000, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, string sort_, TransactionManager tm_)
		{
			return await GetByWin50000Async(win50000, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 Win50000（字段） 查询
		/// </summary>
		/// /// <param name = "win50000">输10-100人数</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByWin50000(int win50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win50000` = @Win50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByWin50000Async(int win50000, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`Win50000` = @Win50000", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@Win50000", win50000, MySqlDbType.Int32));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByWin50000
		#region GetByTotalBalanceCalcTime
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, TransactionManager tm_)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, TransactionManager tm_)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, int top_)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, int top_)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, int top_, TransactionManager tm_)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, int top_, TransactionManager tm_)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, string sort_)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, string sort_)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, string sort_, TransactionManager tm_)
		{
			return GetByTotalBalanceCalcTime(totalBalanceCalcTime, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, string sort_, TransactionManager tm_)
		{
			return await GetByTotalBalanceCalcTimeAsync(totalBalanceCalcTime, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 TotalBalanceCalcTime（字段） 查询
		/// </summary>
		/// /// <param name = "totalBalanceCalcTime">账户存量查询时间</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByTotalBalanceCalcTime(DateTime totalBalanceCalcTime, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`TotalBalanceCalcTime` = @TotalBalanceCalcTime", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByTotalBalanceCalcTimeAsync(DateTime totalBalanceCalcTime, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`TotalBalanceCalcTime` = @TotalBalanceCalcTime", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@TotalBalanceCalcTime", totalBalanceCalcTime, MySqlDbType.DateTime));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByTotalBalanceCalcTime
		#region GetByBetD1
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1)
		{
			return GetByBetD1(betD1, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1)
		{
			return await GetByBetD1Async(betD1, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, TransactionManager tm_)
		{
			return GetByBetD1(betD1, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, TransactionManager tm_)
		{
			return await GetByBetD1Async(betD1, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, int top_)
		{
			return GetByBetD1(betD1, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, int top_)
		{
			return await GetByBetD1Async(betD1, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, int top_, TransactionManager tm_)
		{
			return GetByBetD1(betD1, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, int top_, TransactionManager tm_)
		{
			return await GetByBetD1Async(betD1, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, string sort_)
		{
			return GetByBetD1(betD1, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, string sort_)
		{
			return await GetByBetD1Async(betD1, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, string sort_, TransactionManager tm_)
		{
			return GetByBetD1(betD1, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, string sort_, TransactionManager tm_)
		{
			return await GetByBetD1Async(betD1, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 BetD1（字段） 查询
		/// </summary>
		/// /// <param name = "betD1">下注一日留存</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByBetD1(float betD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetD1` = @BetD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByBetD1Async(float betD1, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`BetD1` = @BetD1", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@BetD1", betD1, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByBetD1
		#region GetByRMPBet
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet)
		{
			return GetByRMPBet(rMPBet, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet)
		{
			return await GetByRMPBetAsync(rMPBet, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, TransactionManager tm_)
		{
			return GetByRMPBet(rMPBet, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, TransactionManager tm_)
		{
			return await GetByRMPBetAsync(rMPBet, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, int top_)
		{
			return GetByRMPBet(rMPBet, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, int top_)
		{
			return await GetByRMPBetAsync(rMPBet, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, int top_, TransactionManager tm_)
		{
			return GetByRMPBet(rMPBet, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, int top_, TransactionManager tm_)
		{
			return await GetByRMPBetAsync(rMPBet, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, string sort_)
		{
			return GetByRMPBet(rMPBet, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, string sort_)
		{
			return await GetByRMPBetAsync(rMPBet, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, string sort_, TransactionManager tm_)
		{
			return GetByRMPBet(rMPBet, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, string sort_, TransactionManager tm_)
		{
			return await GetByRMPBetAsync(rMPBet, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rMPBet">注册用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRMPBet(float rMPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RMPBet` = @RMPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRMPBetAsync(float rMPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RMPBet` = @RMPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RMPBet", rMPBet, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRMPBet
		#region GetByRSPBet
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet)
		{
			return GetByRSPBet(rSPBet, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet)
		{
			return await GetByRSPBetAsync(rSPBet, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, TransactionManager tm_)
		{
			return GetByRSPBet(rSPBet, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, TransactionManager tm_)
		{
			return await GetByRSPBetAsync(rSPBet, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, int top_)
		{
			return GetByRSPBet(rSPBet, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, int top_)
		{
			return await GetByRSPBetAsync(rSPBet, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, int top_, TransactionManager tm_)
		{
			return GetByRSPBet(rSPBet, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, int top_, TransactionManager tm_)
		{
			return await GetByRSPBetAsync(rSPBet, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, string sort_)
		{
			return GetByRSPBet(rSPBet, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, string sort_)
		{
			return await GetByRSPBetAsync(rSPBet, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, string sort_, TransactionManager tm_)
		{
			return GetByRSPBet(rSPBet, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, string sort_, TransactionManager tm_)
		{
			return await GetByRSPBetAsync(rSPBet, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "rSPBet">注册用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRSPBet(float rSPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RSPBet` = @RSPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRSPBetAsync(float rSPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RSPBet` = @RSPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RSPBet", rSPBet, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRSPBet
		#region GetByPSPBet
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet)
		{
			return GetByPSPBet(pSPBet, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet)
		{
			return await GetByPSPBetAsync(pSPBet, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, TransactionManager tm_)
		{
			return GetByPSPBet(pSPBet, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, TransactionManager tm_)
		{
			return await GetByPSPBetAsync(pSPBet, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, int top_)
		{
			return GetByPSPBet(pSPBet, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, int top_)
		{
			return await GetByPSPBetAsync(pSPBet, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, int top_, TransactionManager tm_)
		{
			return GetByPSPBet(pSPBet, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, int top_, TransactionManager tm_)
		{
			return await GetByPSPBetAsync(pSPBet, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, string sort_)
		{
			return GetByPSPBet(pSPBet, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, string sort_)
		{
			return await GetByPSPBetAsync(pSPBet, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, string sort_, TransactionManager tm_)
		{
			return GetByPSPBet(pSPBet, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, string sort_, TransactionManager tm_)
		{
			return await GetByPSPBetAsync(pSPBet, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PSPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pSPBet">充值用户单充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPSPBet(float pSPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PSPBet` = @PSPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPSPBetAsync(float pSPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PSPBet` = @PSPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PSPBet", pSPBet, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPSPBet
		#region GetByPMPBet
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet)
		{
			return GetByPMPBet(pMPBet, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet)
		{
			return await GetByPMPBetAsync(pMPBet, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, TransactionManager tm_)
		{
			return GetByPMPBet(pMPBet, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, TransactionManager tm_)
		{
			return await GetByPMPBetAsync(pMPBet, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, int top_)
		{
			return GetByPMPBet(pMPBet, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, int top_)
		{
			return await GetByPMPBetAsync(pMPBet, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, int top_, TransactionManager tm_)
		{
			return GetByPMPBet(pMPBet, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, int top_, TransactionManager tm_)
		{
			return await GetByPMPBetAsync(pMPBet, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, string sort_)
		{
			return GetByPMPBet(pMPBet, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, string sort_)
		{
			return await GetByPMPBetAsync(pMPBet, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, string sort_, TransactionManager tm_)
		{
			return GetByPMPBet(pMPBet, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, string sort_, TransactionManager tm_)
		{
			return await GetByPMPBetAsync(pMPBet, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 PMPBet（字段） 查询
		/// </summary>
		/// /// <param name = "pMPBet">充值用户复充人均下注</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByPMPBet(float pMPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PMPBet` = @PMPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByPMPBetAsync(float pMPBet, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`PMPBet` = @PMPBet", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@PMPBet", pMPBet, MySqlDbType.Float));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByPMPBet
		#region GetByRecDate
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate)
		{
			return GetByRecDate(recDate, 0, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate)
		{
			return await GetByRecDateAsync(recDate, 0, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, TransactionManager tm_)
		{
			return GetByRecDate(recDate, 0, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, TransactionManager tm_)
		{
			return await GetByRecDateAsync(recDate, 0, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name = "top_">获取行数</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, int top_)
		{
			return GetByRecDate(recDate, top_, string.Empty, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, int top_)
		{
			return await GetByRecDateAsync(recDate, top_, string.Empty, null);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name = "top_">获取行数</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, int top_, TransactionManager tm_)
		{
			return GetByRecDate(recDate, top_, string.Empty, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, int top_, TransactionManager tm_)
		{
			return await GetByRecDateAsync(recDate, top_, string.Empty, tm_);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name = "sort_">排序表达式</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, string sort_)
		{
			return GetByRecDate(recDate, 0, sort_, null);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, string sort_)
		{
			return await GetByRecDateAsync(recDate, 0, sort_, null);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, string sort_, TransactionManager tm_)
		{
			return GetByRecDate(recDate, 0, sort_, tm_);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, string sort_, TransactionManager tm_)
		{
			return await GetByRecDateAsync(recDate, 0, sort_, tm_);
		}
		
		/// <summary>
		/// 按 RecDate（字段） 查询
		/// </summary>
		/// /// <param name = "recDate">记录时间</param>
		/// <param name = "top_">获取行数</param>
		/// <param name = "sort_">排序表达式</param>
		/// <param name="tm_">事务管理对象</param>
		/// <return>实体对象集合</return>
		public List<Sr_oper_dayEO> GetByRecDate(DateTime recDate, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RecDate` = @RecDate", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime));
			return Database.ExecSqlList(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		public async Task<List<Sr_oper_dayEO>> GetByRecDateAsync(DateTime recDate, int top_, string sort_, TransactionManager tm_)
		{
			var sql_ = BuildSelectSQL("`RecDate` = @RecDate", top_, sort_);
			var paras_ = new List<MySqlParameter>();
			paras_.Add(Database.CreateInParameter("@RecDate", recDate, MySqlDbType.DateTime));
			return await Database.ExecSqlListAsync(sql_, paras_, tm_, Sr_oper_dayEO.MapDataReader);
		}
		#endregion // GetByRecDate
		#endregion // GetByXXX
		#endregion // Get
	}
	#endregion // MO
}
